# ==================================================================
# SYNOPSYS CONFIDENTIAL - This is an unpublished, proprietary work  
# of Synopsys, Inc., and is fully protected under copyright and     
# trade secret laws. You may not view, use, disclose, copy, or      
# distribute this file or any information contained herein except   
# pursuant to a valid written license from Synopsys.                
# ==================================================================

"""
.. currentmodule:: swbpy2.tool.Svisual
"""

import os
import time
import socket
import signal
import subprocess
import weakref

from swbpy2.swblmclient.Client import Client
from swbutils.common.TclStartup import TclStartup

_STARTUP_WAIT = 0.5
_MAX_STARTUP_WAIT = _STARTUP_WAIT * 120

svInd = 1

class Svisual:
    """
    Class for loading file in SVisual:
    plot files or script files.
    """
    
    def __init__(self, wait_upon_ready = True, tmp_path = os.getcwd()):
        """
        Constructor of Svisual object.
        
        :param bool wait_upon_ready: The object checks the initialization of the Svisual Tcl interface before completing the construction of the object.
        :param str tmp_path: Temporary path in the filesystem to store internal startup Tcl scripts.
        :raises Exception: If the Tcl interface of Svisual is not ready within 60 seconds.
        """
        
        global svInd

        # creates internal objects and launches Svisual session
        self._id = 'SWB_' + str(socket.gethostname()) + '_' + str(os.getpid()) + '_' + str(svInd)
        self._startup = TclStartup(self._id, tmp_path)
        self._startup_script = self._startup.get_script()
        svInd =  svInd + 1
        self._process = subprocess.Popen(['svisual ' + self._startup_script + ' -swb ' + self._id], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, shell=True, preexec_fn=os.setsid)
        self._client = Client(self._id)
        
        # waits upon Svisual's tcl interface ready if requested
        wait = 0
        while(wait_upon_ready):
            time.sleep(_STARTUP_WAIT)
            if self._startup.is_tcl_ready():
                break
            elif wait < _MAX_STARTUP_WAIT:
                wait = wait + _STARTUP_WAIT                
            else:
                raise Exception('Svisual tcl interface is taking more than {0} seconds to be ready.'.format(_MAX_STARTUP_WAIT))
        weakref.finalize(self, self.finalize)                

    def finalize(self):
        """
        Destructor of Svisual object: takes care of closing the Svisual instance created.
        """
        
        if self._process is not None:
            os.killpg(os.getpgid(self._process.pid), signal.SIGTERM)
        
    def LoadFile(self, file):
        """
        Send the input Tcl script file to Svisual instance.
        
        :param str file: Input Tcl script to be executed by the Svisual instance.
        :raises Exception: If the Svisual instance it is not yet created.
        :raises Exception: If the Svisual instance has not its Tcl interface ready yet.
        
        .. Note::

           Please check with :ref:`api/swbpy2.tool:Examples` for use cases.
        """
        
        if self._process is None:
            raise Exception('Svisual process is not attached')
        if not self._startup.is_tcl_ready():
            raise Exception('Svisual tcl interface not yet ready')

        self._client.LoadFileInSvisual(file)
        
    def IsTclReady(self):
        """
        Method to test if the Tcl interface of the Svisual instance is ready.
        
        :return: Check if the Tcl interface is ready.
        :rtype: bool
        :raises Exception: If the Svisual instance it is not yet created.
        """
        
        if self._process is None:
            raise Exception('Svisual process is not attached')
                
        return self._startup.is_tcl_ready()

    def Detach(self):
        """
        Method to detach the current process of the Svisual instance from the object.
        """
        
        self._process = None
