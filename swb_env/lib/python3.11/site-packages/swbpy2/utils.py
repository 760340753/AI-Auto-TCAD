"""Utility functions."""


import csv as _csv

from io import StringIO as _StringIO
from itertools import chain as _chain
from os import scandir as _scandir
from pathlib import Path as _Path

def is_swb_project(project_path):
    """Return ``True`` if ``project_path`` is an SWB project.

    Criteria of a SWB project:

    1.  ``project_path`` is a directory.
    2.  One of the following conditions is fulfilled:
        *   file ``project_path/.project`` exists (file-based SWB project)
        *   directory ``project_path/.isSWBdb`` exists (DB-based SWB project)
    """
    project_path = _Path(project_path)

    return project_path.is_dir() and (
        project_path.joinpath(".project").exists()
        or project_path.joinpath(".isSWBdb").exists()
    )


def collect_swb_projects(path):
    """Return iterable containing all SWB projects inside ``path``.

    .. note::
        Nested SWB projects are not allowed. SWB project folder is a
        terminal folder in every tree branch.
    """
    with _scandir(path) as entries:
        subdirectories = {_Path(e.path) for e in entries if e.is_dir()}

        depth_1_projects = {*filter(is_swb_project, subdirectories)}

        deep_project_iters = (
            collect_swb_projects(d) for d in subdirectories - depth_1_projects
        )

        return _chain(depth_1_projects, *deep_project_iters)


def full_node_path(tree, node):
    return [*tree.NodePath(node), node]


def _get_parameter_value(tree, node):
    pname = tree.NodePname(node)
    return tree.NodePval(node, pname, cast=False)


def _get_variable_value(tree, leaf_node, variable_name):
    return tree.VarValue(leaf_node, variable_name, loadVars=False)[0]


def _get_variable_values(tree, leaf_node, var_names):
    return (_get_variable_value(tree, leaf_node, n) for n in var_names)


def _as_csv_data(rows):
    if len({len(r) for r in rows}) == 1:
        with _StringIO() as csv_file:
            _csv.writer(csv_file).writerows(rows)
            return csv_file.getvalue()

    else:
        raise RuntimeError(
            "Not all rows in the generated CSV file have the same length."
        )


def get_leaf_nodes(tree):
    leaf_nodes = tree.AllLeafNodes()

    if len(leaf_nodes) == 0:
        raise RuntimeError(
            "The tree is empty, this may be caused by trying to open a non-existent "
            "SWB project."
        )

    else:
        return leaf_nodes

def _project_to_csv(tree):
    leaf_nodes = get_leaf_nodes(tree)
    first_leaf_path = full_node_path(tree, leaf_nodes[0])

    param_names = [*map(tree.NodePname, first_leaf_path)]
    var_names = tree.AllVarNames()
    vars_row_filler = [None] * len(var_names)

    tool_labels = [*map(tree.NodeTool, first_leaf_path)]
    tool_names = [*map(tree.DBTool, tool_labels)] + vars_row_filler
    tool_labels += vars_row_filler
    data = []
    for leaf_node in leaf_nodes:
        node_path = full_node_path(tree, leaf_node)
        params = []
        for node, param in zip(node_path, param_names):
            params.append( tree.NodePval(node, param) )
        var_values = _get_variable_values(tree, leaf_node, var_names)
        data.append(list(_chain(params, var_values)))

    return _as_csv_data(
        [
            tool_names,
            tool_labels,
            param_names + var_names,
            *data,
        ]
    )


def project_to_csv(path):
    """Transform all project data into CSV data.

    ::

        header composition:
        1st line: tool names
        2nd line: tool labels
        3rd line: parameter names and variable names
    """
    
    from . import Deck as _Deck

    path = _Path(path)
    deck = _Deck(path)
    return deck.export()
    