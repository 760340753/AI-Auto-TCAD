# ==================================================================
# SYNOPSYS CONFIDENTIAL - This is an unpublished, proprietary work  
# of Synopsys, Inc., and is fully protected under copyright and     
# trade secret laws. You may not view, use, disclose, copy, or      
# distribute this file or any information contained herein except   
# pursuant to a valid written license from Synopsys.                
# ==================================================================

"""
.. currentmodule:: swbpy2.swblmclient.Observer
"""

from abc import abstractmethod, ABC

from swbpy2.swblmclient.swblmclient import SWBObserver

class Observer(ABC, SWBObserver):
    """
    Observer interface to receive messages from SWBLM transport layer.
    """

    def __init__(self):
        """
        Constructor of Observer object.
        """
        SWBObserver.__init__(self)

    @abstractmethod
    def HandleEvents(self, args):
        """
        Callback invoked when a message from SWLM transport layer is received.
        
        :param dict args: Dictionary with key-value pairs containing the set of message-value received from SWBLM daemon.
        
        .. Note::

           Please check with :ref:`api/swbpy2.swblmclient:Examples` for use cases.
        """
        pass
    
