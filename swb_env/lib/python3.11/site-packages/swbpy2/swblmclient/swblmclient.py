# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _swblmclient
else:
    import _swblmclient

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class SwigPyIterator(object):
    r"""Proxy of C++ swig::SwigPyIterator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _swblmclient.delete_SwigPyIterator

    def value(self):
        r"""value(SwigPyIterator self) -> PyObject *"""
        return _swblmclient.SwigPyIterator_value(self)

    def incr(self, n=1):
        r"""
        incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator

        Parameters
        ----------
        n: size_t

        """
        return _swblmclient.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        r"""
        decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator

        Parameters
        ----------
        n: size_t

        """
        return _swblmclient.SwigPyIterator_decr(self, n)

    def distance(self, x):
        r"""
        distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _swblmclient.SwigPyIterator_distance(self, x)

    def equal(self, x):
        r"""
        equal(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _swblmclient.SwigPyIterator_equal(self, x)

    def copy(self):
        r"""copy(SwigPyIterator self) -> SwigPyIterator"""
        return _swblmclient.SwigPyIterator_copy(self)

    def next(self):
        r"""next(SwigPyIterator self) -> PyObject *"""
        return _swblmclient.SwigPyIterator_next(self)

    def __next__(self):
        r"""__next__(SwigPyIterator self) -> PyObject *"""
        return _swblmclient.SwigPyIterator___next__(self)

    def previous(self):
        r"""previous(SwigPyIterator self) -> PyObject *"""
        return _swblmclient.SwigPyIterator_previous(self)

    def advance(self, n):
        r"""
        advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _swblmclient.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        r"""
        __eq__(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _swblmclient.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        r"""
        __ne__(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _swblmclient.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        r"""
        __iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _swblmclient.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        r"""
        __isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _swblmclient.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        r"""
        __add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _swblmclient.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        r"""
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _swblmclient.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _swblmclient:
_swblmclient.SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _swblmclient.SHARED_PTR_DISOWN

class map_s_s(object):
    r"""Proxy of C++ std::map< std::string,std::string > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(map_s_s self) -> SwigPyIterator"""
        return _swblmclient.map_s_s_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(map_s_s self) -> bool"""
        return _swblmclient.map_s_s___nonzero__(self)

    def __bool__(self):
        r"""__bool__(map_s_s self) -> bool"""
        return _swblmclient.map_s_s___bool__(self)

    def __len__(self):
        r"""__len__(map_s_s self) -> std::map< std::string,std::string >::size_type"""
        return _swblmclient.map_s_s___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        r"""
        __getitem__(map_s_s self, std::map< std::string,std::string >::key_type const & key) -> std::map< std::string,std::string >::mapped_type const &

        Parameters
        ----------
        key: str

        """
        return _swblmclient.map_s_s___getitem__(self, key)

    def __delitem__(self, key):
        r"""
        __delitem__(map_s_s self, std::map< std::string,std::string >::key_type const & key)

        Parameters
        ----------
        key: str

        """
        return _swblmclient.map_s_s___delitem__(self, key)

    def has_key(self, key):
        r"""
        has_key(map_s_s self, std::map< std::string,std::string >::key_type const & key) -> bool

        Parameters
        ----------
        key: str

        """
        return _swblmclient.map_s_s_has_key(self, key)

    def keys(self):
        r"""keys(map_s_s self) -> PyObject *"""
        return _swblmclient.map_s_s_keys(self)

    def values(self):
        r"""values(map_s_s self) -> PyObject *"""
        return _swblmclient.map_s_s_values(self)

    def items(self):
        r"""items(map_s_s self) -> PyObject *"""
        return _swblmclient.map_s_s_items(self)

    def __contains__(self, key):
        r"""
        __contains__(map_s_s self, std::map< std::string,std::string >::key_type const & key) -> bool

        Parameters
        ----------
        key: str

        """
        return _swblmclient.map_s_s___contains__(self, key)

    def key_iterator(self):
        r"""key_iterator(map_s_s self) -> SwigPyIterator"""
        return _swblmclient.map_s_s_key_iterator(self)

    def value_iterator(self):
        r"""value_iterator(map_s_s self) -> SwigPyIterator"""
        return _swblmclient.map_s_s_value_iterator(self)

    def __setitem__(self, *args):
        r"""
        __setitem__(map_s_s self, std::map< std::string,std::string >::key_type const & key)

        Parameters
        ----------
        key: str

        __setitem__(map_s_s self, std::map< std::string,std::string >::key_type const & key, std::map< std::string,std::string >::mapped_type const & x)

        Parameters
        ----------
        key: str
        x: str

        """
        return _swblmclient.map_s_s___setitem__(self, *args)

    def asdict(self):
        r"""asdict(map_s_s self) -> PyObject *"""
        return _swblmclient.map_s_s_asdict(self)

    def __init__(self, *args):
        r"""
        __init__(map_s_s self, std::less< std::string > const & other) -> map_s_s

        Parameters
        ----------
        other: std::less< std::string > const &

        __init__(map_s_s self) -> map_s_s
        __init__(map_s_s self, map_s_s other) -> map_s_s

        Parameters
        ----------
        other: std::map< std::string,std::string > const &

        """
        _swblmclient.map_s_s_swiginit(self, _swblmclient.new_map_s_s(*args))

    def empty(self):
        r"""empty(map_s_s self) -> bool"""
        return _swblmclient.map_s_s_empty(self)

    def size(self):
        r"""size(map_s_s self) -> std::map< std::string,std::string >::size_type"""
        return _swblmclient.map_s_s_size(self)

    def swap(self, v):
        r"""
        swap(map_s_s self, map_s_s v)

        Parameters
        ----------
        v: std::map< std::string,std::string > &

        """
        return _swblmclient.map_s_s_swap(self, v)

    def begin(self):
        r"""begin(map_s_s self) -> std::map< std::string,std::string >::iterator"""
        return _swblmclient.map_s_s_begin(self)

    def end(self):
        r"""end(map_s_s self) -> std::map< std::string,std::string >::iterator"""
        return _swblmclient.map_s_s_end(self)

    def rbegin(self):
        r"""rbegin(map_s_s self) -> std::map< std::string,std::string >::reverse_iterator"""
        return _swblmclient.map_s_s_rbegin(self)

    def rend(self):
        r"""rend(map_s_s self) -> std::map< std::string,std::string >::reverse_iterator"""
        return _swblmclient.map_s_s_rend(self)

    def clear(self):
        r"""clear(map_s_s self)"""
        return _swblmclient.map_s_s_clear(self)

    def get_allocator(self):
        r"""get_allocator(map_s_s self) -> std::map< std::string,std::string >::allocator_type"""
        return _swblmclient.map_s_s_get_allocator(self)

    def count(self, x):
        r"""
        count(map_s_s self, std::map< std::string,std::string >::key_type const & x) -> std::map< std::string,std::string >::size_type

        Parameters
        ----------
        x: str

        """
        return _swblmclient.map_s_s_count(self, x)

    def erase(self, *args):
        r"""
        erase(map_s_s self, std::map< std::string,std::string >::key_type const & x) -> std::map< std::string,std::string >::size_type

        Parameters
        ----------
        x: str

        erase(map_s_s self, std::map< std::string,std::string >::iterator position)

        Parameters
        ----------
        position: std::map< std::string,std::string >::iterator

        erase(map_s_s self, std::map< std::string,std::string >::iterator first, std::map< std::string,std::string >::iterator last)

        Parameters
        ----------
        first: std::map< std::string,std::string >::iterator
        last: std::map< std::string,std::string >::iterator

        """
        return _swblmclient.map_s_s_erase(self, *args)

    def find(self, x):
        r"""
        find(map_s_s self, std::map< std::string,std::string >::key_type const & x) -> std::map< std::string,std::string >::iterator

        Parameters
        ----------
        x: str

        """
        return _swblmclient.map_s_s_find(self, x)

    def lower_bound(self, x):
        r"""
        lower_bound(map_s_s self, std::map< std::string,std::string >::key_type const & x) -> std::map< std::string,std::string >::iterator

        Parameters
        ----------
        x: str

        """
        return _swblmclient.map_s_s_lower_bound(self, x)

    def upper_bound(self, x):
        r"""
        upper_bound(map_s_s self, std::map< std::string,std::string >::key_type const & x) -> std::map< std::string,std::string >::iterator

        Parameters
        ----------
        x: str

        """
        return _swblmclient.map_s_s_upper_bound(self, x)
    __swig_destroy__ = _swblmclient.delete_map_s_s

# Register map_s_s in _swblmclient:
_swblmclient.map_s_s_swigregister(map_s_s)

class SWBClient(object):
    r"""Proxy of C++ SWBClient class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, sHost, iPort, elog):
        r"""
        __init__(SWBClient self, std::string sHost, int iPort, SWBLog * elog) -> SWBClient

        Parameters
        ----------
        sHost: str
        iPort: int
        elog: SWBLog *

        """
        _swblmclient.SWBClient_swiginit(self, _swblmclient.new_SWBClient(sHost, iPort, elog))
    __swig_destroy__ = _swblmclient.delete_SWBClient

    def SendMessage(self, argsMap):
        r"""
        SendMessage(SWBClient self, map_s_s argsMap) -> std::string

        Parameters
        ----------
        argsMap: std::map< std::string,std::string,std::less< std::string >,std::allocator< std::pair< std::string const,std::string > > > &

        """
        return _swblmclient.SWBClient_SendMessage(self, argsMap)

    def SendClientMessage(self, argsMap, tool):
        r"""
        SendClientMessage(SWBClient self, map_s_s argsMap, std::string tool) -> std::string

        Parameters
        ----------
        argsMap: std::map< std::string,std::string,std::less< std::string >,std::allocator< std::pair< std::string const,std::string > > > &
        tool: str

        """
        return _swblmclient.SWBClient_SendClientMessage(self, argsMap, tool)

    def GetConstructedMessage(self, argsMa):
        r"""
        GetConstructedMessage(SWBClient self, map_s_s argsMa) -> std::string

        Parameters
        ----------
        argsMa: std::map< std::string,std::string,std::less< std::string >,std::allocator< std::pair< std::string const,std::string > > > &

        """
        return _swblmclient.SWBClient_GetConstructedMessage(self, argsMa)

    def GetServerResponce(self, msg):
        r"""
        GetServerResponce(SWBClient self, std::string msg) -> std::string

        Parameters
        ----------
        msg: str

        """
        return _swblmclient.SWBClient_GetServerResponce(self, msg)

    def GetCurrentHost(self):
        r"""GetCurrentHost(SWBClient self) -> std::string"""
        return _swblmclient.SWBClient_GetCurrentHost(self)

    def GetServerVersion1_0(self):
        r"""GetServerVersion1_0(SWBClient self) -> std::string"""
        return _swblmclient.SWBClient_GetServerVersion1_0(self)

    def TerminateServer1_0(self):
        r"""TerminateServer1_0(SWBClient self) -> std::string"""
        return _swblmclient.SWBClient_TerminateServer1_0(self)

    def GetNonBlockSocket(self):
        r"""GetNonBlockSocket(SWBClient self) -> SWBTcpSocket *"""
        return _swblmclient.SWBClient_GetNonBlockSocket(self)

    def IsServerAlive(self):
        r"""IsServerAlive(SWBClient self) -> bool"""
        return _swblmclient.SWBClient_IsServerAlive(self)

    def IsServerOlderThanCurrent(self):
        r"""IsServerOlderThanCurrent(SWBClient self) -> bool"""
        return _swblmclient.SWBClient_IsServerOlderThanCurrent(self)

    def Send2ServerQueue(self, msg):
        r"""
        Send2ServerQueue(SWBClient self, std::string msg)

        Parameters
        ----------
        msg: str

        """
        return _swblmclient.SWBClient_Send2ServerQueue(self, msg)

    def SendMessage2Queue(self, argsMap):
        r"""
        SendMessage2Queue(SWBClient self, map_s_s argsMap)

        Parameters
        ----------
        argsMap: std::map< std::string,std::string,std::less< std::string >,std::allocator< std::pair< std::string const,std::string > > > &

        """
        return _swblmclient.SWBClient_SendMessage2Queue(self, argsMap)

    @staticmethod
    def CompareWithCurrentVersion(arg1):
        r"""
        CompareWithCurrentVersion(std::string arg1) -> bool

        Parameters
        ----------
        arg1: str

        """
        return _swblmclient.SWBClient_CompareWithCurrentVersion(arg1)

    @staticmethod
    def IsHostAlive(shost):
        r"""
        IsHostAlive(std::string shost) -> bool

        Parameters
        ----------
        shost: str

        """
        return _swblmclient.SWBClient_IsHostAlive(shost)

    @staticmethod
    def GetDecodedMessage(message):
        r"""
        GetDecodedMessage(std::string message) -> std::string

        Parameters
        ----------
        message: str

        """
        return _swblmclient.SWBClient_GetDecodedMessage(message)

# Register SWBClient in _swblmclient:
_swblmclient.SWBClient_swigregister(SWBClient)

def SWBClient_CompareWithCurrentVersion(arg1):
    r"""
    SWBClient_CompareWithCurrentVersion(std::string arg1) -> bool

    Parameters
    ----------
    arg1: str

    """
    return _swblmclient.SWBClient_CompareWithCurrentVersion(arg1)

def SWBClient_IsHostAlive(shost):
    r"""
    SWBClient_IsHostAlive(std::string shost) -> bool

    Parameters
    ----------
    shost: str

    """
    return _swblmclient.SWBClient_IsHostAlive(shost)

def SWBClient_GetDecodedMessage(message):
    r"""
    SWBClient_GetDecodedMessage(std::string message) -> std::string

    Parameters
    ----------
    message: str

    """
    return _swblmclient.SWBClient_GetDecodedMessage(message)

class SWBConnectionManager(object):
    r"""Proxy of C++ SWBConnectionManager class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, _tool, _id):
        r"""
        __init__(SWBConnectionManager self, std::string _tool, std::string _id) -> SWBConnectionManager

        Parameters
        ----------
        _tool: str
        _id: str

        """
        if self.__class__ == SWBConnectionManager:
            _self = None
        else:
            _self = self
        _swblmclient.SWBConnectionManager_swiginit(self, _swblmclient.new_SWBConnectionManager(_self, _tool, _id))
    __swig_destroy__ = _swblmclient.delete_SWBConnectionManager

    def RequestDaemon(self, args):
        r"""
        RequestDaemon(SWBConnectionManager self, map_s_s args) -> std::string

        Parameters
        ----------
        args: strmap &

        """
        return _swblmclient.SWBConnectionManager_RequestDaemon(self, args)

    def GetMessages(self):
        r"""GetMessages(SWBConnectionManager self) -> std::vector< strmap,std::allocator< strmap > >"""
        return _swblmclient.SWBConnectionManager_GetMessages(self)

    def CreateAcceptLoop(self):
        r"""CreateAcceptLoop(SWBConnectionManager self)"""
        return _swblmclient.SWBConnectionManager_CreateAcceptLoop(self)

    def RegisterOnDaemon(self):
        r"""RegisterOnDaemon(SWBConnectionManager self)"""
        return _swblmclient.SWBConnectionManager_RegisterOnDaemon(self)

    def AddObserver(self, _obs):
        r"""
        AddObserver(SWBConnectionManager self, SWBObserver _obs)

        Parameters
        ----------
        _obs: SWBObserver &

        """
        return _swblmclient.SWBConnectionManager_AddObserver(self, _obs)

    def RemoveObserver(self, _obs):
        r"""
        RemoveObserver(SWBConnectionManager self, SWBObserver _obs)

        Parameters
        ----------
        _obs: SWBObserver &

        """
        return _swblmclient.SWBConnectionManager_RemoveObserver(self, _obs)

    def GetId(self):
        r"""GetId(SWBConnectionManager self) -> std::string"""
        return _swblmclient.SWBConnectionManager_GetId(self)

    def GetTool(self):
        r"""GetTool(SWBConnectionManager self) -> std::string"""
        return _swblmclient.SWBConnectionManager_GetTool(self)

    def IsRegistered(self):
        r"""IsRegistered(SWBConnectionManager self) -> bool"""
        return _swblmclient.SWBConnectionManager_IsRegistered(self)
    def __disown__(self):
        self.this.disown()
        _swblmclient.disown_SWBConnectionManager(self)
        return weakref.proxy(self)

# Register SWBConnectionManager in _swblmclient:
_swblmclient.SWBConnectionManager_swigregister(SWBConnectionManager)

class SWBObserver(object):
    r"""Proxy of C++ SWBObserver class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""
        __init__(SWBObserver self) -> SWBObserver

        Parameters
        ----------
        self: object

        """
        if self.__class__ == SWBObserver:
            _self = None
        else:
            _self = self
        _swblmclient.SWBObserver_swiginit(self, _swblmclient.new_SWBObserver(_self, ))
    __swig_destroy__ = _swblmclient.delete_SWBObserver

    def HandleEvents(self, args):
        r"""
        HandleEvents(SWBObserver self, std::vector< strmap,std::allocator< strmap > > const & args)

        Parameters
        ----------
        args: std::vector< strmap,std::allocator< strmap > > const &

        """
        return _swblmclient.SWBObserver_HandleEvents(self, args)
    def __disown__(self):
        self.this.disown()
        _swblmclient.disown_SWBObserver(self)
        return weakref.proxy(self)

# Register SWBObserver in _swblmclient:
_swblmclient.SWBObserver_swigregister(SWBObserver)

class SWBSupervisedMessages(object):
    r"""Proxy of C++ SWBSupervisedMessages class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""
        __init__(SWBSupervisedMessages self) -> SWBSupervisedMessages

        Parameters
        ----------
        self: object

        """
        if self.__class__ == SWBSupervisedMessages:
            _self = None
        else:
            _self = self
        _swblmclient.SWBSupervisedMessages_swiginit(self, _swblmclient.new_SWBSupervisedMessages(_self, ))
    __swig_destroy__ = _swblmclient.delete_SWBSupervisedMessages

    def Add(self, arg2):
        r"""
        Add(SWBSupervisedMessages self, SWBObserver arg2)

        Parameters
        ----------
        arg2: SWBObserver &

        """
        return _swblmclient.SWBSupervisedMessages_Add(self, arg2)

    def Remove(self, arg2):
        r"""
        Remove(SWBSupervisedMessages self, SWBObserver arg2)

        Parameters
        ----------
        arg2: SWBObserver &

        """
        return _swblmclient.SWBSupervisedMessages_Remove(self, arg2)

    def ResetMessages(self, args):
        r"""
        ResetMessages(SWBSupervisedMessages self, std::vector< strmap,std::allocator< strmap > > const & args)

        Parameters
        ----------
        args: std::vector< strmap,std::allocator< strmap > > const &

        """
        return _swblmclient.SWBSupervisedMessages_ResetMessages(self, args)

    def AppendMessages(self, args):
        r"""
        AppendMessages(SWBSupervisedMessages self, std::vector< strmap,std::allocator< strmap > > args)

        Parameters
        ----------
        args: std::vector< strmap,std::allocator< strmap > >

        """
        return _swblmclient.SWBSupervisedMessages_AppendMessages(self, args)

    def GetMessages(self):
        r"""GetMessages(SWBSupervisedMessages self) -> std::vector< strmap,std::allocator< strmap > >"""
        return _swblmclient.SWBSupervisedMessages_GetMessages(self)
    def __disown__(self):
        self.this.disown()
        _swblmclient.disown_SWBSupervisedMessages(self)
        return weakref.proxy(self)

# Register SWBSupervisedMessages in _swblmclient:
_swblmclient.SWBSupervisedMessages_swigregister(SWBSupervisedMessages)

class SWBLMClient(object):
    r"""Proxy of C++ swblmclient::SWBLMClient class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(SWBLMClient self, std::string strProjectpath, std::string strToolname="swblmclient-stub", bool bRegisterTool=False) -> SWBLMClient

        Parameters
        ----------
        strProjectpath: str
        strToolname: str
        bRegisterTool: bool

        """
        if self.__class__ == SWBLMClient:
            _self = None
        else:
            _self = self
        _swblmclient.SWBLMClient_swiginit(self, _swblmclient.new_SWBLMClient(_self, *args))
    __swig_destroy__ = _swblmclient.delete_SWBLMClient

    def GetProjectPath(self):
        r"""GetProjectPath(SWBLMClient self) -> std::string"""
        return _swblmclient.SWBLMClient_GetProjectPath(self)

    def GetToolName(self):
        r"""GetToolName(SWBLMClient self) -> std::string"""
        return _swblmclient.SWBLMClient_GetToolName(self)

    def SendMessage(self, args):
        r"""
        SendMessage(SWBLMClient self, map_s_s args) -> std::string

        Parameters
        ----------
        args: std::map< std::string,std::string,std::less< std::string >,std::allocator< std::pair< std::string const,std::string > > >

        """
        return _swblmclient.SWBLMClient_SendMessage(self, args)

    def IsRegistered(self):
        r"""IsRegistered(SWBLMClient self) -> bool"""
        return _swblmclient.SWBLMClient_IsRegistered(self)

    def AddObserver(self, observer):
        r"""
        AddObserver(SWBLMClient self, SWBObserver observer)

        Parameters
        ----------
        observer: SWBObserver &

        """
        return _swblmclient.SWBLMClient_AddObserver(self, observer)

    def RemoveObserver(self, observer):
        r"""
        RemoveObserver(SWBLMClient self, SWBObserver observer)

        Parameters
        ----------
        observer: SWBObserver &

        """
        return _swblmclient.SWBLMClient_RemoveObserver(self, observer)
    def __disown__(self):
        self.this.disown()
        _swblmclient.disown_SWBLMClient(self)
        return weakref.proxy(self)

# Register SWBLMClient in _swblmclient:
_swblmclient.SWBLMClient_swigregister(SWBLMClient)



