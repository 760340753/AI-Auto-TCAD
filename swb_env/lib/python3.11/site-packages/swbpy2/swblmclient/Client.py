# ==================================================================
# SYNOPSYS CONFIDENTIAL - This is an unpublished, proprietary work  
# of Synopsys, Inc., and is fully protected under copyright and     
# trade secret laws. You may not view, use, disclose, copy, or      
# distribute this file or any information contained herein except   
# pursuant to a valid written license from Synopsys.                
# ==================================================================

"""
.. currentmodule:: swbpy2.swblmclient.Client
"""

import os.path
import os

from swbpy2.swblmclient.swblmclient import SWBLMClient
from swbpy2.swblmclient.Observer import Observer

class Client(SWBLMClient):
    """
    Client class for communication with SWBLM transport layer.
    """
  
    def __init__(self, projectpath, toolname = 'swblmclient-py', registertool = False):
        """
        Constructor of Client object.
        
        :param str projectpath: SWB project path.
        :param str toolname: Name of the client instance.
        :param bool registertool: Register the instance to SWBLM daemon.
        :raises ValueError: If the SWB project path or the toolname are not provided.
        """
        if projectpath is None or not projectpath:
            raise ValueError('Construction failed, the project path argument is not properly filled.')
        if toolname is None or not toolname:
            raise ValueError('Construction failed, the tool name argument is not properly filled.')

        super().__init__(os.path.realpath(projectpath), toolname, registertool)
     
    def ReloadInSWB(self):
        """
        Operation to reload an SWB project within the SWB GUI (if opened eventually).
        """
        
        if "SWBLM_PER_PROJECT" in os.environ:
            # regression run: no need to update SWB GUI    
            return
        
        args = dict()
        args['COMMAND'] = 'RELOAD_PROJECT'
        args['RECIPIENTS'] = 'swb'
        args['PROJECT'] = super().GetProjectPath()
        return super().SendMessage(args)
     
    def LoadFileInSvisual(self, inputfile):
        """
        Instructs SVisual to load a given plot file or a script file.
        
        :param str inputfile: Input script file.
        :raises ValueError: The input script file is not provided.
        """
        if inputfile is None or not inputfile:
            raise ValueError('LoadFileInSvisual failed, the input file argument is not properly filled.')
        else:
            fl = os.path.split(inputfile)

        args = dict()
        args['COMMAND'] = 'DISPLAY_FILE'
        args['RECIPIENTS'] = 'svisual'
        args['PROJECT'] = super().GetProjectPath()
        args['FILES'] = fl[1]
        args['PRIORITY'] = str(1)
        args['PATH'] = fl[0]
        return super().SendMessage(args)
  
    def AbortNodes(self, nodes=[]):
        """
        Instruct gsub to abort the given set of nodes (or all).
        
        :param list nodes: Input list of nodes to abort or empty list to abort all nodes.
        """
        args = dict()
        args['PROJECT'] = super().GetProjectPath()
        args['COMMAND'] = 'ABORT_NODES'
        args['RECIPIENTS'] = 'gsub'
        if len(nodes) <= 0:
            args['NODE_LIST'] = 'all'
            args['PRIORITY'] = str(0)
        else:
            args['NODE_LIST'] = ''.join(str(node) + ' ' for node in nodes)
            args['PRIORITY'] = str(10)
        return super().SendMessage(args)
    
    def IsRegistered(self):
        """
        Check if the client has been registered against SWBLM daemon.
        
        :return: Check if the client is registered or not.
        :rtype: bool
        """
        return super().IsRegistered()
      
    def AddObserver(self, observer):
        """
        Add Observer object to receive SWBLM messages.
        
        :param `swbpy2.swblmclient.Observer.Observer` observer: Instance of observer type.
        :raises TypeError: If the input observer is not of type :class:`swbpy2.swblmclient.Observer.Observer`.
        """
        if not issubclass(type(observer), Observer):
            raise TypeError('The observer parameter should be a Observer type')
        
        super().AddObserver(observer)
  
    def RemoveObserver(self, observer):
        """
        Remove Observer object to receive SWBLM messages.
        
        :raises TypeError: If the input observer is not of type :class:`swbpy2.swblmclient.Observer.Observer`.
        """
        if not issubclass(type(observer), Observer):
            raise TypeError('The observer parameter should be a Observer type')
        
        super().RemoveObserver(observer)
     
    def SendMessage(self, args):
        """
        Send message to a recipient via SWBLM transport layer.
        
        :raises ValueError: If the list of 'RECIPIENTS' is empty.
        :raises ValueError: If the 'COMMAND' is not provided.
        
        .. Note::

           Please check with :ref:`api/swbpy2.swblmclient:Examples` for use cases.
        """
        if 'RECIPIENTS' not in args:
            raise ValueError('RECIPIENTS arguments is required')

        if 'COMMAND' not in args:
            raise ValueError('COMMAND argument is required')

        if 'PROJECT' not in args:
            args['PROJECT'] = super().GetProjectPath()
            
        return super().SendMessage(args)
    
