# ==================================================================
# SYNOPSYS CONFIDENTIAL - This is an unpublished, proprietary work  
# of Synopsys, Inc., and is fully protected under copyright and     
# trade secret laws. You may not view, use, disclose, copy, or      
# distribute this file or any information contained herein except   
# pursuant to a valid written license from Synopsys.                
# ==================================================================

"""
.. currentmodule:: swbpy2.core.exception.TreeException
"""

from abc import abstractmethod, ABC

from swbpy2.core.core import TreeException as SWBTreeException

class TreeException(ABC, Exception, SWBTreeException):
    """        
    Client class for :class:`swbpy2.core.core.SWBTreeException` entity.
    """

    def __init__(self, msg, *args):
        """
        Constructor of TreeException object.
        
        :param str msg: Exception message.
        :param dict ``*args``: Set of extra and optional parameters to build the inner Exception base object.
        """
        SWBTreeException.__init__(self, msg)
        Exception.__init__(self, super().what(), *args)
    
    @abstractmethod
    def what(self):
        """        
        Method to get TreeException message.
        
        :return: Exception message.
        :rtype: str
        """
        return super().what()
    
