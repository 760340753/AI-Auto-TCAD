# ==================================================================
# SYNOPSYS CONFIDENTIAL - This is an unpublished, proprietary work  
# of Synopsys, Inc., and is fully protected under copyright and     
# trade secret laws. You may not view, use, disclose, copy, or      
# distribute this file or any information contained herein except   
# pursuant to a valid written license from Synopsys.                
# ==================================================================

name = 'exception'

__all__ = [ ]

# native SWB exceptions
from swbpy2.core.core import TreeException as SWBTreeException;
from swbpy2.core.core import ToolDoesNotExist as SWBToolDoesNotExist; 
from swbpy2.core.core import NoToolSpecificInputFiles as SWBNoToolSpecificInputFiles;
from swbpy2.core.core import InvalidTypeConversion as SWBInvalidTypeConversion;
from swbpy2.core.core import InvalidSWBValueFormat as SWBInvalidSWBValueFormat;
from swbpy2.core.core import InvalidSWBValueTypeForValueRange as SWBInvalidSWBValueTypeForValueRange; 
from swbpy2.core.core import InvalidSWBValueForValueRange as SWBInvalidSWBValueForValueRange;
from swbpy2.core.core import InvalidSWBValueRangeType as SWBInvalidSWBValueRangeType;
from swbpy2.core.core import InvalidSWBValuesForValueRange as SWBInvalidSWBValuesForValueRange; 
from swbpy2.core.core import SplitStepValueRange as SWBSplitStepValueRange;
from swbpy2.core.core import IllegalNkeyError as SWBIllegalNkeyError;
from swbpy2.core.core import NoItemError as SWBNoItemError;
from swbpy2.core.core import NoNodeError as SWBNoNodeError;
from swbpy2.core.core import ItemExistsError as SWBItemExistsError;
from swbpy2.core.core import IllegalError as SWBIllegalError; 
from swbpy2.core.core import FileError as SWBFileError;
from swbpy2.core.core import TagError as SWBTagError;
from swbpy2.core.core import TagGroupError as SWBTagGroupError; 

__all__ += [ 'SWBTreeException', 'SWBToolDoesNotExist', 'SWBNoToolSpecificInputFiles' ]
__all__ += [ 'SWBInvalidTypeConversion', 'SWBInvalidSWBValueFormat', 'SWBInvalidSWBValueTypeForValueRange' ]
__all__ += [ 'SWBInvalidSWBValueForValueRange', 'SWBInvalidSWBValueRangeType', 'SWBInvalidSWBValuesForValueRange' ]
__all__ += [ 'SWBSplitStepValueRange', 'SWBIllegalNkeyError', 'SWBNoItemError', 'SWBNoNodeError' ]
__all__ += [ 'SWBItemExistsError', 'SWBFileError', 'SWBTagError', 'SWBTagGroupError' ]

# redefined SWB exceptions
from swbpy2.core.exception.TreeException import TreeException as TreeException

__all__ += [ 'TreeException' ]
