# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _core
else:
    import _core

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class SwigPyIterator(object):
    r"""Proxy of C++ swig::SwigPyIterator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _core.delete_SwigPyIterator

    def value(self):
        r"""value(SwigPyIterator self) -> PyObject *"""
        return _core.SwigPyIterator_value(self)

    def incr(self, n=1):
        r"""
        incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator

        Parameters
        ----------
        n: size_t

        """
        return _core.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        r"""
        decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator

        Parameters
        ----------
        n: size_t

        """
        return _core.SwigPyIterator_decr(self, n)

    def distance(self, x):
        r"""
        distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _core.SwigPyIterator_distance(self, x)

    def equal(self, x):
        r"""
        equal(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _core.SwigPyIterator_equal(self, x)

    def copy(self):
        r"""copy(SwigPyIterator self) -> SwigPyIterator"""
        return _core.SwigPyIterator_copy(self)

    def next(self):
        r"""next(SwigPyIterator self) -> PyObject *"""
        return _core.SwigPyIterator_next(self)

    def __next__(self):
        r"""__next__(SwigPyIterator self) -> PyObject *"""
        return _core.SwigPyIterator___next__(self)

    def previous(self):
        r"""previous(SwigPyIterator self) -> PyObject *"""
        return _core.SwigPyIterator_previous(self)

    def advance(self, n):
        r"""
        advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _core.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        r"""
        __eq__(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _core.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        r"""
        __ne__(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _core.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        r"""
        __iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _core.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        r"""
        __isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _core.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        r"""
        __add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _core.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        r"""
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _core.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _core:
_core.SwigPyIterator_swigregister(SwigPyIterator)

class ios_base(object):
    r"""Proxy of C++ std::ios_base class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    erase_event = _core.ios_base_erase_event
    
    imbue_event = _core.ios_base_imbue_event
    
    copyfmt_event = _core.ios_base_copyfmt_event
    

    def register_callback(self, __fn, __index):
        r"""
        register_callback(ios_base self, std::ios_base::event_callback __fn, int __index)

        Parameters
        ----------
        __fn: std::ios_base::event_callback
        __index: int

        """
        return _core.ios_base_register_callback(self, __fn, __index)

    def flags(self, *args):
        r"""
        flags(ios_base self) -> std::ios_base::fmtflags
        flags(ios_base self, std::ios_base::fmtflags __fmtfl) -> std::ios_base::fmtflags

        Parameters
        ----------
        __fmtfl: std::ios_base::fmtflags

        """
        return _core.ios_base_flags(self, *args)

    def setf(self, *args):
        r"""
        setf(ios_base self, std::ios_base::fmtflags __fmtfl) -> std::ios_base::fmtflags

        Parameters
        ----------
        __fmtfl: std::ios_base::fmtflags

        setf(ios_base self, std::ios_base::fmtflags __fmtfl, std::ios_base::fmtflags __mask) -> std::ios_base::fmtflags

        Parameters
        ----------
        __fmtfl: std::ios_base::fmtflags
        __mask: std::ios_base::fmtflags

        """
        return _core.ios_base_setf(self, *args)

    def unsetf(self, __mask):
        r"""
        unsetf(ios_base self, std::ios_base::fmtflags __mask)

        Parameters
        ----------
        __mask: std::ios_base::fmtflags

        """
        return _core.ios_base_unsetf(self, __mask)

    def precision(self, *args):
        r"""
        precision(ios_base self) -> std::streamsize
        precision(ios_base self, std::streamsize __prec) -> std::streamsize

        Parameters
        ----------
        __prec: std::streamsize

        """
        return _core.ios_base_precision(self, *args)

    def width(self, *args):
        r"""
        width(ios_base self) -> std::streamsize
        width(ios_base self, std::streamsize __wide) -> std::streamsize

        Parameters
        ----------
        __wide: std::streamsize

        """
        return _core.ios_base_width(self, *args)

    @staticmethod
    def sync_with_stdio(__sync=True):
        r"""
        sync_with_stdio(bool __sync=True) -> bool

        Parameters
        ----------
        __sync: bool

        """
        return _core.ios_base_sync_with_stdio(__sync)

    def imbue(self, __loc):
        r"""
        imbue(ios_base self, std::locale const & __loc) -> std::locale

        Parameters
        ----------
        __loc: std::locale const &

        """
        return _core.ios_base_imbue(self, __loc)

    def getloc(self):
        r"""getloc(ios_base self) -> std::locale"""
        return _core.ios_base_getloc(self)

    @staticmethod
    def xalloc():
        r"""xalloc() -> int"""
        return _core.ios_base_xalloc()

    def iword(self, __ix):
        r"""
        iword(ios_base self, int __ix) -> long &

        Parameters
        ----------
        __ix: int

        """
        return _core.ios_base_iword(self, __ix)

    def pword(self, __ix):
        r"""
        pword(ios_base self, int __ix) -> void *&

        Parameters
        ----------
        __ix: int

        """
        return _core.ios_base_pword(self, __ix)
    __swig_destroy__ = _core.delete_ios_base

# Register ios_base in _core:
_core.ios_base_swigregister(ios_base)
cvar = _core.cvar
ios_base.boolalpha = _core.cvar.ios_base_boolalpha
ios_base.dec = _core.cvar.ios_base_dec
ios_base.fixed = _core.cvar.ios_base_fixed
ios_base.hex = _core.cvar.ios_base_hex
ios_base.internal = _core.cvar.ios_base_internal
ios_base.left = _core.cvar.ios_base_left
ios_base.oct = _core.cvar.ios_base_oct
ios_base.right = _core.cvar.ios_base_right
ios_base.scientific = _core.cvar.ios_base_scientific
ios_base.showbase = _core.cvar.ios_base_showbase
ios_base.showpoint = _core.cvar.ios_base_showpoint
ios_base.showpos = _core.cvar.ios_base_showpos
ios_base.skipws = _core.cvar.ios_base_skipws
ios_base.unitbuf = _core.cvar.ios_base_unitbuf
ios_base.uppercase = _core.cvar.ios_base_uppercase
ios_base.adjustfield = _core.cvar.ios_base_adjustfield
ios_base.basefield = _core.cvar.ios_base_basefield
ios_base.floatfield = _core.cvar.ios_base_floatfield
ios_base.badbit = _core.cvar.ios_base_badbit
ios_base.eofbit = _core.cvar.ios_base_eofbit
ios_base.failbit = _core.cvar.ios_base_failbit
ios_base.goodbit = _core.cvar.ios_base_goodbit
ios_base.app = _core.cvar.ios_base_app
ios_base.ate = _core.cvar.ios_base_ate
ios_base.binary = _core.cvar.ios_base_binary
ios_base.ios_base_in = _core.cvar.ios_base_ios_base_in
ios_base.out = _core.cvar.ios_base_out
ios_base.trunc = _core.cvar.ios_base_trunc
ios_base.beg = _core.cvar.ios_base_beg
ios_base.cur = _core.cvar.ios_base_cur
ios_base.end = _core.cvar.ios_base_end

def ios_base_sync_with_stdio(__sync=True):
    r"""
    ios_base_sync_with_stdio(bool __sync=True) -> bool

    Parameters
    ----------
    __sync: bool

    """
    return _core.ios_base_sync_with_stdio(__sync)

def ios_base_xalloc():
    r"""ios_base_xalloc() -> int"""
    return _core.ios_base_xalloc()

class ios(ios_base):
    r"""Proxy of C++ std::basic_ios< char > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def rdstate(self):
        r"""rdstate(ios self) -> std::ios_base::iostate"""
        return _core.ios_rdstate(self)

    def clear(self, *args):
        r"""
        clear(ios self, std::ios_base::iostate __state=goodbit)

        Parameters
        ----------
        __state: std::ios_base::iostate

        """
        return _core.ios_clear(self, *args)

    def setstate(self, __state):
        r"""
        setstate(ios self, std::ios_base::iostate __state)

        Parameters
        ----------
        __state: std::ios_base::iostate

        """
        return _core.ios_setstate(self, __state)

    def good(self):
        r"""good(ios self) -> bool"""
        return _core.ios_good(self)

    def eof(self):
        r"""eof(ios self) -> bool"""
        return _core.ios_eof(self)

    def fail(self):
        r"""fail(ios self) -> bool"""
        return _core.ios_fail(self)

    def bad(self):
        r"""bad(ios self) -> bool"""
        return _core.ios_bad(self)

    def exceptions(self, *args):
        r"""
        exceptions(ios self) -> std::ios_base::iostate
        exceptions(ios self, std::ios_base::iostate __except)

        Parameters
        ----------
        __except: std::ios_base::iostate

        """
        return _core.ios_exceptions(self, *args)
    __swig_destroy__ = _core.delete_ios

    def tie(self, *args):
        r"""
        tie(ios self) -> ostream
        tie(ios self, ostream __tiestr) -> ostream

        Parameters
        ----------
        __tiestr: std::basic_ostream< char,std::char_traits< char > > *

        """
        return _core.ios_tie(self, *args)

    def rdbuf(self, *args):
        r"""
        rdbuf(ios self) -> std::basic_streambuf< char,std::char_traits< char > >
        rdbuf(ios self, std::basic_streambuf< char,std::char_traits< char > > * __sb) -> std::basic_streambuf< char,std::char_traits< char > > *

        Parameters
        ----------
        __sb: std::basic_streambuf< char,std::char_traits< char > > *

        """
        return _core.ios_rdbuf(self, *args)

    def copyfmt(self, __rhs):
        r"""
        copyfmt(ios self, ios __rhs) -> ios

        Parameters
        ----------
        __rhs: std::basic_ios< char > const &

        """
        return _core.ios_copyfmt(self, __rhs)

    def fill(self, *args):
        r"""
        fill(ios self) -> std::basic_ios< char >::char_type
        fill(ios self, std::basic_ios< char >::char_type __ch) -> std::basic_ios< char >::char_type

        Parameters
        ----------
        __ch: std::basic_ios< char >::char_type

        """
        return _core.ios_fill(self, *args)

    def imbue(self, __loc):
        r"""
        imbue(ios self, std::locale const & __loc) -> std::locale

        Parameters
        ----------
        __loc: std::locale const &

        """
        return _core.ios_imbue(self, __loc)

    def narrow(self, __c, __dfault):
        r"""
        narrow(ios self, std::basic_ios< char >::char_type __c, char __dfault) -> char

        Parameters
        ----------
        __c: std::basic_ios< char >::char_type
        __dfault: char

        """
        return _core.ios_narrow(self, __c, __dfault)

    def widen(self, __c):
        r"""
        widen(ios self, char __c) -> std::basic_ios< char >::char_type

        Parameters
        ----------
        __c: char

        """
        return _core.ios_widen(self, __c)

    def __init__(self, *args):
        r"""
        __init__(ios self, std::basic_streambuf< char,std::char_traits< char > > * __sb) -> ios

        Parameters
        ----------
        __sb: std::basic_streambuf< char,std::char_traits< char > > *

        __init__(ios self) -> ios

        Parameters
        ----------
        self: object

        """
        if self.__class__ == ios:
            _self = None
        else:
            _self = self
        _core.ios_swiginit(self, _core.new_ios(_self, *args))
    def __disown__(self):
        self.this.disown()
        _core.disown_ios(self)
        return weakref.proxy(self)

# Register ios in _core:
_core.ios_swigregister(ios)

class string(object):
    r"""Proxy of C++ std::basic_string< char > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def length(self):
        r"""length(string self) -> std::basic_string< char >::size_type"""
        return _core.string_length(self)

    def max_size(self):
        r"""max_size(string self) -> std::basic_string< char >::size_type"""
        return _core.string_max_size(self)

    def capacity(self):
        r"""capacity(string self) -> std::basic_string< char >::size_type"""
        return _core.string_capacity(self)

    def reserve(self, __res_arg=0):
        r"""
        reserve(string self, std::basic_string< char >::size_type __res_arg=0)

        Parameters
        ----------
        __res_arg: std::basic_string< char >::size_type

        """
        return _core.string_reserve(self, __res_arg)

    def copy(self, __s, __n, __pos=0):
        r"""
        copy(string self, char * __s, std::basic_string< char >::size_type __n, std::basic_string< char >::size_type __pos=0) -> std::basic_string< char >::size_type

        Parameters
        ----------
        __s: char *
        __n: std::basic_string< char >::size_type
        __pos: std::basic_string< char >::size_type

        """
        return _core.string_copy(self, __s, __n, __pos)

    def c_str(self):
        r"""c_str(string self) -> char const *"""
        return _core.string_c_str(self)

    def find(self, *args):
        r"""
        find(string self, char const * __s, std::basic_string< char >::size_type __pos, std::basic_string< char >::size_type __n) -> std::basic_string< char >::size_type

        Parameters
        ----------
        __s: char const *
        __pos: std::basic_string< char >::size_type
        __n: std::basic_string< char >::size_type

        find(string self, string __str, std::basic_string< char >::size_type __pos=0) -> std::basic_string< char >::size_type

        Parameters
        ----------
        __str: std::basic_string< char > const &
        __pos: std::basic_string< char >::size_type

        find(string self, char __c, std::basic_string< char >::size_type __pos=0) -> std::basic_string< char >::size_type

        Parameters
        ----------
        __c: char
        __pos: std::basic_string< char >::size_type

        """
        return _core.string_find(self, *args)

    def rfind(self, *args):
        r"""
        rfind(string self, string __str, std::basic_string< char >::size_type __pos=std::basic_string< char >::npos) -> std::basic_string< char >::size_type

        Parameters
        ----------
        __str: std::basic_string< char > const &
        __pos: std::basic_string< char >::size_type

        rfind(string self, char const * __s, std::basic_string< char >::size_type __pos, std::basic_string< char >::size_type __n) -> std::basic_string< char >::size_type

        Parameters
        ----------
        __s: char const *
        __pos: std::basic_string< char >::size_type
        __n: std::basic_string< char >::size_type

        rfind(string self, char __c, std::basic_string< char >::size_type __pos=std::basic_string< char >::npos) -> std::basic_string< char >::size_type

        Parameters
        ----------
        __c: char
        __pos: std::basic_string< char >::size_type

        """
        return _core.string_rfind(self, *args)

    def find_first_of(self, *args):
        r"""
        find_first_of(string self, string __str, std::basic_string< char >::size_type __pos=0) -> std::basic_string< char >::size_type

        Parameters
        ----------
        __str: std::basic_string< char > const &
        __pos: std::basic_string< char >::size_type

        find_first_of(string self, char const * __s, std::basic_string< char >::size_type __pos, std::basic_string< char >::size_type __n) -> std::basic_string< char >::size_type

        Parameters
        ----------
        __s: char const *
        __pos: std::basic_string< char >::size_type
        __n: std::basic_string< char >::size_type

        find_first_of(string self, char __c, std::basic_string< char >::size_type __pos=0) -> std::basic_string< char >::size_type

        Parameters
        ----------
        __c: char
        __pos: std::basic_string< char >::size_type

        """
        return _core.string_find_first_of(self, *args)

    def find_last_of(self, *args):
        r"""
        find_last_of(string self, string __str, std::basic_string< char >::size_type __pos=std::basic_string< char >::npos) -> std::basic_string< char >::size_type

        Parameters
        ----------
        __str: std::basic_string< char > const &
        __pos: std::basic_string< char >::size_type

        find_last_of(string self, char const * __s, std::basic_string< char >::size_type __pos, std::basic_string< char >::size_type __n) -> std::basic_string< char >::size_type

        Parameters
        ----------
        __s: char const *
        __pos: std::basic_string< char >::size_type
        __n: std::basic_string< char >::size_type

        find_last_of(string self, char __c, std::basic_string< char >::size_type __pos=std::basic_string< char >::npos) -> std::basic_string< char >::size_type

        Parameters
        ----------
        __c: char
        __pos: std::basic_string< char >::size_type

        """
        return _core.string_find_last_of(self, *args)

    def find_first_not_of(self, *args):
        r"""
        find_first_not_of(string self, string __str, std::basic_string< char >::size_type __pos=0) -> std::basic_string< char >::size_type

        Parameters
        ----------
        __str: std::basic_string< char > const &
        __pos: std::basic_string< char >::size_type

        find_first_not_of(string self, char const * __s, std::basic_string< char >::size_type __pos, std::basic_string< char >::size_type __n) -> std::basic_string< char >::size_type

        Parameters
        ----------
        __s: char const *
        __pos: std::basic_string< char >::size_type
        __n: std::basic_string< char >::size_type

        find_first_not_of(string self, char __c, std::basic_string< char >::size_type __pos=0) -> std::basic_string< char >::size_type

        Parameters
        ----------
        __c: char
        __pos: std::basic_string< char >::size_type

        """
        return _core.string_find_first_not_of(self, *args)

    def find_last_not_of(self, *args):
        r"""
        find_last_not_of(string self, string __str, std::basic_string< char >::size_type __pos=std::basic_string< char >::npos) -> std::basic_string< char >::size_type

        Parameters
        ----------
        __str: std::basic_string< char > const &
        __pos: std::basic_string< char >::size_type

        find_last_not_of(string self, char const * __s, std::basic_string< char >::size_type __pos, std::basic_string< char >::size_type __n) -> std::basic_string< char >::size_type

        Parameters
        ----------
        __s: char const *
        __pos: std::basic_string< char >::size_type
        __n: std::basic_string< char >::size_type

        find_last_not_of(string self, char __c, std::basic_string< char >::size_type __pos=std::basic_string< char >::npos) -> std::basic_string< char >::size_type

        Parameters
        ----------
        __c: char
        __pos: std::basic_string< char >::size_type

        """
        return _core.string_find_last_not_of(self, *args)

    def substr(self, *args):
        r"""
        substr(string self, std::basic_string< char >::size_type __pos=0, std::basic_string< char >::size_type __n=std::basic_string< char >::npos) -> string

        Parameters
        ----------
        __pos: std::basic_string< char >::size_type
        __n: std::basic_string< char >::size_type

        """
        return _core.string_substr(self, *args)

    def empty(self):
        r"""empty(string self) -> bool"""
        return _core.string_empty(self)

    def size(self):
        r"""size(string self) -> std::basic_string< char >::size_type"""
        return _core.string_size(self)

    def swap(self, v):
        r"""
        swap(string self, string v)

        Parameters
        ----------
        v: std::basic_string< char > &

        """
        return _core.string_swap(self, v)

    def begin(self):
        r"""begin(string self) -> std::basic_string< char >::iterator"""
        return _core.string_begin(self)

    def end(self):
        r"""end(string self) -> std::basic_string< char >::iterator"""
        return _core.string_end(self)

    def rbegin(self):
        r"""rbegin(string self) -> std::basic_string< char >::reverse_iterator"""
        return _core.string_rbegin(self)

    def rend(self):
        r"""rend(string self) -> std::basic_string< char >::reverse_iterator"""
        return _core.string_rend(self)

    def get_allocator(self):
        r"""get_allocator(string self) -> std::basic_string< char >::allocator_type"""
        return _core.string_get_allocator(self)

    def erase(self, *args):
        r"""
        erase(string self, std::basic_string< char >::size_type __pos=0, std::basic_string< char >::size_type __n=std::basic_string< char >::npos) -> string

        Parameters
        ----------
        __pos: std::basic_string< char >::size_type
        __n: std::basic_string< char >::size_type

        erase(string self, std::basic_string< char >::iterator pos) -> std::basic_string< char >::iterator

        Parameters
        ----------
        pos: std::basic_string< char >::iterator

        erase(string self, std::basic_string< char >::iterator first, std::basic_string< char >::iterator last) -> std::basic_string< char >::iterator

        Parameters
        ----------
        first: std::basic_string< char >::iterator
        last: std::basic_string< char >::iterator

        """
        return _core.string_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(string self, char const * __s, std::basic_string< char >::size_type __n) -> string

        Parameters
        ----------
        __s: char const *
        __n: std::basic_string< char >::size_type

        __init__(string self) -> string
        __init__(string self, string other) -> string

        Parameters
        ----------
        other: std::basic_string< char > const &

        __init__(string self, std::basic_string< char >::size_type size, std::basic_string< char >::value_type value) -> string

        Parameters
        ----------
        size: std::basic_string< char >::size_type
        value: std::basic_string< char >::value_type

        """
        _core.string_swiginit(self, _core.new_string(*args))

    def assign(self, *args):
        r"""
        assign(string self, string __str) -> string

        Parameters
        ----------
        __str: std::basic_string< char > const &

        assign(string self, string __str, std::basic_string< char >::size_type __pos, std::basic_string< char >::size_type __n) -> string

        Parameters
        ----------
        __str: std::basic_string< char > const &
        __pos: std::basic_string< char >::size_type
        __n: std::basic_string< char >::size_type

        assign(string self, char const * __s, std::basic_string< char >::size_type __n) -> string

        Parameters
        ----------
        __s: char const *
        __n: std::basic_string< char >::size_type

        assign(string self, std::basic_string< char >::size_type n, std::basic_string< char >::value_type x)

        Parameters
        ----------
        n: std::basic_string< char >::size_type
        x: std::basic_string< char >::value_type

        """
        return _core.string_assign(self, *args)

    def resize(self, *args):
        r"""
        resize(string self, std::basic_string< char >::size_type new_size)

        Parameters
        ----------
        new_size: std::basic_string< char >::size_type

        resize(string self, std::basic_string< char >::size_type new_size, std::basic_string< char >::value_type x)

        Parameters
        ----------
        new_size: std::basic_string< char >::size_type
        x: std::basic_string< char >::value_type

        """
        return _core.string_resize(self, *args)

    def iterator(self):
        r"""iterator(string self) -> SwigPyIterator"""
        return _core.string_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(string self) -> bool"""
        return _core.string___nonzero__(self)

    def __bool__(self):
        r"""__bool__(string self) -> bool"""
        return _core.string___bool__(self)

    def __len__(self):
        r"""__len__(string self) -> std::basic_string< char >::size_type"""
        return _core.string___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(string self, std::basic_string< char >::difference_type i, std::basic_string< char >::difference_type j) -> string

        Parameters
        ----------
        i: std::basic_string< char >::difference_type
        j: std::basic_string< char >::difference_type

        """
        return _core.string___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(string self, std::basic_string< char >::difference_type i, std::basic_string< char >::difference_type j)

        Parameters
        ----------
        i: std::basic_string< char >::difference_type
        j: std::basic_string< char >::difference_type

        __setslice__(string self, std::basic_string< char >::difference_type i, std::basic_string< char >::difference_type j, string v)

        Parameters
        ----------
        i: std::basic_string< char >::difference_type
        j: std::basic_string< char >::difference_type
        v: std::basic_string< char,std::char_traits< char >,std::allocator< char > > const &

        """
        return _core.string___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(string self, std::basic_string< char >::difference_type i, std::basic_string< char >::difference_type j)

        Parameters
        ----------
        i: std::basic_string< char >::difference_type
        j: std::basic_string< char >::difference_type

        """
        return _core.string___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(string self, std::basic_string< char >::difference_type i)

        Parameters
        ----------
        i: std::basic_string< char >::difference_type

        __delitem__(string self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _core.string___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(string self, PySliceObject * slice) -> string

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(string self, std::basic_string< char >::difference_type i) -> std::basic_string< char >::value_type

        Parameters
        ----------
        i: std::basic_string< char >::difference_type

        """
        return _core.string___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(string self, PySliceObject * slice, string v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::basic_string< char,std::char_traits< char >,std::allocator< char > > const &

        __setitem__(string self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(string self, std::basic_string< char >::difference_type i, std::basic_string< char >::value_type x)

        Parameters
        ----------
        i: std::basic_string< char >::difference_type
        x: std::basic_string< char >::value_type

        """
        return _core.string___setitem__(self, *args)

    def insert(self, *args):
        r"""
        insert(string self, std::basic_string< char >::size_type __pos1, string __str) -> string

        Parameters
        ----------
        __pos1: std::basic_string< char >::size_type
        __str: std::basic_string< char > const &

        insert(string self, std::basic_string< char >::size_type __pos1, string __str, std::basic_string< char >::size_type __pos2, std::basic_string< char >::size_type __n) -> string

        Parameters
        ----------
        __pos1: std::basic_string< char >::size_type
        __str: std::basic_string< char > const &
        __pos2: std::basic_string< char >::size_type
        __n: std::basic_string< char >::size_type

        insert(string self, std::basic_string< char >::size_type __pos, char const * __s, std::basic_string< char >::size_type __n) -> string

        Parameters
        ----------
        __pos: std::basic_string< char >::size_type
        __s: char const *
        __n: std::basic_string< char >::size_type

        insert(string self, std::basic_string< char >::size_type __pos, std::basic_string< char >::size_type __n, char __c) -> string

        Parameters
        ----------
        __pos: std::basic_string< char >::size_type
        __n: std::basic_string< char >::size_type
        __c: char

        insert(string self, std::basic_string< char >::iterator pos, std::basic_string< char >::value_type x) -> std::basic_string< char >::iterator

        Parameters
        ----------
        pos: std::basic_string< char >::iterator
        x: std::basic_string< char >::value_type

        insert(string self, std::basic_string< char >::iterator pos, std::basic_string< char >::size_type n, std::basic_string< char >::value_type x)

        Parameters
        ----------
        pos: std::basic_string< char >::iterator
        n: std::basic_string< char >::size_type
        x: std::basic_string< char >::value_type

        insert(string self, std::basic_string< char >::iterator __p, std::basic_string< char >::size_type __n, char __c)

        Parameters
        ----------
        __p: std::basic_string< char >::iterator
        __n: std::basic_string< char >::size_type
        __c: char

        """
        return _core.string_insert(self, *args)

    def replace(self, *args):
        r"""
        replace(string self, std::basic_string< char >::size_type __pos, std::basic_string< char >::size_type __n, string __str) -> string

        Parameters
        ----------
        __pos: std::basic_string< char >::size_type
        __n: std::basic_string< char >::size_type
        __str: std::basic_string< char > const &

        replace(string self, std::basic_string< char >::size_type __pos1, std::basic_string< char >::size_type __n1, string __str, std::basic_string< char >::size_type __pos2, std::basic_string< char >::size_type __n2) -> string

        Parameters
        ----------
        __pos1: std::basic_string< char >::size_type
        __n1: std::basic_string< char >::size_type
        __str: std::basic_string< char > const &
        __pos2: std::basic_string< char >::size_type
        __n2: std::basic_string< char >::size_type

        replace(string self, std::basic_string< char >::size_type __pos, std::basic_string< char >::size_type __n1, char const * __s, std::basic_string< char >::size_type __n2) -> string

        Parameters
        ----------
        __pos: std::basic_string< char >::size_type
        __n1: std::basic_string< char >::size_type
        __s: char const *
        __n2: std::basic_string< char >::size_type

        replace(string self, std::basic_string< char >::size_type __pos, std::basic_string< char >::size_type __n1, std::basic_string< char >::size_type __n2, char __c) -> string

        Parameters
        ----------
        __pos: std::basic_string< char >::size_type
        __n1: std::basic_string< char >::size_type
        __n2: std::basic_string< char >::size_type
        __c: char

        replace(string self, std::basic_string< char >::iterator __i1, std::basic_string< char >::iterator __i2, string __str) -> string

        Parameters
        ----------
        __i1: std::basic_string< char >::iterator
        __i2: std::basic_string< char >::iterator
        __str: std::basic_string< char > const &

        replace(string self, std::basic_string< char >::iterator __i1, std::basic_string< char >::iterator __i2, char const * __s, std::basic_string< char >::size_type __n) -> string

        Parameters
        ----------
        __i1: std::basic_string< char >::iterator
        __i2: std::basic_string< char >::iterator
        __s: char const *
        __n: std::basic_string< char >::size_type

        replace(string self, std::basic_string< char >::iterator __i1, std::basic_string< char >::iterator __i2, std::basic_string< char >::size_type __n, char __c) -> string

        Parameters
        ----------
        __i1: std::basic_string< char >::iterator
        __i2: std::basic_string< char >::iterator
        __n: std::basic_string< char >::size_type
        __c: char

        replace(string self, std::basic_string< char >::iterator __i1, std::basic_string< char >::iterator __i2, char const * __k1, char const * __k2) -> string

        Parameters
        ----------
        __i1: std::basic_string< char >::iterator
        __i2: std::basic_string< char >::iterator
        __k1: char const *
        __k2: char const *

        replace(string self, std::basic_string< char >::iterator __i1, std::basic_string< char >::iterator __i2, std::basic_string< char >::const_iterator __k1, std::basic_string< char >::const_iterator __k2) -> string

        Parameters
        ----------
        __i1: std::basic_string< char >::iterator
        __i2: std::basic_string< char >::iterator
        __k1: std::basic_string< char >::const_iterator
        __k2: std::basic_string< char >::const_iterator

        """
        return _core.string_replace(self, *args)

    def __iadd__(self, v):
        r"""
        __iadd__(string self, string v) -> string

        Parameters
        ----------
        v: std::basic_string< char > const &

        """
        return _core.string___iadd__(self, v)

    def __add__(self, v):
        r"""
        __add__(string self, string v) -> string

        Parameters
        ----------
        v: std::basic_string< char > const &

        """
        return _core.string___add__(self, v)

    def __radd__(self, v):
        r"""
        __radd__(string self, string v) -> string

        Parameters
        ----------
        v: std::basic_string< char > const &

        """
        return _core.string___radd__(self, v)

    def __str__(self):
        r"""__str__(string self) -> string"""
        return _core.string___str__(self)

    def __rlshift__(self, out):
        r"""
        __rlshift__(string self, ostream out) -> ostream

        Parameters
        ----------
        out: std::basic_ostream< char,std::char_traits< char > > &

        """
        return _core.string___rlshift__(self, out)

    def __eq__(self, v):
        r"""
        __eq__(string self, string v) -> bool

        Parameters
        ----------
        v: std::basic_string< char > const &

        """
        return _core.string___eq__(self, v)

    def __ne__(self, v):
        r"""
        __ne__(string self, string v) -> bool

        Parameters
        ----------
        v: std::basic_string< char > const &

        """
        return _core.string___ne__(self, v)

    def __gt__(self, v):
        r"""
        __gt__(string self, string v) -> bool

        Parameters
        ----------
        v: std::basic_string< char > const &

        """
        return _core.string___gt__(self, v)

    def __lt__(self, v):
        r"""
        __lt__(string self, string v) -> bool

        Parameters
        ----------
        v: std::basic_string< char > const &

        """
        return _core.string___lt__(self, v)

    def __ge__(self, v):
        r"""
        __ge__(string self, string v) -> bool

        Parameters
        ----------
        v: std::basic_string< char > const &

        """
        return _core.string___ge__(self, v)

    def __le__(self, v):
        r"""
        __le__(string self, string v) -> bool

        Parameters
        ----------
        v: std::basic_string< char > const &

        """
        return _core.string___le__(self, v)
    __swig_destroy__ = _core.delete_string

# Register string in _core:
_core.string_swigregister(string)
string.npos = _core.cvar.string_npos

class ostream(ios):
    r"""Proxy of C++ std::basic_ostream< char > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, __sb):
        r"""
        __init__(ostream self, std::basic_streambuf< char,std::char_traits< char > > * __sb) -> ostream

        Parameters
        ----------
        __sb: std::basic_streambuf< char,std::char_traits< char > > *

        """
        if self.__class__ == ostream:
            _self = None
        else:
            _self = self
        _core.ostream_swiginit(self, _core.new_ostream(_self, __sb))
    __swig_destroy__ = _core.delete_ostream

    def __lshift__(self, *args):
        r"""
        __lshift__(ostream self, std::basic_ostream< char,std::char_traits< char > > &(*)(std::basic_ostream< char,std::char_traits< char > > &) __pf) -> ostream

        Parameters
        ----------
        __pf: std::basic_ostream< char,std::char_traits< char > > &(*)(std::basic_ostream< char,std::char_traits< char > > &)

        __lshift__(ostream self, std::basic_ios< char,std::char_traits< char > > &(*)(std::basic_ios< char,std::char_traits< char > > &) __pf) -> ostream

        Parameters
        ----------
        __pf: std::basic_ios< char,std::char_traits< char > > &(*)(std::basic_ios< char,std::char_traits< char > > &)

        __lshift__(ostream self, std::ios_base &(*)(std::ios_base &) __pf) -> ostream

        Parameters
        ----------
        __pf: std::ios_base &(*)(std::ios_base &)

        __lshift__(ostream self, long __n) -> ostream

        Parameters
        ----------
        __n: long

        __lshift__(ostream self, unsigned long __n) -> ostream

        Parameters
        ----------
        __n: unsigned long

        __lshift__(ostream self, bool __n) -> ostream

        Parameters
        ----------
        __n: bool

        __lshift__(ostream self, short __n) -> ostream

        Parameters
        ----------
        __n: short

        __lshift__(ostream self, unsigned short __n) -> ostream

        Parameters
        ----------
        __n: unsigned short

        __lshift__(ostream self, int __n) -> ostream

        Parameters
        ----------
        __n: int

        __lshift__(ostream self, unsigned int __n) -> ostream

        Parameters
        ----------
        __n: unsigned int

        __lshift__(ostream self, long long __n) -> ostream

        Parameters
        ----------
        __n: long long

        __lshift__(ostream self, unsigned long long __n) -> ostream

        Parameters
        ----------
        __n: unsigned long long

        __lshift__(ostream self, double __f) -> ostream

        Parameters
        ----------
        __f: double

        __lshift__(ostream self, float __f) -> ostream

        Parameters
        ----------
        __f: float

        __lshift__(ostream self, long double __f) -> ostream

        Parameters
        ----------
        __f: long double

        __lshift__(ostream self, void const * __p) -> ostream

        Parameters
        ----------
        __p: void const *

        __lshift__(ostream self, std::basic_streambuf< char,std::char_traits< char > > * __sb) -> ostream

        Parameters
        ----------
        __sb: std::basic_streambuf< char,std::char_traits< char > > *

        __lshift__(ostream self, string s) -> ostream

        Parameters
        ----------
        s: std::basic_string< char,std::char_traits< char >,std::allocator< char > > const &

        """
        return _core.ostream___lshift__(self, *args)

    def put(self, __c):
        r"""
        put(ostream self, std::basic_ostream< char >::char_type __c) -> ostream

        Parameters
        ----------
        __c: std::basic_ostream< char >::char_type

        """
        return _core.ostream_put(self, __c)

    def write(self, __s, __n):
        r"""
        write(ostream self, std::basic_ostream< char >::char_type const * __s, std::streamsize __n) -> ostream

        Parameters
        ----------
        __s: std::basic_ostream< char >::char_type const *
        __n: std::streamsize

        """
        return _core.ostream_write(self, __s, __n)

    def flush(self):
        r"""flush(ostream self) -> ostream"""
        return _core.ostream_flush(self)

    def tellp(self):
        r"""tellp(ostream self) -> std::basic_ostream< char >::pos_type"""
        return _core.ostream_tellp(self)

    def seekp(self, *args):
        r"""
        seekp(ostream self, std::basic_ostream< char >::pos_type arg2) -> ostream

        Parameters
        ----------
        arg2: std::basic_ostream< char >::pos_type

        seekp(ostream self, std::basic_ostream< char >::off_type arg2, std::ios_base::seekdir arg3) -> ostream

        Parameters
        ----------
        arg2: std::basic_ostream< char >::off_type
        arg3: std::ios_base::seekdir

        """
        return _core.ostream_seekp(self, *args)
    def __disown__(self):
        self.this.disown()
        _core.disown_ostream(self)
        return weakref.proxy(self)

# Register ostream in _core:
_core.ostream_swigregister(ostream)
cin = cvar.cin
cout = cvar.cout
cerr = cvar.cerr
clog = cvar.clog

class istream(ios):
    r"""Proxy of C++ std::basic_istream< char > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, __sb):
        r"""
        __init__(istream self, std::basic_streambuf< char,std::char_traits< char > > * __sb) -> istream

        Parameters
        ----------
        __sb: std::basic_streambuf< char,std::char_traits< char > > *

        """
        if self.__class__ == istream:
            _self = None
        else:
            _self = self
        _core.istream_swiginit(self, _core.new_istream(_self, __sb))
    __swig_destroy__ = _core.delete_istream

    def __rshift__(self, *args):
        r"""
        __rshift__(istream self, std::basic_istream< char,std::char_traits< char > > &(*)(std::basic_istream< char,std::char_traits< char > > &) __pf) -> istream

        Parameters
        ----------
        __pf: std::basic_istream< char,std::char_traits< char > > &(*)(std::basic_istream< char,std::char_traits< char > > &)

        __rshift__(istream self, std::basic_ios< char,std::char_traits< char > > &(*)(std::basic_ios< char,std::char_traits< char > > &) __pf) -> istream

        Parameters
        ----------
        __pf: std::basic_ios< char,std::char_traits< char > > &(*)(std::basic_ios< char,std::char_traits< char > > &)

        __rshift__(istream self, std::ios_base &(*)(std::ios_base &) __pf) -> istream

        Parameters
        ----------
        __pf: std::ios_base &(*)(std::ios_base &)

        __rshift__(istream self, bool & __n) -> istream

        Parameters
        ----------
        __n: bool &

        __rshift__(istream self, short & __n) -> istream

        Parameters
        ----------
        __n: short &

        __rshift__(istream self, unsigned short & __n) -> istream

        Parameters
        ----------
        __n: unsigned short &

        __rshift__(istream self, int & __n) -> istream

        Parameters
        ----------
        __n: int &

        __rshift__(istream self, unsigned int & __n) -> istream

        Parameters
        ----------
        __n: unsigned int &

        __rshift__(istream self, long & __n) -> istream

        Parameters
        ----------
        __n: long &

        __rshift__(istream self, unsigned long & __n) -> istream

        Parameters
        ----------
        __n: unsigned long &

        __rshift__(istream self, long long & __n) -> istream

        Parameters
        ----------
        __n: long long &

        __rshift__(istream self, unsigned long long & __n) -> istream

        Parameters
        ----------
        __n: unsigned long long &

        __rshift__(istream self, float & __f) -> istream

        Parameters
        ----------
        __f: float &

        __rshift__(istream self, double & __f) -> istream

        Parameters
        ----------
        __f: double &

        __rshift__(istream self, long double & __f) -> istream

        Parameters
        ----------
        __f: long double &

        __rshift__(istream self, void *& __p) -> istream

        Parameters
        ----------
        __p: void *&

        __rshift__(istream self, std::basic_streambuf< char,std::char_traits< char > > * __sb) -> istream

        Parameters
        ----------
        __sb: std::basic_streambuf< char,std::char_traits< char > > *

        """
        return _core.istream___rshift__(self, *args)

    def gcount(self):
        r"""gcount(istream self) -> std::streamsize"""
        return _core.istream_gcount(self)

    def get(self, *args):
        r"""
        get(istream self) -> std::basic_istream< char >::int_type
        get(istream self, std::basic_istream< char >::char_type & __c) -> istream

        Parameters
        ----------
        __c: std::basic_istream< char >::char_type &

        get(istream self, std::basic_istream< char >::char_type * __s, std::streamsize __n, std::basic_istream< char >::char_type __delim) -> istream

        Parameters
        ----------
        __s: std::basic_istream< char >::char_type *
        __n: std::streamsize
        __delim: std::basic_istream< char >::char_type

        get(istream self, std::basic_istream< char >::char_type * __s, std::streamsize __n) -> istream

        Parameters
        ----------
        __s: std::basic_istream< char >::char_type *
        __n: std::streamsize

        get(istream self, std::basic_streambuf< char,std::char_traits< char > > & __sb, std::basic_istream< char >::char_type __delim) -> istream

        Parameters
        ----------
        __sb: std::basic_streambuf< char,std::char_traits< char > > &
        __delim: std::basic_istream< char >::char_type

        get(istream self, std::basic_streambuf< char,std::char_traits< char > > & __sb) -> istream

        Parameters
        ----------
        __sb: std::basic_streambuf< char,std::char_traits< char > > &

        """
        return _core.istream_get(self, *args)

    def getline(self, *args):
        r"""
        getline(istream self, std::basic_istream< char >::char_type * __s, std::streamsize __n, std::basic_istream< char >::char_type __delim) -> istream

        Parameters
        ----------
        __s: std::basic_istream< char >::char_type *
        __n: std::streamsize
        __delim: std::basic_istream< char >::char_type

        getline(istream self, std::basic_istream< char >::char_type * __s, std::streamsize __n) -> istream

        Parameters
        ----------
        __s: std::basic_istream< char >::char_type *
        __n: std::streamsize

        """
        return _core.istream_getline(self, *args)

    def ignore(self, *args):
        r"""
        ignore(istream self, std::streamsize __n=1, std::basic_istream< char >::int_type __delim=std::char_traits< char >::eof()) -> istream

        Parameters
        ----------
        __n: std::streamsize
        __delim: std::basic_istream< char >::int_type

        """
        return _core.istream_ignore(self, *args)

    def peek(self):
        r"""peek(istream self) -> std::basic_istream< char >::int_type"""
        return _core.istream_peek(self)

    def read(self, __s, __n):
        r"""
        read(istream self, std::basic_istream< char >::char_type * __s, std::streamsize __n) -> istream

        Parameters
        ----------
        __s: std::basic_istream< char >::char_type *
        __n: std::streamsize

        """
        return _core.istream_read(self, __s, __n)

    def readsome(self, __s, __n):
        r"""
        readsome(istream self, std::basic_istream< char >::char_type * __s, std::streamsize __n) -> std::streamsize

        Parameters
        ----------
        __s: std::basic_istream< char >::char_type *
        __n: std::streamsize

        """
        return _core.istream_readsome(self, __s, __n)

    def putback(self, __c):
        r"""
        putback(istream self, std::basic_istream< char >::char_type __c) -> istream

        Parameters
        ----------
        __c: std::basic_istream< char >::char_type

        """
        return _core.istream_putback(self, __c)

    def unget(self):
        r"""unget(istream self) -> istream"""
        return _core.istream_unget(self)

    def sync(self):
        r"""sync(istream self) -> int"""
        return _core.istream_sync(self)

    def tellg(self):
        r"""tellg(istream self) -> std::basic_istream< char >::pos_type"""
        return _core.istream_tellg(self)

    def seekg(self, *args):
        r"""
        seekg(istream self, std::basic_istream< char >::pos_type arg2) -> istream

        Parameters
        ----------
        arg2: std::basic_istream< char >::pos_type

        seekg(istream self, std::basic_istream< char >::off_type arg2, std::ios_base::seekdir arg3) -> istream

        Parameters
        ----------
        arg2: std::basic_istream< char >::off_type
        arg3: std::ios_base::seekdir

        """
        return _core.istream_seekg(self, *args)
    def __disown__(self):
        self.this.disown()
        _core.disown_istream(self)
        return weakref.proxy(self)

# Register istream in _core:
_core.istream_swigregister(istream)

class iostream(istream, ostream):
    r"""Proxy of C++ std::basic_iostream< char > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, __sb):
        r"""
        __init__(iostream self, std::basic_streambuf< char,std::char_traits< char > > * __sb) -> iostream

        Parameters
        ----------
        __sb: std::basic_streambuf< char,std::char_traits< char > > *

        """
        if self.__class__ == iostream:
            _self = None
        else:
            _self = self
        _core.iostream_swiginit(self, _core.new_iostream(_self, __sb))
    __swig_destroy__ = _core.delete_iostream
    def __disown__(self):
        self.this.disown()
        _core.disown_iostream(self)
        return weakref.proxy(self)

# Register iostream in _core:
_core.iostream_swigregister(iostream)

endl_cb_ptr = _core.endl_cb_ptr

endl = _core.endl
ends_cb_ptr = _core.ends_cb_ptr

ends = _core.ends
flush_cb_ptr = _core.flush_cb_ptr

flush = _core.flush
SHARED_PTR_DISOWN = _core.SHARED_PTR_DISOWN

NODE_TYPE_ACTIVE = _core.NODE_TYPE_ACTIVE

NODE_TYPE_PRUNED = _core.NODE_TYPE_PRUNED

STATE_NULL_NODE = _core.STATE_NULL_NODE

STATE_PRUNED_NODE = _core.STATE_PRUNED_NODE

STATE_RUNNING = _core.STATE_RUNNING

STATE_HIDDEN = _core.STATE_HIDDEN

STATE_NORMAL = _core.STATE_NORMAL

STATE_READY = _core.STATE_READY

STATE_FAILED = _core.STATE_FAILED

STATE_TERMINATED = _core.STATE_TERMINATED

STATE_DONE = _core.STATE_DONE

STATE_ABORTED = _core.STATE_ABORTED

STATE_FUBAR = _core.STATE_FUBAR

STATE_VIRTUAL = _core.STATE_VIRTUAL

STATE_QUEUED = _core.STATE_QUEUED

STATE_PENDING = _core.STATE_PENDING

STATE_LOCKED = _core.STATE_LOCKED

STATE_UNKNOWN = _core.STATE_UNKNOWN

STATE_NONE = _core.STATE_NONE

StepOutputType_UNKNOWN = _core.StepOutputType_UNKNOWN

StepOutputType_VIRTUAL_STEP = _core.StepOutputType_VIRTUAL_STEP

StepOutputType_OUTPUT_STEP = _core.StepOutputType_OUTPUT_STEP

StepType_INVALID_STEP = _core.StepType_INVALID_STEP

StepType_TOOL_STEP = _core.StepType_TOOL_STEP

StepType_SPLIT_STEP = _core.StepType_SPLIT_STEP

VarType_ANY = _core.VarType_ANY

VarType_EXTRACTED = _core.VarType_EXTRACTED

VarType_SET = _core.VarType_SET

VarType_DEFINED = _core.VarType_DEFINED

VarType_NOT_SET = _core.VarType_NOT_SET

VarType_NOT_EXTRACTED = _core.VarType_NOT_EXTRACTED

ListType_GENERAL = _core.ListType_GENERAL

ListType_NOT_GENERAL = _core.ListType_NOT_GENERAL

FormatType_DEFAULT = _core.FormatType_DEFAULT

FormatType_ENGINEERING = _core.FormatType_ENGINEERING

FormatType_SCIENTIFIC = _core.FormatType_SCIENTIFIC

FormatType_INTEGER = _core.FormatType_INTEGER

RangeType_LEFTOPENED = _core.RangeType_LEFTOPENED

RangeType_RIGHTOPENED = _core.RangeType_RIGHTOPENED

RangeType_STANDARD = _core.RangeType_STANDARD

SortType_ASCENDING = _core.SortType_ASCENDING

SortType_DESCENDING = _core.SortType_DESCENDING

class FormulaParamToken(object):
    r"""Proxy of C++ FormulaParamToken class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    start = property(_core.FormulaParamToken_start_get, _core.FormulaParamToken_start_set, doc=r"""start : int""")
    end = property(_core.FormulaParamToken_end_get, _core.FormulaParamToken_end_set, doc=r"""end : int""")

    def __init__(self):
        r"""__init__(FormulaParamToken self) -> FormulaParamToken"""
        _core.FormulaParamToken_swiginit(self, _core.new_FormulaParamToken())
    __swig_destroy__ = _core.delete_FormulaParamToken

# Register FormulaParamToken in _core:
_core.FormulaParamToken_swigregister(FormulaParamToken)

SWBOrganizationType_UNDEFINED = _core.SWBOrganizationType_UNDEFINED

SWBOrganizationType_TRADITIONAL = _core.SWBOrganizationType_TRADITIONAL

SWBOrganizationType_HIERARCHICAL = _core.SWBOrganizationType_HIERARCHICAL

SWBClientType_UNDEFINED = _core.SWBClientType_UNDEFINED

SWBClientType_GUI = _core.SWBClientType_GUI

SWBClientType_BATCH = _core.SWBClientType_BATCH

SWBClientType_API = _core.SWBClientType_API

SWBAPI_UNDEFINED = _core.SWBAPI_UNDEFINED

SWBAPI_API_0 = _core.SWBAPI_API_0

SWBAPI_API_1 = _core.SWBAPI_API_1

SWBAPI_API_2 = _core.SWBAPI_API_2

SWBTagAction_UNDEFINED = _core.SWBTagAction_UNDEFINED

SWBTagAction_SET_TAG = _core.SWBTagAction_SET_TAG

SWBTagAction_GET_TAG = _core.SWBTagAction_GET_TAG

SWBTagAction_DELETE_TAG = _core.SWBTagAction_DELETE_TAG

SWBTagAction_GET_NEXTKEY = _core.SWBTagAction_GET_NEXTKEY

SWBTagAction_PRINT_TAG = _core.SWBTagAction_PRINT_TAG

class TreeException(object):
    r"""Proxy of C++ SIMULATION_TREE_ERROR::TreeException class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TreeException self, string msg="Tree Exception") -> TreeException

        Parameters
        ----------
        msg: str

        """
        if self.__class__ == TreeException:
            _self = None
        else:
            _self = self
        _core.TreeException_swiginit(self, _core.new_TreeException(_self, *args))
    __swig_destroy__ = _core.delete_TreeException

    def what(self):
        r"""what(TreeException self) -> char const *"""
        return _core.TreeException_what(self)

    def GetMessage(self):
        r"""GetMessage(TreeException self) -> string"""
        return _core.TreeException_GetMessage(self)
    def __disown__(self):
        self.this.disown()
        _core.disown_TreeException(self)
        return weakref.proxy(self)

# Register TreeException in _core:
_core.TreeException_swigregister(TreeException)
TAGGROUP_NAME_SEPARATOR = cvar.TAGGROUP_NAME_SEPARATOR

class ToolDoesNotExist(TreeException):
    r"""Proxy of C++ SIMULATION_TREE_ERROR::ToolDoesNotExist class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, t):
        r"""
        __init__(ToolDoesNotExist self, string t) -> ToolDoesNotExist

        Parameters
        ----------
        t: str

        """
        if self.__class__ == ToolDoesNotExist:
            _self = None
        else:
            _self = self
        _core.ToolDoesNotExist_swiginit(self, _core.new_ToolDoesNotExist(_self, t))

    def what(self):
        r"""what(ToolDoesNotExist self) -> char const *"""
        return _core.ToolDoesNotExist_what(self)
    __swig_destroy__ = _core.delete_ToolDoesNotExist
    def __disown__(self):
        self.this.disown()
        _core.disown_ToolDoesNotExist(self)
        return weakref.proxy(self)

# Register ToolDoesNotExist in _core:
_core.ToolDoesNotExist_swigregister(ToolDoesNotExist)

class NoToolSpecificInputFiles(TreeException):
    r"""Proxy of C++ SIMULATION_TREE_ERROR::NoToolSpecificInputFiles class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, t):
        r"""
        __init__(NoToolSpecificInputFiles self, string t) -> NoToolSpecificInputFiles

        Parameters
        ----------
        t: str

        """
        if self.__class__ == NoToolSpecificInputFiles:
            _self = None
        else:
            _self = self
        _core.NoToolSpecificInputFiles_swiginit(self, _core.new_NoToolSpecificInputFiles(_self, t))

    def what(self):
        r"""what(NoToolSpecificInputFiles self) -> char const *"""
        return _core.NoToolSpecificInputFiles_what(self)
    __swig_destroy__ = _core.delete_NoToolSpecificInputFiles
    def __disown__(self):
        self.this.disown()
        _core.disown_NoToolSpecificInputFiles(self)
        return weakref.proxy(self)

# Register NoToolSpecificInputFiles in _core:
_core.NoToolSpecificInputFiles_swigregister(NoToolSpecificInputFiles)

class InvalidTypeConversion(TreeException):
    r"""Proxy of C++ SIMULATION_TREE_ERROR::InvalidTypeConversion class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(InvalidTypeConversion self, string FromType, string ToType, string message="") -> InvalidTypeConversion

        Parameters
        ----------
        FromType: str
        ToType: str
        message: str

        """
        if self.__class__ == InvalidTypeConversion:
            _self = None
        else:
            _self = self
        _core.InvalidTypeConversion_swiginit(self, _core.new_InvalidTypeConversion(_self, *args))

    def what(self):
        r"""what(InvalidTypeConversion self) -> char const *"""
        return _core.InvalidTypeConversion_what(self)
    __swig_destroy__ = _core.delete_InvalidTypeConversion
    def __disown__(self):
        self.this.disown()
        _core.disown_InvalidTypeConversion(self)
        return weakref.proxy(self)

# Register InvalidTypeConversion in _core:
_core.InvalidTypeConversion_swigregister(InvalidTypeConversion)

class InvalidSWBValueFormat(TreeException):
    r"""Proxy of C++ SIMULATION_TREE_ERROR::InvalidSWBValueFormat class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(InvalidSWBValueFormat self, string fmt, string msg="") -> InvalidSWBValueFormat

        Parameters
        ----------
        fmt: str
        msg: str

        """
        if self.__class__ == InvalidSWBValueFormat:
            _self = None
        else:
            _self = self
        _core.InvalidSWBValueFormat_swiginit(self, _core.new_InvalidSWBValueFormat(_self, *args))

    def what(self):
        r"""what(InvalidSWBValueFormat self) -> char const *"""
        return _core.InvalidSWBValueFormat_what(self)
    __swig_destroy__ = _core.delete_InvalidSWBValueFormat
    def __disown__(self):
        self.this.disown()
        _core.disown_InvalidSWBValueFormat(self)
        return weakref.proxy(self)

# Register InvalidSWBValueFormat in _core:
_core.InvalidSWBValueFormat_swigregister(InvalidSWBValueFormat)

class InvalidSWBValueTypeForValueRange(TreeException):
    r"""Proxy of C++ SIMULATION_TREE_ERROR::InvalidSWBValueTypeForValueRange class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, msg):
        r"""
        __init__(InvalidSWBValueTypeForValueRange self, string msg) -> InvalidSWBValueTypeForValueRange

        Parameters
        ----------
        msg: str

        """
        if self.__class__ == InvalidSWBValueTypeForValueRange:
            _self = None
        else:
            _self = self
        _core.InvalidSWBValueTypeForValueRange_swiginit(self, _core.new_InvalidSWBValueTypeForValueRange(_self, msg))

    def what(self):
        r"""what(InvalidSWBValueTypeForValueRange self) -> char const *"""
        return _core.InvalidSWBValueTypeForValueRange_what(self)
    __swig_destroy__ = _core.delete_InvalidSWBValueTypeForValueRange
    def __disown__(self):
        self.this.disown()
        _core.disown_InvalidSWBValueTypeForValueRange(self)
        return weakref.proxy(self)

# Register InvalidSWBValueTypeForValueRange in _core:
_core.InvalidSWBValueTypeForValueRange_swigregister(InvalidSWBValueTypeForValueRange)

class InvalidSWBValueForValueRange(TreeException):
    r"""Proxy of C++ SIMULATION_TREE_ERROR::InvalidSWBValueForValueRange class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, msg):
        r"""
        __init__(InvalidSWBValueForValueRange self, string msg) -> InvalidSWBValueForValueRange

        Parameters
        ----------
        msg: str

        """
        if self.__class__ == InvalidSWBValueForValueRange:
            _self = None
        else:
            _self = self
        _core.InvalidSWBValueForValueRange_swiginit(self, _core.new_InvalidSWBValueForValueRange(_self, msg))

    def what(self):
        r"""what(InvalidSWBValueForValueRange self) -> char const *"""
        return _core.InvalidSWBValueForValueRange_what(self)
    __swig_destroy__ = _core.delete_InvalidSWBValueForValueRange
    def __disown__(self):
        self.this.disown()
        _core.disown_InvalidSWBValueForValueRange(self)
        return weakref.proxy(self)

# Register InvalidSWBValueForValueRange in _core:
_core.InvalidSWBValueForValueRange_swigregister(InvalidSWBValueForValueRange)

class InvalidSWBValueRangeType(TreeException):
    r"""Proxy of C++ SIMULATION_TREE_ERROR::InvalidSWBValueRangeType class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""
        __init__(InvalidSWBValueRangeType self) -> InvalidSWBValueRangeType

        Parameters
        ----------
        self: object

        """
        if self.__class__ == InvalidSWBValueRangeType:
            _self = None
        else:
            _self = self
        _core.InvalidSWBValueRangeType_swiginit(self, _core.new_InvalidSWBValueRangeType(_self, ))

    def what(self):
        r"""what(InvalidSWBValueRangeType self) -> char const *"""
        return _core.InvalidSWBValueRangeType_what(self)
    __swig_destroy__ = _core.delete_InvalidSWBValueRangeType
    def __disown__(self):
        self.this.disown()
        _core.disown_InvalidSWBValueRangeType(self)
        return weakref.proxy(self)

# Register InvalidSWBValueRangeType in _core:
_core.InvalidSWBValueRangeType_swigregister(InvalidSWBValueRangeType)

class InvalidSWBValuesForValueRange(TreeException):
    r"""Proxy of C++ SIMULATION_TREE_ERROR::InvalidSWBValuesForValueRange class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, msg):
        r"""
        __init__(InvalidSWBValuesForValueRange self, string msg) -> InvalidSWBValuesForValueRange

        Parameters
        ----------
        msg: str

        """
        if self.__class__ == InvalidSWBValuesForValueRange:
            _self = None
        else:
            _self = self
        _core.InvalidSWBValuesForValueRange_swiginit(self, _core.new_InvalidSWBValuesForValueRange(_self, msg))

    def what(self):
        r"""what(InvalidSWBValuesForValueRange self) -> char const *"""
        return _core.InvalidSWBValuesForValueRange_what(self)
    __swig_destroy__ = _core.delete_InvalidSWBValuesForValueRange
    def __disown__(self):
        self.this.disown()
        _core.disown_InvalidSWBValuesForValueRange(self)
        return weakref.proxy(self)

# Register InvalidSWBValuesForValueRange in _core:
_core.InvalidSWBValuesForValueRange_swigregister(InvalidSWBValuesForValueRange)

class SplitStepValueRange(TreeException):
    r"""Proxy of C++ SIMULATION_TREE_ERROR::SplitStepValueRange class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, msg):
        r"""
        __init__(SplitStepValueRange self, string msg) -> SplitStepValueRange

        Parameters
        ----------
        msg: str

        """
        if self.__class__ == SplitStepValueRange:
            _self = None
        else:
            _self = self
        _core.SplitStepValueRange_swiginit(self, _core.new_SplitStepValueRange(_self, msg))

    def what(self):
        r"""what(SplitStepValueRange self) -> char const *"""
        return _core.SplitStepValueRange_what(self)
    __swig_destroy__ = _core.delete_SplitStepValueRange
    def __disown__(self):
        self.this.disown()
        _core.disown_SplitStepValueRange(self)
        return weakref.proxy(self)

# Register SplitStepValueRange in _core:
_core.SplitStepValueRange_swigregister(SplitStepValueRange)

class IllegalNkeyError(TreeException):
    r"""Proxy of C++ SIMULATION_TREE_ERROR::IllegalNkeyError class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, node):
        r"""
        __init__(IllegalNkeyError self, string node) -> IllegalNkeyError

        Parameters
        ----------
        node: str

        """
        if self.__class__ == IllegalNkeyError:
            _self = None
        else:
            _self = self
        _core.IllegalNkeyError_swiginit(self, _core.new_IllegalNkeyError(_self, node))

    def what(self):
        r"""what(IllegalNkeyError self) -> char const *"""
        return _core.IllegalNkeyError_what(self)
    __swig_destroy__ = _core.delete_IllegalNkeyError
    def __disown__(self):
        self.this.disown()
        _core.disown_IllegalNkeyError(self)
        return weakref.proxy(self)

# Register IllegalNkeyError in _core:
_core.IllegalNkeyError_swigregister(IllegalNkeyError)

class NoItemError(TreeException):
    r"""Proxy of C++ SIMULATION_TREE_ERROR::NoItemError class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, item, value):
        r"""
        __init__(NoItemError self, string item, string value) -> NoItemError

        Parameters
        ----------
        item: str
        value: str

        """
        if self.__class__ == NoItemError:
            _self = None
        else:
            _self = self
        _core.NoItemError_swiginit(self, _core.new_NoItemError(_self, item, value))

    def what(self):
        r"""what(NoItemError self) -> char const *"""
        return _core.NoItemError_what(self)
    __swig_destroy__ = _core.delete_NoItemError
    def __disown__(self):
        self.this.disown()
        _core.disown_NoItemError(self)
        return weakref.proxy(self)

# Register NoItemError in _core:
_core.NoItemError_swigregister(NoItemError)

class NoNodeError(NoItemError):
    r"""Proxy of C++ SIMULATION_TREE_ERROR::NoNodeError class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, node):
        r"""
        __init__(NoNodeError self, string node) -> NoNodeError

        Parameters
        ----------
        node: str

        """
        if self.__class__ == NoNodeError:
            _self = None
        else:
            _self = self
        _core.NoNodeError_swiginit(self, _core.new_NoNodeError(_self, node))
    __swig_destroy__ = _core.delete_NoNodeError
    def __disown__(self):
        self.this.disown()
        _core.disown_NoNodeError(self)
        return weakref.proxy(self)

# Register NoNodeError in _core:
_core.NoNodeError_swigregister(NoNodeError)

class ItemExistsError(TreeException):
    r"""Proxy of C++ SIMULATION_TREE_ERROR::ItemExistsError class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, item, value):
        r"""
        __init__(ItemExistsError self, string item, string value) -> ItemExistsError

        Parameters
        ----------
        item: str
        value: str

        """
        if self.__class__ == ItemExistsError:
            _self = None
        else:
            _self = self
        _core.ItemExistsError_swiginit(self, _core.new_ItemExistsError(_self, item, value))

    def what(self):
        r"""what(ItemExistsError self) -> char const *"""
        return _core.ItemExistsError_what(self)
    __swig_destroy__ = _core.delete_ItemExistsError
    def __disown__(self):
        self.this.disown()
        _core.disown_ItemExistsError(self)
        return weakref.proxy(self)

# Register ItemExistsError in _core:
_core.ItemExistsError_swigregister(ItemExistsError)

class IllegalError(TreeException):
    r"""Proxy of C++ SIMULATION_TREE_ERROR::IllegalError class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, item, value):
        r"""
        __init__(IllegalError self, string item, string value) -> IllegalError

        Parameters
        ----------
        item: str
        value: str

        """
        if self.__class__ == IllegalError:
            _self = None
        else:
            _self = self
        _core.IllegalError_swiginit(self, _core.new_IllegalError(_self, item, value))

    def what(self):
        r"""what(IllegalError self) -> char const *"""
        return _core.IllegalError_what(self)
    __swig_destroy__ = _core.delete_IllegalError
    def __disown__(self):
        self.this.disown()
        _core.disown_IllegalError(self)
        return weakref.proxy(self)

# Register IllegalError in _core:
_core.IllegalError_swigregister(IllegalError)

class FileError(TreeException):
    r"""Proxy of C++ SIMULATION_TREE_ERROR::FileError class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, path, writing=0):
        r"""
        __init__(FileError self, string path, int writing=0) -> FileError

        Parameters
        ----------
        path: str
        writing: int

        """
        if self.__class__ == FileError:
            _self = None
        else:
            _self = self
        _core.FileError_swiginit(self, _core.new_FileError(_self, path, writing))

    def what(self):
        r"""what(FileError self) -> char const *"""
        return _core.FileError_what(self)
    __swig_destroy__ = _core.delete_FileError
    def __disown__(self):
        self.this.disown()
        _core.disown_FileError(self)
        return weakref.proxy(self)

# Register FileError in _core:
_core.FileError_swigregister(FileError)

class TagError(TreeException):
    r"""Proxy of C++ SIMULATION_TREE_ERROR::TagError class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, msg):
        r"""
        __init__(TagError self, string msg) -> TagError

        Parameters
        ----------
        msg: str

        """
        if self.__class__ == TagError:
            _self = None
        else:
            _self = self
        _core.TagError_swiginit(self, _core.new_TagError(_self, msg))
    __swig_destroy__ = _core.delete_TagError
    def __disown__(self):
        self.this.disown()
        _core.disown_TagError(self)
        return weakref.proxy(self)

# Register TagError in _core:
_core.TagError_swigregister(TagError)

class TagGroupError(TreeException):
    r"""Proxy of C++ SIMULATION_TREE_ERROR::TagGroupError class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, msg):
        r"""
        __init__(TagGroupError self, string msg) -> TagGroupError

        Parameters
        ----------
        msg: str

        """
        if self.__class__ == TagGroupError:
            _self = None
        else:
            _self = self
        _core.TagGroupError_swiginit(self, _core.new_TagGroupError(_self, msg))
    __swig_destroy__ = _core.delete_TagGroupError
    def __disown__(self):
        self.this.disown()
        _core.disown_TagGroupError(self)
        return weakref.proxy(self)

# Register TagGroupError in _core:
_core.TagGroupError_swigregister(TagGroupError)

class SWBTag(object):
    r"""Proxy of C++ SWBTag class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    SWBValueType_VTB = _core.SWBTag_SWBValueType_VTB
    
    SWBValueType_VTI = _core.SWBTag_SWBValueType_VTI
    
    SWBValueType_VTD = _core.SWBTag_SWBValueType_VTD
    
    SWBValueType_VTS = _core.SWBTag_SWBValueType_VTS
    
    SWBStructureType_SCALAR = _core.SWBTag_SWBStructureType_SCALAR
    
    SWBStructureType_VECTOR = _core.SWBTag_SWBStructureType_VECTOR
    
    SWBStructureType_MATRIX = _core.SWBTag_SWBStructureType_MATRIX
    

    def Key(self):
        r"""Key(SWBTag self) -> string"""
        return _core.SWBTag_Key(self)

    def StructureType(self):
        r"""StructureType(SWBTag self) -> SWBTag::SWBStructureType"""
        return _core.SWBTag_StructureType(self)

    def ValueType(self):
        r"""ValueType(SWBTag self) -> SWBTag::SWBValueType"""
        return _core.SWBTag_ValueType(self)

    def CopyTag(self):
        r"""CopyTag(SWBTag self) -> std::shared_ptr< SWBTag >"""
        return _core.SWBTag_CopyTag(self)

    def __init__(self, key):
        r"""
        __init__(SWBTag self, string key) -> SWBTag

        Parameters
        ----------
        key: str

        """
        if self.__class__ == SWBTag:
            _self = None
        else:
            _self = self
        _core.SWBTag_swiginit(self, _core.new_SWBTag(_self, key))
    __swig_destroy__ = _core.delete_SWBTag
    def __disown__(self):
        self.this.disown()
        _core.disown_SWBTag(self)
        return weakref.proxy(self)

# Register SWBTag in _core:
_core.SWBTag_swigregister(SWBTag)

class SWBTagGroup(object):
    r"""Proxy of C++ SWBTagGroup class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def BeginTag(self):
        r"""BeginTag(SWBTagGroup self) -> SWBTagMapCIter"""
        return _core.SWBTagGroup_BeginTag(self)

    def EndTag(self):
        r"""EndTag(SWBTagGroup self) -> SWBTagMapCIter"""
        return _core.SWBTagGroup_EndTag(self)

    def BeginTagGroup(self):
        r"""BeginTagGroup(SWBTagGroup self) -> SWBTagGroupMapCIter"""
        return _core.SWBTagGroup_BeginTagGroup(self)

    def EndTagGroup(self):
        r"""EndTagGroup(SWBTagGroup self) -> SWBTagGroupMapCIter"""
        return _core.SWBTagGroup_EndTagGroup(self)

    def Name(self):
        r"""Name(SWBTagGroup self) -> string"""
        return _core.SWBTagGroup_Name(self)

    def FindTag(self, key):
        r"""
        FindTag(SWBTagGroup self, string key) -> SWBTagMapCIter

        Parameters
        ----------
        key: str

        """
        return _core.SWBTagGroup_FindTag(self, key)

    def FindTagGroup(self, name):
        r"""
        FindTagGroup(SWBTagGroup self, string name) -> SWBTagGroupMapCIter

        Parameters
        ----------
        name: str

        """
        return _core.SWBTagGroup_FindTagGroup(self, name)

    def IsTagKey(self, key):
        r"""
        IsTagKey(SWBTagGroup self, string key) -> bool

        Parameters
        ----------
        key: str

        """
        return _core.SWBTagGroup_IsTagKey(self, key)

    def IsTagGroupName(self, name):
        r"""
        IsTagGroupName(SWBTagGroup self, string name) -> bool

        Parameters
        ----------
        name: str

        """
        return _core.SWBTagGroup_IsTagGroupName(self, name)

    def TagSize(self):
        r"""TagSize(SWBTagGroup self) -> int"""
        return _core.SWBTagGroup_TagSize(self)

    def TagGroupSize(self):
        r"""TagGroupSize(SWBTagGroup self) -> int"""
        return _core.SWBTagGroup_TagGroupSize(self)

    def __init__(self, name):
        r"""
        __init__(SWBTagGroup self, string name) -> SWBTagGroup

        Parameters
        ----------
        name: str

        """
        if self.__class__ == SWBTagGroup:
            _self = None
        else:
            _self = self
        _core.SWBTagGroup_swiginit(self, _core.new_SWBTagGroup(_self, name))
    __swig_destroy__ = _core.delete_SWBTagGroup

    def EraseTag(self, key):
        r"""
        EraseTag(SWBTagGroup self, string key)

        Parameters
        ----------
        key: str

        """
        return _core.SWBTagGroup_EraseTag(self, key)

    def EraseTagGroup(self, key):
        r"""
        EraseTagGroup(SWBTagGroup self, string key)

        Parameters
        ----------
        key: str

        """
        return _core.SWBTagGroup_EraseTagGroup(self, key)

    def EraseAll(self):
        r"""EraseAll(SWBTagGroup self)"""
        return _core.SWBTagGroup_EraseAll(self)

    def InsertTag(self, tag):
        r"""
        InsertTag(SWBTagGroup self, std::shared_ptr< SWBTag > const & tag)

        Parameters
        ----------
        tag: std::shared_ptr< SWBTag > const &

        """
        return _core.SWBTagGroup_InsertTag(self, tag)

    def InsertTagGroup(self, tagGroup):
        r"""
        InsertTagGroup(SWBTagGroup self, std::shared_ptr< SWBTagGroup > const & tagGroup)

        Parameters
        ----------
        tagGroup: std::shared_ptr< SWBTagGroup > const &

        """
        return _core.SWBTagGroup_InsertTagGroup(self, tagGroup)

    def InsertReplaceTag(self, tag):
        r"""
        InsertReplaceTag(SWBTagGroup self, std::shared_ptr< SWBTag > const & tag)

        Parameters
        ----------
        tag: std::shared_ptr< SWBTag > const &

        """
        return _core.SWBTagGroup_InsertReplaceTag(self, tag)

    def InsertReplaceTagGroup(self, tagGroup):
        r"""
        InsertReplaceTagGroup(SWBTagGroup self, std::shared_ptr< SWBTagGroup > const & tagGroup)

        Parameters
        ----------
        tagGroup: std::shared_ptr< SWBTagGroup > const &

        """
        return _core.SWBTagGroup_InsertReplaceTagGroup(self, tagGroup)

    def MoveContentTo(self, dst):
        r"""
        MoveContentTo(SWBTagGroup self, std::shared_ptr< SWBTagGroup > const & dst)

        Parameters
        ----------
        dst: std::shared_ptr< SWBTagGroup > const &

        """
        return _core.SWBTagGroup_MoveContentTo(self, dst)

    def CopyTagGroup(self):
        r"""CopyTagGroup(SWBTagGroup self) -> std::shared_ptr< SWBTagGroup >"""
        return _core.SWBTagGroup_CopyTagGroup(self)

    def CopyTagGroupToThis(self):
        r"""CopyTagGroupToThis(SWBTagGroup self)"""
        return _core.SWBTagGroup_CopyTagGroupToThis(self)

    def CloneTagGroup(self, other):
        r"""
        CloneTagGroup(SWBTagGroup self, SWBTagGroup other)

        Parameters
        ----------
        other: SWBTagGroup const &

        """
        return _core.SWBTagGroup_CloneTagGroup(self, other)
    def __disown__(self):
        self.this.disown()
        _core.disown_SWBTagGroup(self)
        return weakref.proxy(self)

# Register SWBTagGroup in _core:
_core.SWBTagGroup_swigregister(SWBTagGroup)

class SWBTagGroupHelper(SWBTagGroup):
    r"""Proxy of C++ SWBTagGroupHelper class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""
        __init__(SWBTagGroupHelper self, string name) -> SWBTagGroupHelper

        Parameters
        ----------
        name: str

        """
        if self.__class__ == SWBTagGroupHelper:
            _self = None
        else:
            _self = self
        _core.SWBTagGroupHelper_swiginit(self, _core.new_SWBTagGroupHelper(_self, name))
    __swig_destroy__ = _core.delete_SWBTagGroupHelper

    def GetCustomName(self):
        r"""GetCustomName(SWBTagGroupHelper self) -> string"""
        return _core.SWBTagGroupHelper_GetCustomName(self)

    def SetCurrentTagGroup(self, currentGroup):
        r"""
        SetCurrentTagGroup(SWBTagGroupHelper self, string currentGroup)

        Parameters
        ----------
        currentGroup: str

        """
        return _core.SWBTagGroupHelper_SetCurrentTagGroup(self, currentGroup)

    def DeleteTag(self, key):
        r"""
        DeleteTag(SWBTagGroupHelper self, string key)

        Parameters
        ----------
        key: str

        """
        return _core.SWBTagGroupHelper_DeleteTag(self, key)

    def GetNextKey(self, *args):
        r"""
        GetNextKey(SWBTagGroupHelper self, string key="") -> string

        Parameters
        ----------
        key: str

        """
        return _core.SWBTagGroupHelper_GetNextKey(self, *args)

    def BeginTag(self):
        r"""BeginTag(SWBTagGroupHelper self) -> SWBTagMapCIter"""
        return _core.SWBTagGroupHelper_BeginTag(self)

    def EndTag(self):
        r"""EndTag(SWBTagGroupHelper self) -> SWBTagMapCIter"""
        return _core.SWBTagGroupHelper_EndTag(self)

    def SetTag(self, key, value):
        r"""
        SetTag(SWBTagGroupHelper self, string key, string value)

        Parameters
        ----------
        key: str
        value: std::basic_string< char,std::char_traits< char >,std::allocator< char > >

        """
        return _core.SWBTagGroupHelper_SetTag(self, key, value)

    def GetTag(self, key):
        r"""
        GetTag(SWBTagGroupHelper self, string key) -> string

        Parameters
        ----------
        key: str

        """
        return _core.SWBTagGroupHelper_GetTag(self, key)
    def __disown__(self):
        self.this.disown()
        _core.disown_SWBTagGroupHelper(self)
        return weakref.proxy(self)

# Register SWBTagGroupHelper in _core:
_core.SWBTagGroupHelper_swigregister(SWBTagGroupHelper)

class SWBFlow(SWBTagGroupHelper):
    r"""Proxy of C++ SWBFlow class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(SWBFlow self) -> SWBFlow
        __init__(SWBFlow self, SWBFlow other) -> SWBFlow

        Parameters
        ----------
        other: SWBFlow const &

        """
        if self.__class__ == SWBFlow:
            _self = None
        else:
            _self = self
        _core.SWBFlow_swiginit(self, _core.new_SWBFlow(_self, *args))
    __swig_destroy__ = _core.delete_SWBFlow

    def DeleteAll(self):
        r"""DeleteAll(SWBFlow self)"""
        return _core.SWBFlow_DeleteAll(self)

    def NbSteps(self):
        r"""NbSteps(SWBFlow self) -> STEP"""
        return _core.SWBFlow_NbSteps(self)

    def NbParams(self):
        r"""NbParams(SWBFlow self) -> int"""
        return _core.SWBFlow_NbParams(self)

    def NbParamsRef(self):
        r"""NbParamsRef(SWBFlow self) -> int &"""
        return _core.SWBFlow_NbParamsRef(self)

    def GetStepList(self):
        r"""GetStepList(SWBFlow self) -> list_SWBStepsp"""
        return _core.SWBFlow_GetStepList(self)

    def GetStepListRef(self):
        r"""GetStepListRef(SWBFlow self) -> list_SWBStepsp"""
        return _core.SWBFlow_GetStepListRef(self)

    def AddStep(self, step):
        r"""
        AddStep(SWBFlow self, std::shared_ptr< SWBStep > const & step)

        Parameters
        ----------
        step: std::shared_ptr< SWBStep > const &

        """
        return _core.SWBFlow_AddStep(self, step)

    def InsertStep(self, st, stepi):
        r"""
        InsertStep(SWBFlow self, std::shared_ptr< SWBStep > const & st, STEP stepi) -> int

        Parameters
        ----------
        st: std::shared_ptr< SWBStep > const &
        stepi: STEP

        """
        return _core.SWBFlow_InsertStep(self, st, stepi)

    def Index(self, pname):
        r"""
        Index(SWBFlow self, string pname) -> int

        Parameters
        ----------
        pname: str

        """
        return _core.SWBFlow_Index(self, pname)

    def RemoveStep(self, stepi):
        r"""
        RemoveStep(SWBFlow self, STEP stepi) -> int

        Parameters
        ----------
        stepi: STEP

        """
        return _core.SWBFlow_RemoveStep(self, stepi)

    def RemoveNode(self, node):
        r"""
        RemoveNode(SWBFlow self, std::shared_ptr< SWBNode > const & node) -> int

        Parameters
        ----------
        node: std::shared_ptr< SWBNode > const &

        """
        return _core.SWBFlow_RemoveNode(self, node)

    def ReorderStepNodes(self):
        r"""ReorderStepNodes(SWBFlow self)"""
        return _core.SWBFlow_ReorderStepNodes(self)

    def AllStepNodes(self, *args):
        r"""
        AllStepNodes(SWBFlow self, STEP atStepi, string scnr=ALL) -> list_SWBNodesp

        Parameters
        ----------
        atStepi: STEP
        scnr: str

        """
        return _core.SWBFlow_AllStepNodes(self, *args)

    def AllPnames(self):
        r"""AllPnames(SWBFlow self) -> list_s"""
        return _core.SWBFlow_AllPnames(self)

    def AllTools(self):
        r"""AllTools(SWBFlow self) -> list_s"""
        return _core.SWBFlow_AllTools(self)

    def ToolPnames(self, tool):
        r"""
        ToolPnames(SWBFlow self, string tool) -> list_s

        Parameters
        ----------
        tool: str

        """
        return _core.SWBFlow_ToolPnames(self, tool)

    def ToolSteps(self, tool):
        r"""
        ToolSteps(SWBFlow self, string tool) -> list_s

        Parameters
        ----------
        tool: str

        """
        return _core.SWBFlow_ToolSteps(self, tool)

    def StepIsVirtual(self, stepi):
        r"""
        StepIsVirtual(SWBFlow self, STEP const stepi) -> bool

        Parameters
        ----------
        stepi: STEP const

        """
        return _core.SWBFlow_StepIsVirtual(self, stepi)

    def StepIsReal(self, stepi):
        r"""
        StepIsReal(SWBFlow self, STEP const stepi) -> bool

        Parameters
        ----------
        stepi: STEP const

        """
        return _core.SWBFlow_StepIsReal(self, stepi)

    def GetStep(self, stepi):
        r"""
        GetStep(SWBFlow self, STEP const stepi) -> std::shared_ptr< SWBStep >

        Parameters
        ----------
        stepi: STEP const

        """
        return _core.SWBFlow_GetStep(self, stepi)

    def Last(self):
        r"""Last(SWBFlow self) -> std::shared_ptr< SWBStep >"""
        return _core.SWBFlow_Last(self)

    def ConvertStep(self, step, lastStepi=-1):
        r"""
        ConvertStep(SWBFlow self, string step, STEP lastStepi=-1) -> STEP

        Parameters
        ----------
        step: str
        lastStepi: STEP

        """
        return _core.SWBFlow_ConvertStep(self, step, lastStepi)

    def LookupToolStep(self, *args):
        r"""
        LookupToolStep(SWBFlow self, string tool, STEP & stepi) -> std::shared_ptr< SWBToolStep >

        Parameters
        ----------
        tool: str
        stepi: STEP &

        LookupToolStep(SWBFlow self, string tool, STEP stepi) -> std::shared_ptr< SWBToolStep >

        Parameters
        ----------
        tool: str
        stepi: STEP

        LookupToolStep(SWBFlow self, string tool) -> std::shared_ptr< SWBToolStep >

        Parameters
        ----------
        tool: str

        """
        return _core.SWBFlow_LookupToolStep(self, *args)

    def LookupSplitStep(self, *args):
        r"""
        LookupSplitStep(SWBFlow self, string pname, STEP & stepi) -> std::shared_ptr< SWBSplitStep >

        Parameters
        ----------
        pname: str
        stepi: STEP &

        LookupSplitStep(SWBFlow self, string pname, STEP stepi) -> std::shared_ptr< SWBSplitStep >

        Parameters
        ----------
        pname: str
        stepi: STEP

        LookupSplitStep(SWBFlow self, string pname) -> std::shared_ptr< SWBSplitStep >

        Parameters
        ----------
        pname: str

        """
        return _core.SWBFlow_LookupSplitStep(self, *args)
    def __disown__(self):
        self.this.disown()
        _core.disown_SWBFlow(self)
        return weakref.proxy(self)

# Register SWBFlow in _core:
_core.SWBFlow_swigregister(SWBFlow)
SWBFlow.TAGGROUP_NAME_FLOW = _core.cvar.SWBFlow_TAGGROUP_NAME_FLOW

class SWBNode(SWBTagGroupHelper):
    r"""Proxy of C++ SWBNode class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(SWBNode self) -> SWBNode
        __init__(SWBNode self, NKEY const nkey, std::shared_ptr< SWBNode > const & parent, STEP const stepi, std::shared_ptr< SWBStep > const & stepptr, std::shared_ptr< SWBValue > const & pval, STATE const state=NONE, bool lock=False) -> SWBNode

        Parameters
        ----------
        nkey: NKEY const
        parent: std::shared_ptr< SWBNode > const &
        stepi: STEP const
        stepptr: std::shared_ptr< SWBStep > const &
        pval: std::shared_ptr< SWBValue > const &
        state: enum STATE const
        lock: bool

        """
        if self.__class__ == SWBNode:
            _self = None
        else:
            _self = self
        _core.SWBNode_swiginit(self, _core.new_SWBNode(_self, *args))
    __swig_destroy__ = _core.delete_SWBNode

    def Init(self, *args):
        r"""
        Init(SWBNode self, NKEY const nkey, std::shared_ptr< SWBNode > const & parent, STEP const stepi, std::shared_ptr< SWBStep > const & stepptr, std::shared_ptr< SWBValue > const & pval, STATE const state=NONE)

        Parameters
        ----------
        nkey: NKEY const
        parent: std::shared_ptr< SWBNode > const &
        stepi: STEP const
        stepptr: std::shared_ptr< SWBStep > const &
        pval: std::shared_ptr< SWBValue > const &
        state: enum STATE const

        """
        return _core.SWBNode_Init(self, *args)

    def Nkey(self):
        r"""Nkey(SWBNode self) -> NKEY"""
        return _core.SWBNode_Nkey(self)

    def GetUID(self):
        r"""GetUID(SWBNode self) -> long"""
        return _core.SWBNode_GetUID(self)

    def GetHost(self, _interp):
        r"""
        GetHost(SWBNode self, Tcl_Interp * _interp) -> string

        Parameters
        ----------
        _interp: Tcl_Interp *

        """
        return _core.SWBNode_GetHost(self, _interp)

    def SetUID(self, _nv):
        r"""
        SetUID(SWBNode self, long _nv)

        Parameters
        ----------
        _nv: long

        """
        return _core.SWBNode_SetUID(self, _nv)

    def Pkey(self):
        r"""Pkey(SWBNode self) -> NKEY"""
        return _core.SWBNode_Pkey(self)

    def Parent(self):
        r"""Parent(SWBNode self) -> std::shared_ptr< SWBNode >"""
        return _core.SWBNode_Parent(self)

    def Step(self):
        r"""Step(SWBNode self) -> STEP"""
        return _core.SWBNode_Step(self)

    def State(self):
        r"""State(SWBNode self) -> STATE"""
        return _core.SWBNode_State(self)

    def StateAsString(self, *args):
        r"""
        StateAsString(SWBNode self) -> string
        StateAsString(SWBNode self, STATE st) -> string

        Parameters
        ----------
        st: enum STATE

        """
        return _core.SWBNode_StateAsString(self, *args)

    def IsLocked(self):
        r"""IsLocked(SWBNode self) -> bool"""
        return _core.SWBNode_IsLocked(self)

    def IsPruned(self):
        r"""IsPruned(SWBNode self) -> bool"""
        return _core.SWBNode_IsPruned(self)
    locknotified = property(_core.SWBNode_locknotified_get, _core.SWBNode_locknotified_set, doc=r"""locknotified : bool""")

    def LockNotified(self):
        r"""LockNotified(SWBNode self) -> bool"""
        return _core.SWBNode_LockNotified(self)

    def SetLockNotified(self, val):
        r"""
        SetLockNotified(SWBNode self, bool val)

        Parameters
        ----------
        val: bool

        """
        return _core.SWBNode_SetLockNotified(self, val)

    def IsVirtual(self):
        r"""IsVirtual(SWBNode self) -> bool"""
        return _core.SWBNode_IsVirtual(self)

    def IsReal(self):
        r"""IsReal(SWBNode self) -> bool"""
        return _core.SWBNode_IsReal(self)

    def SetStepType(self, ot):
        r"""
        SetStepType(SWBNode self, StepOutputType ot)

        Parameters
        ----------
        ot: enum StepOutputType

        """
        return _core.SWBNode_SetStepType(self, ot)
    isEditing = property(_core.SWBNode_isEditing_get, _core.SWBNode_isEditing_set, doc=r"""isEditing : bool""")

    def IsEditing(self):
        r"""IsEditing(SWBNode self) -> bool"""
        return _core.SWBNode_IsEditing(self)

    def SetEditing(self, val):
        r"""
        SetEditing(SWBNode self, bool val)

        Parameters
        ----------
        val: bool

        """
        return _core.SWBNode_SetEditing(self, val)
    toolLabel = property(_core.SWBNode_toolLabel_get, _core.SWBNode_toolLabel_set, doc=r"""toolLabel : std::string""")

    def ToolLabel(self):
        r"""ToolLabel(SWBNode self) -> string"""
        return _core.SWBNode_ToolLabel(self)

    def SetToolLabel(self, val):
        r"""
        SetToolLabel(SWBNode self, string val)

        Parameters
        ----------
        val: str

        """
        return _core.SWBNode_SetToolLabel(self, val)

    def SetFolded(self, arg2, scen, folded_nodes):
        r"""
        SetFolded(SWBNode self, bool const & arg2, string scen, std::set< int,std::less< int >,std::allocator< int > > & folded_nodes) -> bool

        Parameters
        ----------
        arg2: bool const &
        scen: str
        folded_nodes: std::set< int,std::less< int >,std::allocator< int > > &

        """
        return _core.SWBNode_SetFolded(self, arg2, scen, folded_nodes)

    def IsFolded(self, scen):
        r"""
        IsFolded(SWBNode self, string scen) -> bool

        Parameters
        ----------
        scen: str

        """
        return _core.SWBNode_IsFolded(self, scen)

    def IsSomeParentFolded(self, scen):
        r"""
        IsSomeParentFolded(SWBNode self, string scen) -> bool

        Parameters
        ----------
        scen: str

        """
        return _core.SWBNode_IsSomeParentFolded(self, scen)

    def GetFoldedScenarios(self):
        r"""GetFoldedScenarios(SWBNode self) -> std::set< std::string,std::less< std::string >,std::allocator< std::string > >"""
        return _core.SWBNode_GetFoldedScenarios(self)

    def GetFirstFoldedParent(self, scen):
        r"""
        GetFirstFoldedParent(SWBNode self, string scen) -> std::shared_ptr< SWBNode >

        Parameters
        ----------
        scen: str

        """
        return _core.SWBNode_GetFirstFoldedParent(self, scen)

    def Pvalue(self):
        r"""Pvalue(SWBNode self) -> std::shared_ptr< SWBValue > const &"""
        return _core.SWBNode_Pvalue(self)

    def GetParameterValue(self):
        r"""GetParameterValue(SWBNode self) -> string"""
        return _core.SWBNode_GetParameterValue(self)

    def GetScenarios(self):
        r"""GetScenarios(SWBNode self) -> map_SWBScenariosp_NODE_TYPE"""
        return _core.SWBNode_GetScenarios(self)

    def SetNkey(self, newkey):
        r"""
        SetNkey(SWBNode self, NKEY newkey)

        Parameters
        ----------
        newkey: NKEY

        """
        return _core.SWBNode_SetNkey(self, newkey)

    def SetParent(self, pk):
        r"""
        SetParent(SWBNode self, std::shared_ptr< SWBNode > const & pk)

        Parameters
        ----------
        pk: std::shared_ptr< SWBNode > const &

        """
        return _core.SWBNode_SetParent(self, pk)

    def SetPvalue(self, pval):
        r"""
        SetPvalue(SWBNode self, std::shared_ptr< SWBValue > const & pval)

        Parameters
        ----------
        pval: std::shared_ptr< SWBValue > const &

        """
        return _core.SWBNode_SetPvalue(self, pval)

    def SetState(self, *args):
        r"""
        SetState(SWBNode self, STATE st)

        Parameters
        ----------
        st: enum STATE

        SetState(SWBNode self, string ststr)

        Parameters
        ----------
        ststr: str

        """
        return _core.SWBNode_SetState(self, *args)

    def SetStep(self, step, stepptr=0):
        r"""
        SetStep(SWBNode self, STEP step, std::shared_ptr< SWBStep > const & stepptr=0)

        Parameters
        ----------
        step: STEP
        stepptr: std::shared_ptr< SWBStep > const &

        """
        return _core.SWBNode_SetStep(self, step, stepptr)

    def SetLock(self, lock=True):
        r"""
        SetLock(SWBNode self, bool lock=True)

        Parameters
        ----------
        lock: bool

        """
        return _core.SWBNode_SetLock(self, lock)

    def AddToScenario(self, *args):
        r"""
        AddToScenario(SWBNode self, std::shared_ptr< SWBScenario > const & scnr, NODE_TYPE node_type=ACTIVE)

        Parameters
        ----------
        scnr: std::shared_ptr< SWBScenario > const &
        node_type: enum NODE_TYPE

        """
        return _core.SWBNode_AddToScenario(self, *args)

    def RemFromScenario(self, scnr):
        r"""
        RemFromScenario(SWBNode self, std::shared_ptr< SWBScenario > const & scnr) -> bool

        Parameters
        ----------
        scnr: std::shared_ptr< SWBScenario > const &

        """
        return _core.SWBNode_RemFromScenario(self, scnr)

    def ScenarioExists(self, *args):
        r"""
        ScenarioExists(SWBNode self, string scnr) -> bool

        Parameters
        ----------
        scnr: str

        ScenarioExists(SWBNode self, std::shared_ptr< SWBScenario > const & scenario) -> bool

        Parameters
        ----------
        scenario: std::shared_ptr< SWBScenario > const &

        """
        return _core.SWBNode_ScenarioExists(self, *args)

    def NbScenarios(self):
        r"""NbScenarios(SWBNode self) -> int"""
        return _core.SWBNode_NbScenarios(self)

    def Prune(self):
        r"""Prune(SWBNode self)"""
        return _core.SWBNode_Prune(self)

    def UnPrune(self):
        r"""UnPrune(SWBNode self)"""
        return _core.SWBNode_UnPrune(self)

    def SetScenarios(self, *args):
        r"""
        SetScenarios(SWBNode self, map_SWBScenariosp_NODE_TYPE other)

        Parameters
        ----------
        other: ScenarioNodeTypeStdMap const

        SetScenarios(SWBNode self, list_SWBScenariosp allscenarios)

        Parameters
        ----------
        allscenarios: ScenarioStdList

        """
        return _core.SWBNode_SetScenarios(self, *args)

    def PruneAll(self):
        r"""PruneAll(SWBNode self)"""
        return _core.SWBNode_PruneAll(self)

    def UnPruneAll(self):
        r"""UnPruneAll(SWBNode self)"""
        return _core.SWBNode_UnPruneAll(self)

    def Children(self):
        r"""Children(SWBNode self) -> list_SWBNodesp"""
        return _core.SWBNode_Children(self)

    def SizeChildren(self):
        r"""SizeChildren(SWBNode self) -> int"""
        return _core.SWBNode_SizeChildren(self)

    def SetChildren(self, _nc):
        r"""
        SetChildren(SWBNode self, list_SWBNodesp _nc)

        Parameters
        ----------
        _nc: ListOfNodes

        """
        return _core.SWBNode_SetChildren(self, _nc)

    def PushBackChild(self, _n):
        r"""
        PushBackChild(SWBNode self, std::shared_ptr< SWBNode > & _n)

        Parameters
        ----------
        _n: std::shared_ptr< SWBNode > &

        """
        return _core.SWBNode_PushBackChild(self, _n)

    def ClearChildren(self):
        r"""ClearChildren(SWBNode self)"""
        return _core.SWBNode_ClearChildren(self)

    def RemoveChild(self, _n):
        r"""
        RemoveChild(SWBNode self, std::shared_ptr< SWBNode > const & _n)

        Parameters
        ----------
        _n: std::shared_ptr< SWBNode > const &

        """
        return _core.SWBNode_RemoveChild(self, _n)

    def GetCustomName(self):
        r"""GetCustomName(SWBNode self) -> string"""
        return _core.SWBNode_GetCustomName(self)

    def GetExecutionData(self):
        r"""GetExecutionData(SWBNode self) -> std::shared_ptr< SWBExecNode > &"""
        return _core.SWBNode_GetExecutionData(self)

    @staticmethod
    def GetPValuesRange(inpNodes):
        r"""
        GetPValuesRange(vector_SWBNodesp inpNodes) -> string

        Parameters
        ----------
        inpNodes: std::vector< std::shared_ptr< SWBNode >,std::allocator< std::shared_ptr< SWBNode > > >

        """
        return _core.SWBNode_GetPValuesRange(inpNodes)

    @staticmethod
    def GetKeysRange(inpNodes):
        r"""
        GetKeysRange(vector_SWBNodesp inpNodes) -> string

        Parameters
        ----------
        inpNodes: std::vector< std::shared_ptr< SWBNode >,std::allocator< std::shared_ptr< SWBNode > > >

        """
        return _core.SWBNode_GetKeysRange(inpNodes)

    @staticmethod
    def GetHostsRange(inpNodes, _interp):
        r"""
        GetHostsRange(vector_SWBNodesp inpNodes, Tcl_Interp * _interp) -> string

        Parameters
        ----------
        inpNodes: std::vector< std::shared_ptr< SWBNode >,std::allocator< std::shared_ptr< SWBNode > > >
        _interp: Tcl_Interp *

        """
        return _core.SWBNode_GetHostsRange(inpNodes, _interp)
    row = property(_core.SWBNode_row_get, _core.SWBNode_row_set, doc=r"""row : int""")
    col = property(_core.SWBNode_col_get, _core.SWBNode_col_set, doc=r"""col : int""")
    def __disown__(self):
        self.this.disown()
        _core.disown_SWBNode(self)
        return weakref.proxy(self)

# Register SWBNode in _core:
_core.SWBNode_swigregister(SWBNode)

def SWBNode_GetPValuesRange(inpNodes):
    r"""
    SWBNode_GetPValuesRange(vector_SWBNodesp inpNodes) -> string

    Parameters
    ----------
    inpNodes: std::vector< std::shared_ptr< SWBNode >,std::allocator< std::shared_ptr< SWBNode > > >

    """
    return _core.SWBNode_GetPValuesRange(inpNodes)

def SWBNode_GetKeysRange(inpNodes):
    r"""
    SWBNode_GetKeysRange(vector_SWBNodesp inpNodes) -> string

    Parameters
    ----------
    inpNodes: std::vector< std::shared_ptr< SWBNode >,std::allocator< std::shared_ptr< SWBNode > > >

    """
    return _core.SWBNode_GetKeysRange(inpNodes)

def SWBNode_GetHostsRange(inpNodes, _interp):
    r"""
    SWBNode_GetHostsRange(vector_SWBNodesp inpNodes, Tcl_Interp * _interp) -> string

    Parameters
    ----------
    inpNodes: std::vector< std::shared_ptr< SWBNode >,std::allocator< std::shared_ptr< SWBNode > > >
    _interp: Tcl_Interp *

    """
    return _core.SWBNode_GetHostsRange(inpNodes, _interp)
SWBNode.TAGGROUP_NAME_NODE = _core.cvar.SWBNode_TAGGROUP_NAME_NODE

class SWBScenario(SWBTagGroupHelper):
    r"""Proxy of C++ SWBScenario class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    scen_t_STATIC = _core.SWBScenario_scen_t_STATIC
    
    scen_t_DYNAMIC = _core.SWBScenario_scen_t_DYNAMIC
    
    expr_t_EXPRESSION = _core.SWBScenario_expr_t_EXPRESSION
    
    expr_t_FILTER = _core.SWBScenario_expr_t_FILTER
    

    def __init__(self, *args):
        r"""
        __init__(SWBScenario self, string scnr, int const _id=0, SWBScenario::scen_t const _type=STATIC, SWBScenario::expr_t const _exprtype=EXPRESSION, string _expr="") -> SWBScenario

        Parameters
        ----------
        scnr: str
        _id: int const
        _type: enum SWBScenario::scen_t const
        _exprtype: enum SWBScenario::expr_t const
        _expr: str

        __init__(SWBScenario self, SWBScenario other) -> SWBScenario

        Parameters
        ----------
        other: SWBScenario const &

        """
        if self.__class__ == SWBScenario:
            _self = None
        else:
            _self = self
        _core.SWBScenario_swiginit(self, _core.new_SWBScenario(_self, *args))
    __swig_destroy__ = _core.delete_SWBScenario

    def GetScenario(self):
        r"""GetScenario(SWBScenario self) -> string"""
        return _core.SWBScenario_GetScenario(self)

    def GetId(self):
        r"""GetId(SWBScenario self) -> int"""
        return _core.SWBScenario_GetId(self)

    def GetType(self):
        r"""GetType(SWBScenario self) -> SWBScenario::scen_t"""
        return _core.SWBScenario_GetType(self)

    def GetExprType(self):
        r"""GetExprType(SWBScenario self) -> SWBScenario::expr_t"""
        return _core.SWBScenario_GetExprType(self)

    def GetExpression(self):
        r"""GetExpression(SWBScenario self) -> string"""
        return _core.SWBScenario_GetExpression(self)

    def IsDynamic(self):
        r"""IsDynamic(SWBScenario self) -> bool"""
        return _core.SWBScenario_IsDynamic(self)

    def IsStatic(self):
        r"""IsStatic(SWBScenario self) -> bool"""
        return _core.SWBScenario_IsStatic(self)

    def IsExpression(self):
        r"""IsExpression(SWBScenario self) -> bool"""
        return _core.SWBScenario_IsExpression(self)

    def IsFilter(self):
        r"""IsFilter(SWBScenario self) -> bool"""
        return _core.SWBScenario_IsFilter(self)

    def SetScenario(self, newname):
        r"""
        SetScenario(SWBScenario self, string newname)

        Parameters
        ----------
        newname: str

        """
        return _core.SWBScenario_SetScenario(self, newname)

    def SetId(self, newid):
        r"""
        SetId(SWBScenario self, int const newid)

        Parameters
        ----------
        newid: int const

        """
        return _core.SWBScenario_SetId(self, newid)

    def SetType(self, newtype):
        r"""
        SetType(SWBScenario self, SWBScenario::scen_t const newtype)

        Parameters
        ----------
        newtype: enum SWBScenario::scen_t const

        """
        return _core.SWBScenario_SetType(self, newtype)

    def SetExprType(self, newtype):
        r"""
        SetExprType(SWBScenario self, SWBScenario::expr_t const newtype)

        Parameters
        ----------
        newtype: enum SWBScenario::expr_t const

        """
        return _core.SWBScenario_SetExprType(self, newtype)

    def SetExpression(self, newexpr):
        r"""
        SetExpression(SWBScenario self, string newexpr)

        Parameters
        ----------
        newexpr: str

        """
        return _core.SWBScenario_SetExpression(self, newexpr)

    def __eq__(self, other):
        r"""
        __eq__(SWBScenario self, SWBScenario other) -> int

        Parameters
        ----------
        other: SWBScenario const &

        """
        return _core.SWBScenario___eq__(self, other)

    def GetCustomName(self):
        r"""GetCustomName(SWBScenario self) -> string"""
        return _core.SWBScenario_GetCustomName(self)
    def __disown__(self):
        self.this.disown()
        _core.disown_SWBScenario(self)
        return weakref.proxy(self)

# Register SWBScenario in _core:
_core.SWBScenario_swigregister(SWBScenario)
SWBScenario.ALL = _core.cvar.SWBScenario_ALL
SWBScenario.TAGGROUP_NAME_SCENARIO = _core.cvar.SWBScenario_TAGGROUP_NAME_SCENARIO

class SWBTreePool(object):
    r"""Proxy of C++ SWBTreePool class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _core.delete_SWBTreePool

    def Lookup(self, *args):
        r"""
        Lookup(SWBTreePool self, int treeId) -> std::shared_ptr< SWBTree >

        Parameters
        ----------
        treeId: int

        Lookup(SWBTreePool self, string project) -> std::shared_ptr< SWBTree >

        Parameters
        ----------
        project: str

        """
        return _core.SWBTreePool_Lookup(self, *args)

    def Size(self):
        r"""Size(SWBTreePool self) -> unsigned int"""
        return _core.SWBTreePool_Size(self)

    def SetCurrentTree(self, *args):
        r"""
        SetCurrentTree(SWBTreePool self, int treeId) -> int

        Parameters
        ----------
        treeId: int

        SetCurrentTree(SWBTreePool self, string project) -> int

        Parameters
        ----------
        project: str

        """
        return _core.SWBTreePool_SetCurrentTree(self, *args)

    def RenameCurrentTree(self, project, newproject):
        r"""
        RenameCurrentTree(SWBTreePool self, string project, string newproject) -> int

        Parameters
        ----------
        project: str
        newproject: str

        """
        return _core.SWBTreePool_RenameCurrentTree(self, project, newproject)

    def SetUndoStackLimit(self, limit):
        r"""
        SetUndoStackLimit(SWBTreePool self, unsigned int limit)

        Parameters
        ----------
        limit: unsigned int

        """
        return _core.SWBTreePool_SetUndoStackLimit(self, limit)

    def GetUndoStackLimit(self):
        r"""GetUndoStackLimit(SWBTreePool self) -> unsigned int"""
        return _core.SWBTreePool_GetUndoStackLimit(self)

    def CurrentTree(self):
        r"""CurrentTree(SWBTreePool self) -> std::shared_ptr< SWBTree > &"""
        return _core.SWBTreePool_CurrentTree(self)

    def New(self, project, interp=None):
        r"""
        New(SWBTreePool self, string project, Tcl_Interp * interp=None) -> int

        Parameters
        ----------
        project: str
        interp: Tcl_Interp *

        """
        return _core.SWBTreePool_New(self, project, interp)

    def DeleteTree(self, project, freedumps=0):
        r"""
        DeleteTree(SWBTreePool self, string project, int freedumps=0) -> int

        Parameters
        ----------
        project: str
        freedumps: int

        """
        return _core.SWBTreePool_DeleteTree(self, project, freedumps)

    def MaxId(self):
        r"""MaxId(SWBTreePool self) -> int"""
        return _core.SWBTreePool_MaxId(self)

    def Dump(self, *args):
        r"""
        Dump(SWBTreePool self, string updatecmd="") -> std::shared_ptr< SWBTree >

        Parameters
        ----------
        updatecmd: str

        """
        return _core.SWBTreePool_Dump(self, *args)

    def UpdateDump(self):
        r"""UpdateDump(SWBTreePool self)"""
        return _core.SWBTreePool_UpdateDump(self)

    def Undo(self):
        r"""Undo(SWBTreePool self) -> int"""
        return _core.SWBTreePool_Undo(self)

    def FreeDumps(self):
        r"""FreeDumps(SWBTreePool self)"""
        return _core.SWBTreePool_FreeDumps(self)

    @staticmethod
    def Inst():
        r"""Inst() -> std::unique_ptr< SWBTreePool > &"""
        return _core.SWBTreePool_Inst()
    def __disown__(self):
        self.this.disown()
        _core.disown_SWBTreePool(self)
        return weakref.proxy(self)

# Register SWBTreePool in _core:
_core.SWBTreePool_swigregister(SWBTreePool)

def SWBTreePool_Inst():
    r"""SWBTreePool_Inst() -> std::unique_ptr< SWBTreePool > &"""
    return _core.SWBTreePool_Inst()

class Tool(object):
    r"""Proxy of C++ Tool class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, toolname):
        r"""
        __init__(Tool self, string toolname) -> Tool

        Parameters
        ----------
        toolname: str

        """
        _core.Tool_swiginit(self, _core.new_Tool(toolname))

    def ToolName(self):
        r"""ToolName(Tool self) -> string"""
        return _core.Tool_ToolName(self)

    def Lock(self):
        r"""Lock(Tool self)"""
        return _core.Tool_Lock(self)

    def Unlock(self):
        r"""Unlock(Tool self)"""
        return _core.Tool_Unlock(self)

    def Locked(self):
        r"""Locked(Tool self) -> bool"""
        return _core.Tool_Locked(self)

    def Set(self, toolname):
        r"""
        Set(Tool self, string toolname)

        Parameters
        ----------
        toolname: str

        """
        return _core.Tool_Set(self, toolname)
    __swig_destroy__ = _core.delete_Tool

# Register Tool in _core:
_core.Tool_swigregister(Tool)

class SWBStep(object):
    r"""Proxy of C++ SWBStep class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(SWBStep self) -> SWBStep
        __init__(SWBStep self, string thetool, StepOutputType stOutputType=OUTPUT_STEP) -> SWBStep

        Parameters
        ----------
        thetool: str
        stOutputType: enum StepOutputType

        """
        if self.__class__ == SWBStep:
            _self = None
        else:
            _self = self
        _core.SWBStep_swiginit(self, _core.new_SWBStep(_self, *args))
    tool = property(_core.SWBStep_tool_get, _core.SWBStep_tool_set, doc=r"""tool : Tool""")
    __swig_destroy__ = _core.delete_SWBStep

    def DeleteAll(self):
        r"""DeleteAll(SWBStep self)"""
        return _core.SWBStep_DeleteAll(self)

    def GetStepType(self):
        r"""GetStepType(SWBStep self) -> StepType"""
        return _core.SWBStep_GetStepType(self)

    def SetOutputType(self, type):
        r"""
        SetOutputType(SWBStep self, StepOutputType type)

        Parameters
        ----------
        type: enum StepOutputType

        """
        return _core.SWBStep_SetOutputType(self, type)

    def SetHashSplit(self, val):
        r"""
        SetHashSplit(SWBStep self, bool val)

        Parameters
        ----------
        val: bool

        """
        return _core.SWBStep_SetHashSplit(self, val)

    def GetHashSplit(self):
        r"""GetHashSplit(SWBStep self) -> bool"""
        return _core.SWBStep_GetHashSplit(self)

    def GetOutputType(self):
        r"""GetOutputType(SWBStep self) -> StepOutputType"""
        return _core.SWBStep_GetOutputType(self)

    def NbNodes(self):
        r"""NbNodes(SWBStep self) -> STEP"""
        return _core.SWBStep_NbNodes(self)

    def GetTool(self):
        r"""GetTool(SWBStep self) -> string"""
        return _core.SWBStep_GetTool(self)

    def SetTool(self, newtool):
        r"""
        SetTool(SWBStep self, string newtool)

        Parameters
        ----------
        newtool: str

        """
        return _core.SWBStep_SetTool(self, newtool)

    def GetNodes(self):
        r"""GetNodes(SWBStep self) -> list_SWBNodesp"""
        return _core.SWBStep_GetNodes(self)

    def PushBackNode(self, _n):
        r"""
        PushBackNode(SWBStep self, std::shared_ptr< SWBNode > const & _n)

        Parameters
        ----------
        _n: std::shared_ptr< SWBNode > const &

        """
        return _core.SWBStep_PushBackNode(self, _n)

    def EraseNode(self, _n):
        r"""
        EraseNode(SWBStep self, ListOfNodes::iterator _n) -> ListOfNodes::iterator

        Parameters
        ----------
        _n: ListOfNodes::iterator

        """
        return _core.SWBStep_EraseNode(self, _n)

    def SetNodes(self, _n):
        r"""
        SetNodes(SWBStep self, list_SWBNodesp _n)

        Parameters
        ----------
        _n: ListOfNodes

        """
        return _core.SWBStep_SetNodes(self, _n)

    def ClearNodes(self):
        r"""ClearNodes(SWBStep self)"""
        return _core.SWBStep_ClearNodes(self)

    def SizeNodes(self):
        r"""SizeNodes(SWBStep self) -> int"""
        return _core.SWBStep_SizeNodes(self)

    def RemoveNode(self, node):
        r"""
        RemoveNode(SWBStep self, std::shared_ptr< SWBNode > const & node)

        Parameters
        ----------
        node: std::shared_ptr< SWBNode > const &

        """
        return _core.SWBStep_RemoveNode(self, node)

    def AddNode(self, node):
        r"""
        AddNode(SWBStep self, std::shared_ptr< SWBNode > const & node)

        Parameters
        ----------
        node: std::shared_ptr< SWBNode > const &

        """
        return _core.SWBStep_AddNode(self, node)

    def StreamType(self, stream):
        r"""
        StreamType(SWBStep self, ostream stream)

        Parameters
        ----------
        stream: std::ostream &

        """
        return _core.SWBStep_StreamType(self, stream)
    def __disown__(self):
        self.this.disown()
        _core.disown_SWBStep(self)
        return weakref.proxy(self)

# Register SWBStep in _core:
_core.SWBStep_swigregister(SWBStep)
SWBStep.FIRST = _core.cvar.SWBStep_FIRST
SWBStep.LAST = _core.cvar.SWBStep_LAST
SWBStep.PREVIOUS = _core.cvar.SWBStep_PREVIOUS
SWBStep.NEXT = _core.cvar.SWBStep_NEXT
SWBStep.DELETE = _core.cvar.SWBStep_DELETE

class SWBToolStep(SWBStep, SWBTagGroupHelper):
    r"""Proxy of C++ SWBToolStep class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(SWBToolStep self, string tool, string dbtool, string cmd="", string other="", StepOutputType out_type=OUTPUT_STEP) -> SWBToolStep

        Parameters
        ----------
        tool: str
        dbtool: str
        cmd: str
        other: str
        out_type: enum StepOutputType

        __init__(SWBToolStep self, SWBToolStep other) -> SWBToolStep

        Parameters
        ----------
        other: SWBToolStep const &

        """
        if self.__class__ == SWBToolStep:
            _self = None
        else:
            _self = self
        _core.SWBToolStep_swiginit(self, _core.new_SWBToolStep(_self, *args))
    __swig_destroy__ = _core.delete_SWBToolStep

    def DeleteAll(self):
        r"""DeleteAll(SWBToolStep self)"""
        return _core.SWBToolStep_DeleteAll(self)

    def GetStepType(self):
        r"""GetStepType(SWBToolStep self) -> StepType"""
        return _core.SWBToolStep_GetStepType(self)

    def GetDBTool(self):
        r"""GetDBTool(SWBToolStep self) -> string"""
        return _core.SWBToolStep_GetDBTool(self)

    def SetDBTool(self, newdbtool):
        r"""
        SetDBTool(SWBToolStep self, string newdbtool)

        Parameters
        ----------
        newdbtool: str

        """
        return _core.SWBToolStep_SetDBTool(self, newdbtool)

    def GetCmdLineOptions(self):
        r"""GetCmdLineOptions(SWBToolStep self) -> string"""
        return _core.SWBToolStep_GetCmdLineOptions(self)

    def SetCmdLineOptions(self, opts):
        r"""
        SetCmdLineOptions(SWBToolStep self, string opts)

        Parameters
        ----------
        opts: str

        """
        return _core.SWBToolStep_SetCmdLineOptions(self, opts)

    def GetComment(self):
        r"""GetComment(SWBToolStep self) -> string"""
        return _core.SWBToolStep_GetComment(self)

    def SetComment(self, comment):
        r"""
        SetComment(SWBToolStep self, string comment)

        Parameters
        ----------
        comment: str

        """
        return _core.SWBToolStep_SetComment(self, comment)

    def SaveToolSpecificInputFile(self, ftype, filename):
        r"""
        SaveToolSpecificInputFile(SWBToolStep self, string ftype, string filename) -> bool

        Parameters
        ----------
        ftype: str
        filename: str

        """
        return _core.SWBToolStep_SaveToolSpecificInputFile(self, ftype, filename)

    def SaveToolSpecificInputFiles(self, stream):
        r"""
        SaveToolSpecificInputFiles(SWBToolStep self, ostream stream) -> int

        Parameters
        ----------
        stream: std::ostream &

        """
        return _core.SWBToolStep_SaveToolSpecificInputFiles(self, stream)

    def GetAllToolSpecificInputFiles(self):
        r"""GetAllToolSpecificInputFiles(SWBToolStep self) -> list_s"""
        return _core.SWBToolStep_GetAllToolSpecificInputFiles(self)

    def GetSpecificInputFiles(self):
        r"""GetSpecificInputFiles(SWBToolStep self) -> map_s_s"""
        return _core.SWBToolStep_GetSpecificInputFiles(self)

    def RemoveToolSpecificInputFile(self, filename):
        r"""
        RemoveToolSpecificInputFile(SWBToolStep self, string filename) -> bool

        Parameters
        ----------
        filename: str

        """
        return _core.SWBToolStep_RemoveToolSpecificInputFile(self, filename)

    def HasToolSpecificInputFiles(self):
        r"""HasToolSpecificInputFiles(SWBToolStep self) -> bool"""
        return _core.SWBToolStep_HasToolSpecificInputFiles(self)

    def GetCustomName(self):
        r"""GetCustomName(SWBToolStep self) -> string"""
        return _core.SWBToolStep_GetCustomName(self)
    def __disown__(self):
        self.this.disown()
        _core.disown_SWBToolStep(self)
        return weakref.proxy(self)

# Register SWBToolStep in _core:
_core.SWBToolStep_swigregister(SWBToolStep)
SWBToolStep.TAGGROUP_NAME_TOOL_STEP = _core.cvar.SWBToolStep_TAGGROUP_NAME_TOOL_STEP

class SWBSplitStep(SWBStep, SWBTagGroupHelper):
    r"""Proxy of C++ SWBSplitStep class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(SWBSplitStep self, string tool, string pname, list_SWBValuesp pvalues, string ProcessStep="", StepOutputType out_type=OUTPUT_STEP) -> SWBSplitStep

        Parameters
        ----------
        tool: str
        pname: str
        pvalues: PValueStdList
        ProcessStep: str
        out_type: enum StepOutputType

        __init__(SWBSplitStep self, SWBSplitStep other) -> SWBSplitStep

        Parameters
        ----------
        other: SWBSplitStep const &

        """
        if self.__class__ == SWBSplitStep:
            _self = None
        else:
            _self = self
        _core.SWBSplitStep_swiginit(self, _core.new_SWBSplitStep(_self, *args))
    __swig_destroy__ = _core.delete_SWBSplitStep

    def DeleteAll(self):
        r"""DeleteAll(SWBSplitStep self)"""
        return _core.SWBSplitStep_DeleteAll(self)

    def GetStepType(self):
        r"""GetStepType(SWBSplitStep self) -> StepType"""
        return _core.SWBSplitStep_GetStepType(self)

    def GetPname(self):
        r"""GetPname(SWBSplitStep self) -> string"""
        return _core.SWBSplitStep_GetPname(self)

    def SetPname(self, newname):
        r"""
        SetPname(SWBSplitStep self, string newname)

        Parameters
        ----------
        newname: str

        """
        return _core.SWBSplitStep_SetPname(self, newname)

    def GetDefValue(self):
        r"""GetDefValue(SWBSplitStep self) -> string"""
        return _core.SWBSplitStep_GetDefValue(self)

    def SetDefValue(self, sval):
        r"""
        SetDefValue(SWBSplitStep self, std::shared_ptr< SWBValue > const & sval)

        Parameters
        ----------
        sval: std::shared_ptr< SWBValue > const &

        """
        return _core.SWBSplitStep_SetDefValue(self, sval)

    def RemoveValue(self, value):
        r"""
        RemoveValue(SWBSplitStep self, string value) -> bool

        Parameters
        ----------
        value: str

        """
        return _core.SWBSplitStep_RemoveValue(self, value)

    def GetParamValues(self):
        r"""GetParamValues(SWBSplitStep self) -> list_SWBValuesp"""
        return _core.SWBSplitStep_GetParamValues(self)

    def GetParamValuesMap(self):
        r"""GetParamValuesMap(SWBSplitStep self) -> PValueMap const"""
        return _core.SWBSplitStep_GetParamValuesMap(self)

    def HasParams(self):
        r"""HasParams(SWBSplitStep self) -> bool"""
        return _core.SWBSplitStep_HasParams(self)

    def SetParamValues(self, pvalues):
        r"""
        SetParamValues(SWBSplitStep self, list_SWBValuesp pvalues)

        Parameters
        ----------
        pvalues: PValueStdList

        """
        return _core.SWBSplitStep_SetParamValues(self, pvalues)

    def NewPValue(self, value):
        r"""
        NewPValue(SWBSplitStep self, string value) -> std::shared_ptr< SWBValue >

        Parameters
        ----------
        value: str

        """
        return _core.SWBSplitStep_NewPValue(self, value)

    def SetProcessName(self, procName):
        r"""
        SetProcessName(SWBSplitStep self, string procName)

        Parameters
        ----------
        procName: str

        """
        return _core.SWBSplitStep_SetProcessName(self, procName)

    def GetProcessName(self):
        r"""GetProcessName(SWBSplitStep self) -> string"""
        return _core.SWBSplitStep_GetProcessName(self)

    def Exists(self, value):
        r"""
        Exists(SWBSplitStep self, string value) -> int

        Parameters
        ----------
        value: str

        """
        return _core.SWBSplitStep_Exists(self, value)

    def SpecifyValueRange(self, lower, upper):
        r"""
        SpecifyValueRange(SWBSplitStep self, SWBValue lower, SWBValue upper) -> bool

        Parameters
        ----------
        lower: SWBValue
        upper: SWBValue

        """
        return _core.SWBSplitStep_SpecifyValueRange(self, lower, upper)

    def GetRange(self):
        r"""GetRange(SWBSplitStep self) -> SWBValueRange"""
        return _core.SWBSplitStep_GetRange(self)

    def IsInRange(self, v):
        r"""
        IsInRange(SWBSplitStep self, SWBValue v) -> bool

        Parameters
        ----------
        v: SWBValue

        """
        return _core.SWBSplitStep_IsInRange(self, v)

    def EnableRange(self):
        r"""EnableRange(SWBSplitStep self)"""
        return _core.SWBSplitStep_EnableRange(self)

    def DisableRange(self):
        r"""DisableRange(SWBSplitStep self)"""
        return _core.SWBSplitStep_DisableRange(self)

    def IsRangeEnabled(self):
        r"""IsRangeEnabled(SWBSplitStep self) -> bool"""
        return _core.SWBSplitStep_IsRangeEnabled(self)

    def GetCustomName(self):
        r"""GetCustomName(SWBSplitStep self) -> string"""
        return _core.SWBSplitStep_GetCustomName(self)
    def __disown__(self):
        self.this.disown()
        _core.disown_SWBSplitStep(self)
        return weakref.proxy(self)

# Register SWBSplitStep in _core:
_core.SWBSplitStep_swigregister(SWBSplitStep)
SWBSplitStep.TAGGROUP_NAME_SPLIT_STEP = _core.cvar.SWBSplitStep_TAGGROUP_NAME_SPLIT_STEP

class SWBValue(SWBTagGroupHelper):
    r"""Proxy of C++ SWBValue class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(SWBValue self, boost::any const val) -> SWBValue

        Parameters
        ----------
        val: boost::any const

        __init__(SWBValue self, char * val) -> SWBValue

        Parameters
        ----------
        val: char *

        __init__(SWBValue self, SWBValue other) -> SWBValue

        Parameters
        ----------
        other: SWBValue const &

        __init__(SWBValue self) -> SWBValue

        Parameters
        ----------
        self: object

        """
        if self.__class__ == SWBValue:
            _self = None
        else:
            _self = self
        _core.SWBValue_swiginit(self, _core.new_SWBValue(_self, *args))
    __swig_destroy__ = _core.delete_SWBValue

    def SetValue(self, *args):
        r"""
        SetValue(SWBValue self, boost::any val)

        Parameters
        ----------
        val: boost::any

        SetValue(SWBValue self, char * val)

        Parameters
        ----------
        val: char *

        """
        return _core.SWBValue_SetValue(self, *args)

    def GetValue(self):
        r"""GetValue(SWBValue self) -> boost::any"""
        return _core.SWBValue_GetValue(self)

    def ApplyFormatType(self, *args):
        r"""
        ApplyFormatType(SWBValue self, FormatType type) -> string

        Parameters
        ----------
        type: enum FormatType

        ApplyFormatType(SWBValue self, string type) -> string

        Parameters
        ----------
        type: str

        """
        return _core.SWBValue_ApplyFormatType(self, *args)

    def GetValueAsInteger(self):
        r"""GetValueAsInteger(SWBValue self) -> int"""
        return _core.SWBValue_GetValueAsInteger(self)

    def GetValueAsDouble(self):
        r"""GetValueAsDouble(SWBValue self) -> double"""
        return _core.SWBValue_GetValueAsDouble(self)

    def GetValueAsString(self):
        r"""GetValueAsString(SWBValue self) -> string"""
        return _core.SWBValue_GetValueAsString(self)

    def GetCacheName(self):
        r"""GetCacheName(SWBValue self) -> string"""
        return _core.SWBValue_GetCacheName(self)

    def GetValueAsChar(self):
        r"""GetValueAsChar(SWBValue self) -> char"""
        return _core.SWBValue_GetValueAsChar(self)

    def IsInteger(self):
        r"""IsInteger(SWBValue self) -> bool"""
        return _core.SWBValue_IsInteger(self)

    def IsDouble(self):
        r"""IsDouble(SWBValue self) -> bool"""
        return _core.SWBValue_IsDouble(self)

    def IsString(self):
        r"""IsString(SWBValue self) -> bool"""
        return _core.SWBValue_IsString(self)

    def IsChar(self):
        r"""IsChar(SWBValue self) -> bool"""
        return _core.SWBValue_IsChar(self)

    def IsValueNumeric(self):
        r"""IsValueNumeric(SWBValue self) -> bool"""
        return _core.SWBValue_IsValueNumeric(self)

    def GetCustomName(self):
        r"""GetCustomName(SWBValue self) -> string"""
        return _core.SWBValue_GetCustomName(self)

    def IsSame(self, v):
        r"""
        IsSame(SWBValue self, SWBValue v) -> bool

        Parameters
        ----------
        v: SWBValue &

        """
        return _core.SWBValue_IsSame(self, v)
    def __disown__(self):
        self.this.disown()
        _core.disown_SWBValue(self)
        return weakref.proxy(self)

# Register SWBValue in _core:
_core.SWBValue_swigregister(SWBValue)
SWBValue.TAGGROUP_NAME_VALUE = _core.cvar.SWBValue_TAGGROUP_NAME_VALUE

class SWBValueRange(SWBTagGroupHelper):
    r"""Proxy of C++ SWBValueRange class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(SWBValueRange self, SWBValue low, SWBValue up) -> SWBValueRange

        Parameters
        ----------
        low: SWBValue
        up: SWBValue

        __init__(SWBValueRange self) -> SWBValueRange
        __init__(SWBValueRange self, SWBValue val, RangeType t) -> SWBValueRange

        Parameters
        ----------
        val: SWBValue
        t: enum RangeType

        __init__(SWBValueRange self, SWBValueRange other) -> SWBValueRange

        Parameters
        ----------
        other: SWBValueRange const &

        """
        if self.__class__ == SWBValueRange:
            _self = None
        else:
            _self = self
        _core.SWBValueRange_swiginit(self, _core.new_SWBValueRange(_self, *args))
    __swig_destroy__ = _core.delete_SWBValueRange

    def SetUpper(self, NewUpper):
        r"""
        SetUpper(SWBValueRange self, SWBValue NewUpper)

        Parameters
        ----------
        NewUpper: SWBValue

        """
        return _core.SWBValueRange_SetUpper(self, NewUpper)

    def GetUpper(self):
        r"""GetUpper(SWBValueRange self) -> SWBValue"""
        return _core.SWBValueRange_GetUpper(self)

    def SetLower(self, NewLower):
        r"""
        SetLower(SWBValueRange self, SWBValue NewLower)

        Parameters
        ----------
        NewLower: SWBValue

        """
        return _core.SWBValueRange_SetLower(self, NewLower)

    def GetLower(self):
        r"""GetLower(SWBValueRange self) -> SWBValue"""
        return _core.SWBValueRange_GetLower(self)

    def IsInRange(self, value):
        r"""
        IsInRange(SWBValueRange self, SWBValue value) -> bool

        Parameters
        ----------
        value: SWBValue

        """
        return _core.SWBValueRange_IsInRange(self, value)

    def GetRangeType(self):
        r"""GetRangeType(SWBValueRange self) -> RangeType"""
        return _core.SWBValueRange_GetRangeType(self)

    def SetRangeType(self, t):
        r"""
        SetRangeType(SWBValueRange self, RangeType t)

        Parameters
        ----------
        t: enum RangeType

        """
        return _core.SWBValueRange_SetRangeType(self, t)

    def GetCustomName(self):
        r"""GetCustomName(SWBValueRange self) -> string"""
        return _core.SWBValueRange_GetCustomName(self)
    def __disown__(self):
        self.this.disown()
        _core.disown_SWBValueRange(self)
        return weakref.proxy(self)

# Register SWBValueRange in _core:
_core.SWBValueRange_swigregister(SWBValueRange)
SWBValueRange.TAGGROUP_NAME_VALUERANGE = _core.cvar.SWBValueRange_TAGGROUP_NAME_VALUERANGE

class SWBNodeVariableValue(SWBValue):
    r"""Proxy of C++ SWBNodeVariableValue class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _core.delete_SWBNodeVariableValue

    def SetType(self, tp):
        r"""
        SetType(SWBNodeVariableValue self, VarType tp)

        Parameters
        ----------
        tp: enum VarType

        """
        return _core.SWBNodeVariableValue_SetType(self, tp)

    def GetType(self):
        r"""GetType(SWBNodeVariableValue self) -> VarType"""
        return _core.SWBNodeVariableValue_GetType(self)

    def SetDate(self, d):
        r"""
        SetDate(SWBNodeVariableValue self, DATE d)

        Parameters
        ----------
        d: DATE

        """
        return _core.SWBNodeVariableValue_SetDate(self, d)

    def GetDate(self):
        r"""GetDate(SWBNodeVariableValue self) -> DATE"""
        return _core.SWBNodeVariableValue_GetDate(self)

    def SetHidden(self, flag):
        r"""
        SetHidden(SWBNodeVariableValue self, bool flag)

        Parameters
        ----------
        flag: bool

        """
        return _core.SWBNodeVariableValue_SetHidden(self, flag)

    def GetHidden(self):
        r"""GetHidden(SWBNodeVariableValue self) -> bool"""
        return _core.SWBNodeVariableValue_GetHidden(self)

    def __init__(self, *args):
        r"""
        __init__(SWBNodeVariableValue self, boost::any const Val, VarType Type=ANY, DATE Date=0, bool Hidden=False) -> SWBNodeVariableValue

        Parameters
        ----------
        Val: boost::any const
        Type: enum VarType
        Date: DATE
        Hidden: bool

        __init__(SWBNodeVariableValue self) -> SWBNodeVariableValue
        __init__(SWBNodeVariableValue self, SWBNodeVariableValue arg2) -> SWBNodeVariableValue

        Parameters
        ----------
        arg2: SWBNodeVariableValue const &

        """
        if self.__class__ == SWBNodeVariableValue:
            _self = None
        else:
            _self = self
        _core.SWBNodeVariableValue_swiginit(self, _core.new_SWBNodeVariableValue(_self, *args))
    def __disown__(self):
        self.this.disown()
        _core.disown_SWBNodeVariableValue(self)
        return weakref.proxy(self)

# Register SWBNodeVariableValue in _core:
_core.SWBNodeVariableValue_swigregister(SWBNodeVariableValue)

class SWBFormula(SWBValue):
    r"""Proxy of C++ SWBFormula class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _core.delete_SWBFormula

    def __init__(self, *args):
        r"""
        __init__(SWBFormula self, boost::any const formula="") -> SWBFormula

        Parameters
        ----------
        formula: boost::any const

        __init__(SWBFormula self, SWBFormula other) -> SWBFormula

        Parameters
        ----------
        other: SWBFormula const &

        """
        if self.__class__ == SWBFormula:
            _self = None
        else:
            _self = self
        _core.SWBFormula_swiginit(self, _core.new_SWBFormula(_self, *args))

    def GetFormula(self):
        r"""GetFormula(SWBFormula self) -> string"""
        return _core.SWBFormula_GetFormula(self)

    def SetFormula(self, formula):
        r"""
        SetFormula(SWBFormula self, string formula)

        Parameters
        ----------
        formula: str

        """
        return _core.SWBFormula_SetFormula(self, formula)

    def GetParametersInFormula(self):
        r"""GetParametersInFormula(SWBFormula self) -> list_s"""
        return _core.SWBFormula_GetParametersInFormula(self)

    def Evaluate(self, interp, ParsAndVals):
        r"""
        Evaluate(SWBFormula self, Tcl_Interp * interp, MapStringToSWBValue & ParsAndVals) -> SWBValue

        Parameters
        ----------
        interp: Tcl_Interp *
        ParsAndVals: MapStringToSWBValue &

        """
        return _core.SWBFormula_Evaluate(self, interp, ParsAndVals)

    def IsValueAFormula(self):
        r"""IsValueAFormula(SWBFormula self) -> bool"""
        return _core.SWBFormula_IsValueAFormula(self)
    def __disown__(self):
        self.this.disown()
        _core.disown_SWBFormula(self)
        return weakref.proxy(self)

# Register SWBFormula in _core:
_core.SWBFormula_swigregister(SWBFormula)

class SWBGlobalVariableValue(SWBFormula):
    r"""Proxy of C++ SWBGlobalVariableValue class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, Val):
        r"""
        __init__(SWBGlobalVariableValue self, boost::any const Val) -> SWBGlobalVariableValue

        Parameters
        ----------
        Val: boost::any const

        """
        if self.__class__ == SWBGlobalVariableValue:
            _self = None
        else:
            _self = self
        _core.SWBGlobalVariableValue_swiginit(self, _core.new_SWBGlobalVariableValue(_self, Val))
    __swig_destroy__ = _core.delete_SWBGlobalVariableValue

    def GetFormulaAsString(self):
        r"""GetFormulaAsString(SWBGlobalVariableValue self) -> string"""
        return _core.SWBGlobalVariableValue_GetFormulaAsString(self)
    def __disown__(self):
        self.this.disown()
        _core.disown_SWBGlobalVariableValue(self)
        return weakref.proxy(self)

# Register SWBGlobalVariableValue in _core:
_core.SWBGlobalVariableValue_swigregister(SWBGlobalVariableValue)
NOVALUE = cvar.NOVALUE

class SWBVariable(SWBTagGroupHelper):
    r"""Proxy of C++ SWBVariable class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(SWBVariable self, string Name, FormatType const DefFormat, std::shared_ptr< SWBGlobalVariableValue > & DefVal, bool UserCreated=False) -> SWBVariable

        Parameters
        ----------
        Name: str
        DefFormat: enum FormatType const
        DefVal: std::shared_ptr< SWBGlobalVariableValue > &
        UserCreated: bool

        __init__(SWBVariable self) -> SWBVariable

        Parameters
        ----------
        self: object

        """
        if self.__class__ == SWBVariable:
            _self = None
        else:
            _self = self
        _core.SWBVariable_swiginit(self, _core.new_SWBVariable(_self, *args))
    __swig_destroy__ = _core.delete_SWBVariable

    def GetName(self):
        r"""GetName(SWBVariable self) -> string"""
        return _core.SWBVariable_GetName(self)

    def SetName(self, varname):
        r"""
        SetName(SWBVariable self, string varname)

        Parameters
        ----------
        varname: str

        """
        return _core.SWBVariable_SetName(self, varname)

    def SetDefaultValue(self, val):
        r"""
        SetDefaultValue(SWBVariable self, std::shared_ptr< SWBGlobalVariableValue > & val)

        Parameters
        ----------
        val: std::shared_ptr< SWBGlobalVariableValue > &

        """
        return _core.SWBVariable_SetDefaultValue(self, val)

    def GetDefaultValue(self):
        r"""GetDefaultValue(SWBVariable self) -> SWBGlobalVariableValue"""
        return _core.SWBVariable_GetDefaultValue(self)

    def SetDefaultFormatType(self, format):
        r"""
        SetDefaultFormatType(SWBVariable self, FormatType format)

        Parameters
        ----------
        format: enum FormatType

        """
        return _core.SWBVariable_SetDefaultFormatType(self, format)

    def GetDefaultFormatType(self):
        r"""GetDefaultFormatType(SWBVariable self) -> FormatType"""
        return _core.SWBVariable_GetDefaultFormatType(self)

    def SpecifyRange(self, *args):
        r"""
        SpecifyRange(SWBVariable self, SWBValue lower, SWBValue upper) -> bool

        Parameters
        ----------
        lower: SWBValue
        upper: SWBValue

        SpecifyRange(SWBVariable self, SWBValue value, RangeType t) -> bool

        Parameters
        ----------
        value: SWBValue
        t: enum RangeType

        """
        return _core.SWBVariable_SpecifyRange(self, *args)

    def GetRange(self):
        r"""GetRange(SWBVariable self) -> SWBValueRange"""
        return _core.SWBVariable_GetRange(self)

    def EnableRange(self):
        r"""EnableRange(SWBVariable self)"""
        return _core.SWBVariable_EnableRange(self)

    def DisableRange(self):
        r"""DisableRange(SWBVariable self)"""
        return _core.SWBVariable_DisableRange(self)

    def IsRangeEnabled(self):
        r"""IsRangeEnabled(SWBVariable self) -> bool"""
        return _core.SWBVariable_IsRangeEnabled(self)

    def AddExtractedVariableValue(self, nodeId, value):
        r"""
        AddExtractedVariableValue(SWBVariable self, int nodeId, std::shared_ptr< SWBNodeVariableValue > value)

        Parameters
        ----------
        nodeId: int
        value: std::shared_ptr< SWBNodeVariableValue >

        """
        return _core.SWBVariable_AddExtractedVariableValue(self, nodeId, value)

    def GetExtractedVariableValue(self, nodeId):
        r"""
        GetExtractedVariableValue(SWBVariable self, int nodeId) -> SWBNodeVariableValue

        Parameters
        ----------
        nodeId: int

        """
        return _core.SWBVariable_GetExtractedVariableValue(self, nodeId)

    def DeleteExtractedVariableValue(self, nodeId):
        r"""
        DeleteExtractedVariableValue(SWBVariable self, int nodeId)

        Parameters
        ----------
        nodeId: int

        """
        return _core.SWBVariable_DeleteExtractedVariableValue(self, nodeId)

    def ContainsExtractedVariableValue(self, nodeId):
        r"""
        ContainsExtractedVariableValue(SWBVariable self, int nodeId) -> bool

        Parameters
        ----------
        nodeId: int

        """
        return _core.SWBVariable_ContainsExtractedVariableValue(self, nodeId)

    def GetAllNodeNumbersWithExtractedVariableValues(self):
        r"""GetAllNodeNumbersWithExtractedVariableValues(SWBVariable self) -> list_NKEY"""
        return _core.SWBVariable_GetAllNodeNumbersWithExtractedVariableValues(self)

    def AddSetVariableValue(self, nodeId, value):
        r"""
        AddSetVariableValue(SWBVariable self, int nodeId, std::shared_ptr< SWBNodeVariableValue > value)

        Parameters
        ----------
        nodeId: int
        value: std::shared_ptr< SWBNodeVariableValue >

        """
        return _core.SWBVariable_AddSetVariableValue(self, nodeId, value)

    def AddVariableValue(self, nodeId, value, type):
        r"""
        AddVariableValue(SWBVariable self, int nodeId, std::shared_ptr< SWBNodeVariableValue > value, VarType type)

        Parameters
        ----------
        nodeId: int
        value: std::shared_ptr< SWBNodeVariableValue >
        type: enum VarType

        """
        return _core.SWBVariable_AddVariableValue(self, nodeId, value, type)

    def GetSetVariableValue(self, nodeId):
        r"""
        GetSetVariableValue(SWBVariable self, int nodeId) -> SWBNodeVariableValue

        Parameters
        ----------
        nodeId: int

        """
        return _core.SWBVariable_GetSetVariableValue(self, nodeId)

    def DeleteSetVariableValue(self, nodeId):
        r"""
        DeleteSetVariableValue(SWBVariable self, int nodeId)

        Parameters
        ----------
        nodeId: int

        """
        return _core.SWBVariable_DeleteSetVariableValue(self, nodeId)

    def ContainsSetVariableValue(self, nodeId):
        r"""
        ContainsSetVariableValue(SWBVariable self, int const & nodeId) -> bool

        Parameters
        ----------
        nodeId: int const &

        """
        return _core.SWBVariable_ContainsSetVariableValue(self, nodeId)

    def GetAllNodeNumbersWithSetVariableValues(self):
        r"""GetAllNodeNumbersWithSetVariableValues(SWBVariable self) -> list_NKEY"""
        return _core.SWBVariable_GetAllNodeNumbersWithSetVariableValues(self)

    def AddDefinedVariableValue(self, nodeId, value):
        r"""
        AddDefinedVariableValue(SWBVariable self, int nodeId, std::shared_ptr< SWBNodeVariableValue > value)

        Parameters
        ----------
        nodeId: int
        value: std::shared_ptr< SWBNodeVariableValue >

        """
        return _core.SWBVariable_AddDefinedVariableValue(self, nodeId, value)

    def DeleteDefinedVariableValue(self, nodeId):
        r"""
        DeleteDefinedVariableValue(SWBVariable self, int nodeId)

        Parameters
        ----------
        nodeId: int

        """
        return _core.SWBVariable_DeleteDefinedVariableValue(self, nodeId)

    def GetDefinedVariableValue(self, nodeId):
        r"""
        GetDefinedVariableValue(SWBVariable self, int nodeId) -> SWBNodeVariableValue

        Parameters
        ----------
        nodeId: int

        """
        return _core.SWBVariable_GetDefinedVariableValue(self, nodeId)

    def GetVariableValue(self, nodeId, type):
        r"""
        GetVariableValue(SWBVariable self, int nodeId, VarType type) -> SWBNodeVariableValue

        Parameters
        ----------
        nodeId: int
        type: enum VarType

        """
        return _core.SWBVariable_GetVariableValue(self, nodeId, type)

    def ContainsDefinedVariableValue(self, nodeId):
        r"""
        ContainsDefinedVariableValue(SWBVariable self, int nodeId) -> bool

        Parameters
        ----------
        nodeId: int

        """
        return _core.SWBVariable_ContainsDefinedVariableValue(self, nodeId)

    def ContainsVariableValue(self, nodeId, type):
        r"""
        ContainsVariableValue(SWBVariable self, int nodeId, VarType type) -> bool

        Parameters
        ----------
        nodeId: int
        type: enum VarType

        """
        return _core.SWBVariable_ContainsVariableValue(self, nodeId, type)

    def GetAllNodeNumbersWithDefinedVariableValues(self):
        r"""GetAllNodeNumbersWithDefinedVariableValues(SWBVariable self) -> list_NKEY"""
        return _core.SWBVariable_GetAllNodeNumbersWithDefinedVariableValues(self)

    def IsVariableUserDefined(self):
        r"""IsVariableUserDefined(SWBVariable self) -> bool"""
        return _core.SWBVariable_IsVariableUserDefined(self)

    def SetVariableAsUserDefined(self):
        r"""SetVariableAsUserDefined(SWBVariable self)"""
        return _core.SWBVariable_SetVariableAsUserDefined(self)

    def SetVariableAsSystemDefined(self):
        r"""SetVariableAsSystemDefined(SWBVariable self)"""
        return _core.SWBVariable_SetVariableAsSystemDefined(self)

    def SetUserDefinedFormat(self, format):
        r"""
        SetUserDefinedFormat(SWBVariable self, string format)

        Parameters
        ----------
        format: str

        """
        return _core.SWBVariable_SetUserDefinedFormat(self, format)

    def GetUserDefinedFormat(self):
        r"""GetUserDefinedFormat(SWBVariable self) -> string"""
        return _core.SWBVariable_GetUserDefinedFormat(self)

    def Evaluate(self, interp, ParsAndVals):
        r"""
        Evaluate(SWBVariable self, Tcl_Interp * interp, MapStringToSWBValue & ParsAndVals) -> SWBValue

        Parameters
        ----------
        interp: Tcl_Interp *
        ParsAndVals: MapStringToSWBValue &

        """
        return _core.SWBVariable_Evaluate(self, interp, ParsAndVals)

    def GetParametersInFormula(self):
        r"""GetParametersInFormula(SWBVariable self) -> list_s"""
        return _core.SWBVariable_GetParametersInFormula(self)

    def GetCustomName(self):
        r"""GetCustomName(SWBVariable self) -> string"""
        return _core.SWBVariable_GetCustomName(self)
    def __disown__(self):
        self.this.disown()
        _core.disown_SWBVariable(self)
        return weakref.proxy(self)

# Register SWBVariable in _core:
_core.SWBVariable_swigregister(SWBVariable)

class HasSWBVariableName(object):
    r"""Proxy of C++ HasSWBVariableName class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, n):
        r"""
        __init__(HasSWBVariableName self, string n) -> HasSWBVariableName

        Parameters
        ----------
        n: str

        """
        _core.HasSWBVariableName_swiginit(self, _core.new_HasSWBVariableName(n))

    def __call__(self, var):
        r"""
        __call__(HasSWBVariableName self, std::shared_ptr< SWBVariable > const & var) -> bool

        Parameters
        ----------
        var: std::shared_ptr< SWBVariable > const &

        """
        return _core.HasSWBVariableName___call__(self, var)
    name = property(_core.HasSWBVariableName_name_get, doc=r"""name : q(const).std::string""")
    __swig_destroy__ = _core.delete_HasSWBVariableName

# Register HasSWBVariableName in _core:
_core.HasSWBVariableName_swigregister(HasSWBVariableName)

class SWBClientInfo(object):
    r"""Proxy of C++ SWBClientInfo class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(SWBClientInfo self, string host="", string user="", string pid="", SWBClientType type=UNDEFINED, SWBAPI version=UNDEFINED) -> SWBClientInfo

        Parameters
        ----------
        host: str
        user: str
        pid: str
        type: enum SWBClientType
        version: enum SWBAPI

        """
        if self.__class__ == SWBClientInfo:
            _self = None
        else:
            _self = self
        _core.SWBClientInfo_swiginit(self, _core.new_SWBClientInfo(_self, *args))
    __swig_destroy__ = _core.delete_SWBClientInfo
    def __disown__(self):
        self.this.disown()
        _core.disown_SWBClientInfo(self)
        return weakref.proxy(self)

# Register SWBClientInfo in _core:
_core.SWBClientInfo_swigregister(SWBClientInfo)

class HasSWBClientInfo(object):
    r"""Proxy of C++ HasSWBClientInfo class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __call__(self, clientInfo):
        r"""
        __call__(HasSWBClientInfo self, std::shared_ptr< SWBClientInfo > const & clientInfo) -> bool

        Parameters
        ----------
        clientInfo: std::shared_ptr< SWBClientInfo > const &

        """
        return _core.HasSWBClientInfo___call__(self, clientInfo)

    def __init__(self, clientInfo):
        r"""
        __init__(HasSWBClientInfo self, SWBClientInfo clientInfo) -> HasSWBClientInfo

        Parameters
        ----------
        clientInfo: SWBClientInfo const &

        """
        _core.HasSWBClientInfo_swiginit(self, _core.new_HasSWBClientInfo(clientInfo))
    __swig_destroy__ = _core.delete_HasSWBClientInfo

# Register HasSWBClientInfo in _core:
_core.HasSWBClientInfo_swigregister(HasSWBClientInfo)

class SWBRuntimeInfo(object):
    r"""Proxy of C++ SWBRuntimeInfo class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(SWBRuntimeInfo self) -> SWBRuntimeInfo
        __init__(SWBRuntimeInfo self, string host, string port, string pid) -> SWBRuntimeInfo

        Parameters
        ----------
        host: str
        port: str
        pid: str

        """
        if self.__class__ == SWBRuntimeInfo:
            _self = None
        else:
            _self = self
        _core.SWBRuntimeInfo_swiginit(self, _core.new_SWBRuntimeInfo(_self, *args))
    __swig_destroy__ = _core.delete_SWBRuntimeInfo

    def SetMongodbHost(self, strHost):
        r"""
        SetMongodbHost(SWBRuntimeInfo self, string strHost)

        Parameters
        ----------
        strHost: str

        """
        return _core.SWBRuntimeInfo_SetMongodbHost(self, strHost)

    def SetMongodbPort(self, strPort):
        r"""
        SetMongodbPort(SWBRuntimeInfo self, string strPort)

        Parameters
        ----------
        strPort: str

        """
        return _core.SWBRuntimeInfo_SetMongodbPort(self, strPort)

    def SetMongodbPid(self, strPID):
        r"""
        SetMongodbPid(SWBRuntimeInfo self, string strPID)

        Parameters
        ----------
        strPID: str

        """
        return _core.SWBRuntimeInfo_SetMongodbPid(self, strPID)

    def GetMongodbHost(self):
        r"""GetMongodbHost(SWBRuntimeInfo self) -> string"""
        return _core.SWBRuntimeInfo_GetMongodbHost(self)

    def GetMongodbPort(self):
        r"""GetMongodbPort(SWBRuntimeInfo self) -> string"""
        return _core.SWBRuntimeInfo_GetMongodbPort(self)

    def GetMongodbPid(self):
        r"""GetMongodbPid(SWBRuntimeInfo self) -> string"""
        return _core.SWBRuntimeInfo_GetMongodbPid(self)

    def AddClient(self, client):
        r"""
        AddClient(SWBRuntimeInfo self, SWBClientInfo client)

        Parameters
        ----------
        client: SWBClientInfo

        """
        return _core.SWBRuntimeInfo_AddClient(self, client)

    def RemoveClient(self, client):
        r"""
        RemoveClient(SWBRuntimeInfo self, SWBClientInfo client)

        Parameters
        ----------
        client: SWBClientInfo

        """
        return _core.SWBRuntimeInfo_RemoveClient(self, client)
    def __disown__(self):
        self.this.disown()
        _core.disown_SWBRuntimeInfo(self)
        return weakref.proxy(self)

# Register SWBRuntimeInfo in _core:
_core.SWBRuntimeInfo_swigregister(SWBRuntimeInfo)

class SWBProjectMetadata(SWBTagGroupHelper):
    r"""Proxy of C++ SWBProjectMetadata class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(SWBProjectMetadata self, string project_path) -> SWBProjectMetadata

        Parameters
        ----------
        project_path: str

        __init__(SWBProjectMetadata self, SWBProjectMetadata project) -> SWBProjectMetadata

        Parameters
        ----------
        project: SWBProjectMetadata const &

        """
        if self.__class__ == SWBProjectMetadata:
            _self = None
        else:
            _self = self
        _core.SWBProjectMetadata_swiginit(self, _core.new_SWBProjectMetadata(_self, *args))
    __swig_destroy__ = _core.delete_SWBProjectMetadata

    def SetOrganizationType(self, type):
        r"""
        SetOrganizationType(SWBProjectMetadata self, SWBOrganizationType type)

        Parameters
        ----------
        type: enum SWBOrganizationType

        """
        return _core.SWBProjectMetadata_SetOrganizationType(self, type)

    def SetLocked(self, bLocked):
        r"""
        SetLocked(SWBProjectMetadata self, bool bLocked)

        Parameters
        ----------
        bLocked: bool

        """
        return _core.SWBProjectMetadata_SetLocked(self, bLocked)

    def SetLinkedInputFiles(self, bLinkedInputFiles):
        r"""
        SetLinkedInputFiles(SWBProjectMetadata self, bool bLinkedInputFiles)

        Parameters
        ----------
        bLinkedInputFiles: bool

        """
        return _core.SWBProjectMetadata_SetLinkedInputFiles(self, bLinkedInputFiles)

    def SetStatus(self, strStatus):
        r"""
        SetStatus(SWBProjectMetadata self, string strStatus)

        Parameters
        ----------
        strStatus: str

        """
        return _core.SWBProjectMetadata_SetStatus(self, strStatus)

    def SetRuntimeInfo(self, info):
        r"""
        SetRuntimeInfo(SWBProjectMetadata self, SWBRuntimeInfo info)

        Parameters
        ----------
        info: SWBRuntimeInfo

        """
        return _core.SWBProjectMetadata_SetRuntimeInfo(self, info)

    def GetOrganizationType(self):
        r"""GetOrganizationType(SWBProjectMetadata self) -> SWBOrganizationType"""
        return _core.SWBProjectMetadata_GetOrganizationType(self)

    def IsTraditional(self):
        r"""IsTraditional(SWBProjectMetadata self) -> bool"""
        return _core.SWBProjectMetadata_IsTraditional(self)

    def IsHierarchical(self):
        r"""IsHierarchical(SWBProjectMetadata self) -> bool"""
        return _core.SWBProjectMetadata_IsHierarchical(self)

    def GetLocked(self):
        r"""GetLocked(SWBProjectMetadata self) -> bool"""
        return _core.SWBProjectMetadata_GetLocked(self)

    def GetLinkedInputFiles(self):
        r"""GetLinkedInputFiles(SWBProjectMetadata self) -> bool"""
        return _core.SWBProjectMetadata_GetLinkedInputFiles(self)

    def GetStatus(self):
        r"""GetStatus(SWBProjectMetadata self) -> STATE"""
        return _core.SWBProjectMetadata_GetStatus(self)

    def GetRuntimeInfo(self):
        r"""GetRuntimeInfo(SWBProjectMetadata self) -> SWBRuntimeInfo"""
        return _core.SWBProjectMetadata_GetRuntimeInfo(self)

    def GetProjectPath(self):
        r"""GetProjectPath(SWBProjectMetadata self) -> string"""
        return _core.SWBProjectMetadata_GetProjectPath(self)
    def __disown__(self):
        self.this.disown()
        _core.disown_SWBProjectMetadata(self)
        return weakref.proxy(self)

# Register SWBProjectMetadata in _core:
_core.SWBProjectMetadata_swigregister(SWBProjectMetadata)
SWBProjectMetadata.TAGGROUP_NAME_PROJECT_METADATA = _core.cvar.SWBProjectMetadata_TAGGROUP_NAME_PROJECT_METADATA

class SWBTree(SWBTagGroupHelper):
    r"""Proxy of C++ SWBTree class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, project, id=1, interp=None):
        r"""
        __init__(SWBTree self, string project, int id=1, Tcl_Interp * interp=None) -> SWBTree

        Parameters
        ----------
        project: str
        id: int
        interp: Tcl_Interp *

        """
        if self.__class__ == SWBTree:
            _self = None
        else:
            _self = self
        _core.SWBTree_swiginit(self, _core.new_SWBTree(_self, project, id, interp))
    __swig_destroy__ = _core.delete_SWBTree

    def FreeTree(self):
        r"""FreeTree(SWBTree self)"""
        return _core.SWBTree_FreeTree(self)

    def Clone(self, *args):
        r"""
        Clone(SWBTree self, std::shared_ptr< SWBTree > const & other, string updatecmd="") -> int

        Parameters
        ----------
        other: std::shared_ptr< SWBTree > const &
        updatecmd: str

        """
        return _core.SWBTree_Clone(self, *args)

    def CloneNode(self, *args):
        r"""
        CloneNode(SWBTree self, std::shared_ptr< SWBNode > const & node, std::shared_ptr< SWBNode > const & dad, string updatecmd="") -> std::shared_ptr< SWBNode >

        Parameters
        ----------
        node: std::shared_ptr< SWBNode > const &
        dad: std::shared_ptr< SWBNode > const &
        updatecmd: str

        """
        return _core.SWBTree_CloneNode(self, *args)

    def Id(self):
        r"""Id(SWBTree self) -> int"""
        return _core.SWBTree_Id(self)

    def DumpId(self):
        r"""DumpId(SWBTree self) -> int"""
        return _core.SWBTree_DumpId(self)

    def Pathname(self):
        r"""Pathname(SWBTree self) -> string"""
        return _core.SWBTree_Pathname(self)

    def VarsPathname(self):
        r"""VarsPathname(SWBTree self) -> string"""
        return _core.SWBTree_VarsPathname(self)

    def Project(self):
        r"""Project(SWBTree self) -> string"""
        return _core.SWBTree_Project(self)

    def GetDOETable(self, scenario):
        r"""
        GetDOETable(SWBTree self, string scenario) -> string

        Parameters
        ----------
        scenario: str

        """
        return _core.SWBTree_GetDOETable(self, scenario)

    def GetNextKey(self):
        r"""GetNextKey(SWBTree self) -> NKEY"""
        return _core.SWBTree_GetNextKey(self)

    def GetAdjacentToolAndStep(self, step, dir):
        r"""
        GetAdjacentToolAndStep(SWBTree self, STEP & step, int dir) -> string

        Parameters
        ----------
        step: STEP &
        dir: int

        """
        return _core.SWBTree_GetAdjacentToolAndStep(self, step, dir)

    def CleanNodeFilesRecursive(self, nodes, tool, initialCall):
        r"""
        CleanNodeFilesRecursive(SWBTree self, list_SWBNodesp nodes, string tool, bool initialCall) -> list_NKEY

        Parameters
        ----------
        nodes: ListOfNodes
        tool: str
        initialCall: bool

        """
        return _core.SWBTree_CleanNodeFilesRecursive(self, nodes, tool, initialCall)

    def Root(self):
        r"""Root(SWBTree self) -> NKEY"""
        return _core.SWBTree_Root(self)

    def RootNode(self):
        r"""RootNode(SWBTree self) -> std::shared_ptr< SWBNode >"""
        return _core.SWBTree_RootNode(self)

    def SetDumpId(self, _dumpId):
        r"""
        SetDumpId(SWBTree self, int _dumpId)

        Parameters
        ----------
        _dumpId: int

        """
        return _core.SWBTree_SetDumpId(self, _dumpId)

    def SetProject(self, proj):
        r"""
        SetProject(SWBTree self, string proj)

        Parameters
        ----------
        proj: str

        """
        return _core.SWBTree_SetProject(self, proj)

    def SetPathname(self, path):
        r"""
        SetPathname(SWBTree self, string path)

        Parameters
        ----------
        path: str

        """
        return _core.SWBTree_SetPathname(self, path)

    def SetVarPathname(self, path):
        r"""
        SetVarPathname(SWBTree self, string path)

        Parameters
        ----------
        path: str

        """
        return _core.SWBTree_SetVarPathname(self, path)

    def IsModified(self):
        r"""IsModified(SWBTree self) -> int"""
        return _core.SWBTree_IsModified(self)

    def IsFoldChanged(self):
        r"""IsFoldChanged(SWBTree self) -> bool"""
        return _core.SWBTree_IsFoldChanged(self)

    def SetModified(self, modified=1):
        r"""
        SetModified(SWBTree self, int modified=1)

        Parameters
        ----------
        modified: int

        """
        return _core.SWBTree_SetModified(self, modified)

    def SetFoldChanged(self):
        r"""SetFoldChanged(SWBTree self)"""
        return _core.SWBTree_SetFoldChanged(self)

    def Load(self, *args):
        r"""
        Load(SWBTree self, string pathname, string updatecmd="", bool _async=False, bool preprocessing=False) -> int

        Parameters
        ----------
        pathname: str
        updatecmd: str
        async: bool
        preprocessing: bool

        """
        return _core.SWBTree_Load(self, *args)

    def Save(self, *args):
        r"""
        Save(SWBTree self, string updatecmd="", list_NKEY LoadThisNodes=ListOfNkeys(), bool backup=True) -> int

        Parameters
        ----------
        updatecmd: str
        LoadThisNodes: ListOfNkeys
        backup: bool

        """
        return _core.SWBTree_Save(self, *args)

    def SaveAs(self, *args):
        r"""
        SaveAs(SWBTree self, string pathname, string updatecmd="", bool backup=True, bool clean=False) -> int

        Parameters
        ----------
        pathname: str
        updatecmd: str
        backup: bool
        clean: bool

        """
        return _core.SWBTree_SaveAs(self, *args)

    def SaveFlow(self, stream):
        r"""
        SaveFlow(SWBTree self, ostream stream) -> int

        Parameters
        ----------
        stream: std::ostream &

        """
        return _core.SWBTree_SaveFlow(self, stream)

    def SaveScenarios(self, stream):
        r"""
        SaveScenarios(SWBTree self, ostream stream) -> int

        Parameters
        ----------
        stream: std::ostream &

        """
        return _core.SWBTree_SaveScenarios(self, stream)

    def SaveNodes(self, *args):
        r"""
        SaveNodes(SWBTree self, ostream stream, string updatecmd="") -> int

        Parameters
        ----------
        stream: std::ostream &
        updatecmd: str

        """
        return _core.SWBTree_SaveNodes(self, *args)

    def SaveNode(self, *args):
        r"""
        SaveNode(SWBTree self, ostream stream, std::shared_ptr< SWBNode > const & node, string updatecmd="") -> int

        Parameters
        ----------
        stream: std::ostream &
        node: std::shared_ptr< SWBNode > const &
        updatecmd: str

        """
        return _core.SWBTree_SaveNode(self, *args)

    def PrintVariables(self, *args):
        r"""
        PrintVariables(SWBTree self, ostream stream=cout) -> int

        Parameters
        ----------
        stream: std::ostream &

        """
        return _core.SWBTree_PrintVariables(self, *args)

    def ResetStepOnNodes(self, _from):
        r"""
        ResetStepOnNodes(SWBTree self, STEP _from)

        Parameters
        ----------
        from: STEP

        """
        return _core.SWBTree_ResetStepOnNodes(self, _from)

    def ReorderStepNodes(self):
        r"""ReorderStepNodes(SWBTree self)"""
        return _core.SWBTree_ReorderStepNodes(self)

    def AllPnames(self):
        r"""AllPnames(SWBTree self) -> list_s"""
        return _core.SWBTree_AllPnames(self)

    def AllTools(self):
        r"""AllTools(SWBTree self) -> list_s"""
        return _core.SWBTree_AllTools(self)

    def ToolPnames(self, tool):
        r"""
        ToolPnames(SWBTree self, string tool) -> list_s

        Parameters
        ----------
        tool: str

        """
        return _core.SWBTree_ToolPnames(self, tool)

    def ToolSteps(self, tool):
        r"""
        ToolSteps(SWBTree self, string tool) -> list_s

        Parameters
        ----------
        tool: str

        """
        return _core.SWBTree_ToolSteps(self, tool)

    def AssignToolSpecificInputFile(self, tool, filename, ftype):
        r"""
        AssignToolSpecificInputFile(SWBTree self, string tool, string filename, string ftype) -> int

        Parameters
        ----------
        tool: str
        filename: str
        ftype: str

        """
        return _core.SWBTree_AssignToolSpecificInputFile(self, tool, filename, ftype)

    def GetAllToolSpecificInputFiles(self, tool):
        r"""
        GetAllToolSpecificInputFiles(SWBTree self, string tool) -> list_s

        Parameters
        ----------
        tool: str

        """
        return _core.SWBTree_GetAllToolSpecificInputFiles(self, tool)

    def RemoveToolSpecificInputFile(self, tool, filename):
        r"""
        RemoveToolSpecificInputFile(SWBTree self, string tool, string filename) -> int

        Parameters
        ----------
        tool: str
        filename: str

        """
        return _core.SWBTree_RemoveToolSpecificInputFile(self, tool, filename)

    def HasToolSpecificInputFiles(self, tool):
        r"""
        HasToolSpecificInputFiles(SWBTree self, string tool) -> bool

        Parameters
        ----------
        tool: str

        """
        return _core.SWBTree_HasToolSpecificInputFiles(self, tool)

    def Pvalues(self, *args):
        r"""
        Pvalues(SWBTree self, string pname, std::shared_ptr< SWBScenario > const & scenario=0) -> list_SWBValuesp

        Parameters
        ----------
        pname: str
        scenario: std::shared_ptr< SWBScenario > const &

        Pvalues(SWBTree self, string pname, string scenario=ALL) -> list_SWBValuesp

        Parameters
        ----------
        pname: str
        scenario: str

        """
        return _core.SWBTree_Pvalues(self, *args)

    def AddTool(self, *args):
        r"""
        AddTool(SWBTree self, string tool, string dbtool, STEP atToolStepi, string updatecmd="") -> int

        Parameters
        ----------
        tool: str
        dbtool: str
        atToolStepi: STEP
        updatecmd: str

        """
        return _core.SWBTree_AddTool(self, *args)

    def RemoveParam(self, *args):
        r"""
        RemoveParam(SWBTree self, string pname, string keepPval="", string updatecmd="") -> int

        Parameters
        ----------
        pname: str
        keepPval: str
        updatecmd: str

        """
        return _core.SWBTree_RemoveParam(self, *args)

    def RemoveTool(self, *args):
        r"""
        RemoveTool(SWBTree self, string tool, string updatecmd="") -> int

        Parameters
        ----------
        tool: str
        updatecmd: str

        """
        return _core.SWBTree_RemoveTool(self, *args)

    def RemoveTool2(self, *args):
        r"""
        RemoveTool2(SWBTree self, string tool, string shift, string updatecmd="") -> int

        Parameters
        ----------
        tool: str
        shift: str
        updatecmd: str

        """
        return _core.SWBTree_RemoveTool2(self, *args)

    def RemoveParamValue(self, *args):
        r"""
        RemoveParamValue(SWBTree self, string pname, string pval, string scenario=ALL, int cleanup=1, string updatecmd="") -> int

        Parameters
        ----------
        pname: str
        pval: str
        scenario: str
        cleanup: int
        updatecmd: str

        """
        return _core.SWBTree_RemoveParamValue(self, *args)

    def RemoveParamValues(self, *args):
        r"""
        RemoveParamValues(SWBTree self, string pname, list_SWBValuesp values, string scenario=ALL, int cleanup=1, string updatecmd="") -> int

        Parameters
        ----------
        pname: str
        values: PValueStdList
        scenario: str
        cleanup: int
        updatecmd: str

        """
        return _core.SWBTree_RemoveParamValues(self, *args)

    def RemoveNodePaths(self, *args):
        r"""
        RemoveNodePaths(SWBTree self, std::shared_ptr< SWBNode > const & node, std::shared_ptr< SWBScenario > const & scenario=0, string updatecmd="")

        Parameters
        ----------
        node: std::shared_ptr< SWBNode > const &
        scenario: std::shared_ptr< SWBScenario > const &
        updatecmd: str

        """
        return _core.SWBTree_RemoveNodePaths(self, *args)

    def AddPath(self, *args):
        r"""
        AddPath(SWBTree self, list_SWBValuesp ntuple, string scnr=ALL, string updatecmd="") -> int

        Parameters
        ----------
        ntuple: PValueStdList
        scnr: str
        updatecmd: str

        """
        return _core.SWBTree_AddPath(self, *args)

    def AddExperiment(self, *args):
        r"""
        AddExperiment(SWBTree self, list_SWBValuesp ntuple, string listnodes, string scnr=ALL, string updatecmd="") -> int

        Parameters
        ----------
        ntuple: PValueStdList
        listnodes: str
        scnr: str
        updatecmd: str

        """
        return _core.SWBTree_AddExperiment(self, *args)

    def RemovePath(self, *args):
        r"""
        RemovePath(SWBTree self, list_SWBValuesp ntuple, string scnr=ALL, int cleanup=1, string updatecmd="", bool deletefiles=True) -> int

        Parameters
        ----------
        ntuple: PValueStdList
        scnr: str
        cleanup: int
        updatecmd: str
        deletefiles: bool

        """
        return _core.SWBTree_RemovePath(self, *args)

    def RemoveSubtree(self, node, scenario=0, cleanup=1, updatecmd=0):
        r"""
        RemoveSubtree(SWBTree self, std::shared_ptr< SWBNode > const & node, std::shared_ptr< SWBScenario > const & scenario=0, int cleanup=1, string updatecmd=0) -> int

        Parameters
        ----------
        node: std::shared_ptr< SWBNode > const &
        scenario: std::shared_ptr< SWBScenario > const &
        cleanup: int
        updatecmd: str

        """
        return _core.SWBTree_RemoveSubtree(self, node, scenario, cleanup, updatecmd)

    def RenameParam(self, oldname, newname):
        r"""
        RenameParam(SWBTree self, string oldname, string newname) -> int

        Parameters
        ----------
        oldname: str
        newname: str

        """
        return _core.SWBTree_RenameParam(self, oldname, newname)

    def RenameTool(self, oldname, newname):
        r"""
        RenameTool(SWBTree self, string oldname, string newname) -> int

        Parameters
        ----------
        oldname: str
        newname: str

        """
        return _core.SWBTree_RenameTool(self, oldname, newname)

    def _RemovePathUp(self, *args):
        r"""
        _RemovePathUp(SWBTree self, list_SWBNodesp path, std::shared_ptr< SWBScenario > & scenario, int cleanup=1, string updatecmd="", bool deletefiles=True)

        Parameters
        ----------
        path: ListOfNodes
        scenario: std::shared_ptr< SWBScenario > &
        cleanup: int
        updatecmd: str
        deletefiles: bool

        """
        return _core.SWBTree__RemovePathUp(self, *args)

    def RemoveNode(self, node, scenario=0, cleanup=1):
        r"""
        RemoveNode(SWBTree self, std::shared_ptr< SWBNode > const & node, std::shared_ptr< SWBScenario > const & scenario=0, int cleanup=1) -> int

        Parameters
        ----------
        node: std::shared_ptr< SWBNode > const &
        scenario: std::shared_ptr< SWBScenario > const &
        cleanup: int

        """
        return _core.SWBTree_RemoveNode(self, node, scenario, cleanup)

    def FreeNode(self, node):
        r"""
        FreeNode(SWBTree self, std::shared_ptr< SWBNode > const & node) -> int

        Parameters
        ----------
        node: std::shared_ptr< SWBNode > const &

        """
        return _core.SWBTree_FreeNode(self, node)

    def SetTclInterp(self, interp=None):
        r"""
        SetTclInterp(SWBTree self, Tcl_Interp * interp=None)

        Parameters
        ----------
        interp: Tcl_Interp *

        """
        return _core.SWBTree_SetTclInterp(self, interp)

    def DeleteNodes(self, node):
        r"""
        DeleteNodes(SWBTree self, vector_SWBNodesp node)

        Parameters
        ----------
        node: std::vector< std::shared_ptr< SWBNode >,std::allocator< std::shared_ptr< SWBNode > > > &

        """
        return _core.SWBTree_DeleteNodes(self, node)

    def DeleteNode(self, node):
        r"""
        DeleteNode(SWBTree self, std::shared_ptr< SWBNode > & node)

        Parameters
        ----------
        node: std::shared_ptr< SWBNode > &

        """
        return _core.SWBTree_DeleteNode(self, node)

    def DeleteNodeFiles(self, nodes_list, purgeifempty=False):
        r"""
        DeleteNodeFiles(SWBTree self, string nodes_list, bool purgeifempty=False)

        Parameters
        ----------
        nodes_list: str
        purgeifempty: bool

        """
        return _core.SWBTree_DeleteNodeFiles(self, nodes_list, purgeifempty)

    def DeletedNodes(self):
        r"""DeletedNodes(SWBTree self) -> list_NKEY"""
        return _core.SWBTree_DeletedNodes(self)

    def ClearDeletedNodes(self):
        r"""ClearDeletedNodes(SWBTree self)"""
        return _core.SWBTree_ClearDeletedNodes(self)

    def CleanUp(self, *args):
        r"""
        CleanUp(SWBTree self, string updatecmd="") -> int

        Parameters
        ----------
        updatecmd: str

        """
        return _core.SWBTree_CleanUp(self, *args)

    def CleanUpNode(self, *args):
        r"""
        CleanUpNode(SWBTree self, std::shared_ptr< SWBNode > const & node, string updatecmd="") -> int

        Parameters
        ----------
        node: std::shared_ptr< SWBNode > const &
        updatecmd: str

        """
        return _core.SWBTree_CleanUpNode(self, *args)

    def UnPruneNode(self, *args):
        r"""
        UnPruneNode(SWBTree self, std::shared_ptr< SWBNode > & node)

        Parameters
        ----------
        node: std::shared_ptr< SWBNode > &

        UnPruneNode(SWBTree self, NKEY nkey)

        Parameters
        ----------
        nkey: NKEY

        """
        return _core.SWBTree_UnPruneNode(self, *args)

    def PruneNode(self, nkey):
        r"""
        PruneNode(SWBTree self, NKEY nkey)

        Parameters
        ----------
        nkey: NKEY

        """
        return _core.SWBTree_PruneNode(self, nkey)

    def AddDefaultPath(self, node, scenario=0):
        r"""
        AddDefaultPath(SWBTree self, std::shared_ptr< SWBNode > & node, std::shared_ptr< SWBScenario > const & scenario=0) -> int

        Parameters
        ----------
        node: std::shared_ptr< SWBNode > &
        scenario: std::shared_ptr< SWBScenario > const &

        """
        return _core.SWBTree_AddDefaultPath(self, node, scenario)

    def Renumber(self, *args):
        r"""
        Renumber(SWBTree self, string updatecmd="")

        Parameters
        ----------
        updatecmd: str

        """
        return _core.SWBTree_Renumber(self, *args)

    def GetFlow(self):
        r"""GetFlow(SWBTree self) -> SWBFlow"""
        return _core.SWBTree_GetFlow(self)

    def AllCompletedNodes(self):
        r"""AllCompletedNodes(SWBTree self) -> list_s"""
        return _core.SWBTree_AllCompletedNodes(self)

    def SortNodes(self, *args):
        r"""
        SortNodes(SWBTree self, list_SWBNodesp fromNodes, string order="any") -> list_SWBNodesp

        Parameters
        ----------
        fromNodes: ListOfNodes
        order: str

        """
        return _core.SWBTree_SortNodes(self, *args)

    def AddNodeDepthFirst(self, node, fromNodes, toNodes):
        r"""
        AddNodeDepthFirst(SWBTree self, std::shared_ptr< SWBNode > const & node, list_SWBNodesp fromNodes, list_SWBNodesp toNodes) -> int

        Parameters
        ----------
        node: std::shared_ptr< SWBNode > const &
        fromNodes: ListOfNodes &
        toNodes: ListOfNodes &

        """
        return _core.SWBTree_AddNodeDepthFirst(self, node, fromNodes, toNodes)

    def AddNodesToScenario(self, *args):
        r"""
        AddNodesToScenario(SWBTree self, list_NKEY nodes, string scnr=ALL, NODE_TYPE node_type=ACTIVE) -> bool

        Parameters
        ----------
        nodes: ListOfNkeys
        scnr: str
        node_type: enum NODE_TYPE

        """
        return _core.SWBTree_AddNodesToScenario(self, *args)

    def RemNodesFromScenario(self, *args):
        r"""
        RemNodesFromScenario(SWBTree self, list_NKEY nodes, string scnr=ALL) -> bool

        Parameters
        ----------
        nodes: ListOfNkeys
        scnr: str

        """
        return _core.SWBTree_RemNodesFromScenario(self, *args)

    def NbNodes(self):
        r"""NbNodes(SWBTree self) -> NKEY"""
        return _core.SWBTree_NbNodes(self)

    def NbSteps(self):
        r"""NbSteps(SWBTree self) -> STEP"""
        return _core.SWBTree_NbSteps(self)

    def NbParams(self):
        r"""NbParams(SWBTree self) -> int"""
        return _core.SWBTree_NbParams(self)

    def AllScenariosObj(self):
        r"""AllScenariosObj(SWBTree self) -> list_SWBScenariosp"""
        return _core.SWBTree_AllScenariosObj(self)

    def ScenarioExists(self, scnr):
        r"""
        ScenarioExists(SWBTree self, string scnr) -> bool

        Parameters
        ----------
        scnr: str

        """
        return _core.SWBTree_ScenarioExists(self, scnr)

    def ScenarioIsValid(self, scnr):
        r"""
        ScenarioIsValid(SWBTree self, string scnr) -> bool

        Parameters
        ----------
        scnr: str

        """
        return _core.SWBTree_ScenarioIsValid(self, scnr)

    def NewScenario(self, scnr):
        r"""
        NewScenario(SWBTree self, string scnr) -> std::shared_ptr< SWBScenario >

        Parameters
        ----------
        scnr: str

        """
        return _core.SWBTree_NewScenario(self, scnr)

    def RemoveScenario(self, *args):
        r"""
        RemoveScenario(SWBTree self, string scnr, int cleanup=1, string updatecmd="") -> int

        Parameters
        ----------
        scnr: str
        cleanup: int
        updatecmd: str

        """
        return _core.SWBTree_RemoveScenario(self, *args)

    def NbScenarios(self):
        r"""NbScenarios(SWBTree self) -> int"""
        return _core.SWBTree_NbScenarios(self)

    def CreateDefaultScenario(self, *args):
        r"""
        CreateDefaultScenario(SWBTree self, string scnr="default") -> int

        Parameters
        ----------
        scnr: str

        """
        return _core.SWBTree_CreateDefaultScenario(self, *args)

    def CreateDefaultExperiment(self, *args):
        r"""
        CreateDefaultExperiment(SWBTree self, string scnr="default") -> int

        Parameters
        ----------
        scnr: str

        """
        return _core.SWBTree_CreateDefaultExperiment(self, *args)

    def ChangeNodeValue(self, *args):
        r"""
        ChangeNodeValue(SWBTree self, std::shared_ptr< SWBNode > & node, std::shared_ptr< SWBValue > const & newvalue, string updatecmd="") -> int

        Parameters
        ----------
        node: std::shared_ptr< SWBNode > &
        newvalue: std::shared_ptr< SWBValue > const &
        updatecmd: str

        ChangeNodeValue(SWBTree self, NKEY nkey, string newvalue, string updatecmd="") -> int

        Parameters
        ----------
        nkey: NKEY
        newvalue: str
        updatecmd: str

        """
        return _core.SWBTree_ChangeNodeValue(self, *args)

    def ChangeNodeValue2(self, *args):
        r"""
        ChangeNodeValue2(SWBTree self, std::shared_ptr< SWBNode > & node, std::shared_ptr< SWBValue > const & newvalue, string updatecmd="") -> int

        Parameters
        ----------
        node: std::shared_ptr< SWBNode > &
        newvalue: std::shared_ptr< SWBValue > const &
        updatecmd: str

        ChangeNodeValue2(SWBTree self, NKEY nkey, string newvalue, string updatecmd="") -> int

        Parameters
        ----------
        nkey: NKEY
        newvalue: str
        updatecmd: str

        """
        return _core.SWBTree_ChangeNodeValue2(self, *args)

    def NodeIsInScenario(self, *args):
        r"""
        NodeIsInScenario(SWBTree self, std::shared_ptr< SWBNode > const & node, string scnr) -> int

        Parameters
        ----------
        node: std::shared_ptr< SWBNode > const &
        scnr: str

        NodeIsInScenario(SWBTree self, std::shared_ptr< SWBNode > const & node, std::shared_ptr< SWBScenario > const & scnr) -> int

        Parameters
        ----------
        node: std::shared_ptr< SWBNode > const &
        scnr: std::shared_ptr< SWBScenario > const &

        NodeIsInScenario(SWBTree self, NKEY nkey, string scnr) -> int

        Parameters
        ----------
        nkey: NKEY
        scnr: str

        """
        return _core.SWBTree_NodeIsInScenario(self, *args)

    def NodeExists(self, nkey):
        r"""
        NodeExists(SWBTree self, NKEY const nkey) -> bool

        Parameters
        ----------
        nkey: NKEY const

        """
        return _core.SWBTree_NodeExists(self, nkey)

    def FindNode(self, nkey):
        r"""
        FindNode(SWBTree self, NKEY const nkey) -> std::shared_ptr< SWBNode >

        Parameters
        ----------
        nkey: NKEY const

        """
        return _core.SWBTree_FindNode(self, nkey)

    def FindNodeExt(self, nkey):
        r"""
        FindNodeExt(SWBTree self, NKEY const nkey) -> std::shared_ptr< SWBNode >

        Parameters
        ----------
        nkey: NKEY const

        """
        return _core.SWBTree_FindNodeExt(self, nkey)

    def ResetLocks(self, scnr, lock):
        r"""
        ResetLocks(SWBTree self, string scnr, bool lock)

        Parameters
        ----------
        scnr: str
        lock: bool

        """
        return _core.SWBTree_ResetLocks(self, scnr, lock)

    def NodePvalues(self, *args):
        r"""
        NodePvalues(SWBTree self, std::shared_ptr< SWBNode > const & node) -> list_SWBValuesp

        Parameters
        ----------
        node: std::shared_ptr< SWBNode > const &

        NodePvalues(SWBTree self, NKEY nkey) -> list_SWBValuesp

        Parameters
        ----------
        nkey: NKEY

        """
        return _core.SWBTree_NodePvalues(self, *args)

    def NodePval(self, *args):
        r"""
        NodePval(SWBTree self, std::shared_ptr< SWBNode > const & node, string pname) -> std::shared_ptr< SWBValue >

        Parameters
        ----------
        node: std::shared_ptr< SWBNode > const &
        pname: str

        NodePval(SWBTree self, NKEY nkey, string pname="") -> std::shared_ptr< SWBValue >

        Parameters
        ----------
        nkey: NKEY
        pname: str

        """
        return _core.SWBTree_NodePval(self, *args)

    def NodeIsPruned(self, *args):
        r"""
        NodeIsPruned(SWBTree self, std::shared_ptr< SWBNode > const & node) -> bool

        Parameters
        ----------
        node: std::shared_ptr< SWBNode > const &

        NodeIsPruned(SWBTree self, NKEY nkey) -> bool

        Parameters
        ----------
        nkey: NKEY

        """
        return _core.SWBTree_NodeIsPruned(self, *args)

    def NodeState(self, *args):
        r"""
        NodeState(SWBTree self, std::shared_ptr< SWBNode > const & node) -> string

        Parameters
        ----------
        node: std::shared_ptr< SWBNode > const &

        NodeState(SWBTree self, NKEY nkey) -> string

        Parameters
        ----------
        nkey: NKEY

        """
        return _core.SWBTree_NodeState(self, *args)

    def SetNodeState(self, *args):
        r"""
        SetNodeState(SWBTree self, std::shared_ptr< SWBNode > const & node, string state)

        Parameters
        ----------
        node: std::shared_ptr< SWBNode > const &
        state: str

        SetNodeState(SWBTree self, NKEY nkey, string state)

        Parameters
        ----------
        nkey: NKEY
        state: str

        """
        return _core.SWBTree_SetNodeState(self, *args)

    def NodeTool(self, *args):
        r"""
        NodeTool(SWBTree self, std::shared_ptr< SWBNode > const & node) -> string

        Parameters
        ----------
        node: std::shared_ptr< SWBNode > const &

        NodeTool(SWBTree self, NKEY nkey) -> string

        Parameters
        ----------
        nkey: NKEY

        """
        return _core.SWBTree_NodeTool(self, *args)

    def NodeIsAtStep(self, nkey, step):
        r"""
        NodeIsAtStep(SWBTree self, NKEY nkey, string step) -> bool

        Parameters
        ----------
        nkey: NKEY
        step: str

        """
        return _core.SWBTree_NodeIsAtStep(self, nkey, step)

    def StepTool(self, stepi):
        r"""
        StepTool(SWBTree self, STEP const stepi) -> string

        Parameters
        ----------
        stepi: STEP const

        """
        return _core.SWBTree_StepTool(self, stepi)

    def NodeDBTool(self, *args):
        r"""
        NodeDBTool(SWBTree self, std::shared_ptr< SWBNode > const & node) -> string

        Parameters
        ----------
        node: std::shared_ptr< SWBNode > const &

        NodeDBTool(SWBTree self, NKEY nkey) -> string

        Parameters
        ----------
        nkey: NKEY

        """
        return _core.SWBTree_NodeDBTool(self, *args)

    def NodeScenarios(self, *args):
        r"""
        NodeScenarios(SWBTree self, std::shared_ptr< SWBNode > const & node) -> map_SWBScenariosp_NODE_TYPE

        Parameters
        ----------
        node: std::shared_ptr< SWBNode > const &

        NodeScenarios(SWBTree self, NKEY nkey) -> map_SWBScenariosp_NODE_TYPE

        Parameters
        ----------
        nkey: NKEY

        """
        return _core.SWBTree_NodeScenarios(self, *args)

    def Traverse(self, *args):
        r"""
        Traverse(SWBTree self, int (*)(std::shared_ptr< SWBTree > const &,std::shared_ptr< SWBNode > &,std::shared_ptr< SWBScenario > const &,std::ostream &,Tcl_Interp *,std::string const) func, string scnr=ALL, ostream stream=cout, Tcl_Interp * interp=None, string cmd="", int runtcl=0, string updatecmd="") -> int

        Parameters
        ----------
        func: int (*)(std::shared_ptr< SWBTree > const &,std::shared_ptr< SWBNode > &,std::shared_ptr< SWBScenario > const &,std::ostream &,Tcl_Interp *,std::string const)
        scnr: str
        stream: std::ostream &
        interp: Tcl_Interp *
        cmd: str
        runtcl: int
        updatecmd: str

        """
        return _core.SWBTree_Traverse(self, *args)

    def VisitNode(self, *args):
        r"""
        VisitNode(SWBTree self, std::shared_ptr< SWBNode > & node, int (*)(std::shared_ptr< SWBTree > const &,std::shared_ptr< SWBNode > &,std::shared_ptr< SWBScenario > const &,std::ostream &,Tcl_Interp *,std::string const) func, std::shared_ptr< SWBScenario > const & scenario=0, ostream stream=cout, Tcl_Interp * interp=None, string cmd="", int runtcl=0, string updatecmd="") -> int

        Parameters
        ----------
        node: std::shared_ptr< SWBNode > &
        func: int (*)(std::shared_ptr< SWBTree > const &,std::shared_ptr< SWBNode > &,std::shared_ptr< SWBScenario > const &,std::ostream &,Tcl_Interp *,std::string const)
        scenario: std::shared_ptr< SWBScenario > const &
        stream: std::ostream &
        interp: Tcl_Interp *
        cmd: str
        runtcl: int
        updatecmd: str

        """
        return _core.SWBTree_VisitNode(self, *args)

    def Export(self, *args):
        r"""
        Export(SWBTree self, std::shared_ptr< SWBNode > & node, int row, int col, int showpruned, int showOption, int shownn, std::shared_ptr< SWBScenario > const & scenario, Tcl_Interp * interp, string updatecmd="") -> int

        Parameters
        ----------
        node: std::shared_ptr< SWBNode > &
        row: int
        col: int
        showpruned: int
        showOption: int
        shownn: int
        scenario: std::shared_ptr< SWBScenario > const &
        interp: Tcl_Interp *
        updatecmd: str

        """
        return _core.SWBTree_Export(self, *args)

    @staticmethod
    def PrintNode(*args):
        r"""
        PrintNode(std::shared_ptr< SWBTree > const & tree, std::shared_ptr< SWBNode > & node, std::shared_ptr< SWBScenario > const & scenario=0, ostream stream=cout, Tcl_Interp * interp=None, string cmd="") -> int

        Parameters
        ----------
        tree: std::shared_ptr< SWBTree > const &
        node: std::shared_ptr< SWBNode > &
        scenario: std::shared_ptr< SWBScenario > const &
        stream: std::ostream &
        interp: Tcl_Interp *
        cmd: str

        """
        return _core.SWBTree_PrintNode(*args)

    @staticmethod
    def ResetNode(*args):
        r"""
        ResetNode(std::shared_ptr< SWBTree > const & tree, std::shared_ptr< SWBNode > & node, std::shared_ptr< SWBScenario > const & scenario=0, ostream stream=cout, Tcl_Interp * interp=None, string cmd="") -> int

        Parameters
        ----------
        tree: std::shared_ptr< SWBTree > const &
        node: std::shared_ptr< SWBNode > &
        scenario: std::shared_ptr< SWBScenario > const &
        stream: std::ostream &
        interp: Tcl_Interp *
        cmd: str

        """
        return _core.SWBTree_ResetNode(*args)

    @staticmethod
    def InitNode(*args):
        r"""
        InitNode(std::shared_ptr< SWBTree > const & tree, std::shared_ptr< SWBNode > & node, std::shared_ptr< SWBScenario > const & scenario=0, ostream stream=cout, Tcl_Interp * interp=None, string cmd="") -> int

        Parameters
        ----------
        tree: std::shared_ptr< SWBTree > const &
        node: std::shared_ptr< SWBNode > &
        scenario: std::shared_ptr< SWBScenario > const &
        stream: std::ostream &
        interp: Tcl_Interp *
        cmd: str

        """
        return _core.SWBTree_InitNode(*args)

    def PrintTree(self, *args):
        r"""
        PrintTree(SWBTree self, string scnr=ALL, int showpruned=1, ostream stream=cout, Tcl_Interp * interp=None, string cmd="", string updatecmd="") -> int

        Parameters
        ----------
        scnr: str
        showpruned: int
        stream: std::ostream &
        interp: Tcl_Interp *
        cmd: str
        updatecmd: str

        """
        return _core.SWBTree_PrintTree(self, *args)

    def PrintTags(self, *args):
        r"""
        PrintTags(SWBTree self, ostream stream=cout) -> bool

        Parameters
        ----------
        stream: std::ostream &

        """
        return _core.SWBTree_PrintTags(self, *args)

    def ResetFlow(self):
        r"""ResetFlow(SWBTree self)"""
        return _core.SWBTree_ResetFlow(self)

    def PrintFlow(self, *args):
        r"""
        PrintFlow(SWBTree self, ostream stream=cout, int shownodes=0, int showdetails=0) -> int

        Parameters
        ----------
        stream: std::ostream &
        shownodes: int
        showdetails: int

        """
        return _core.SWBTree_PrintFlow(self, *args)

    def ResetNodeStates(self):
        r"""ResetNodeStates(SWBTree self) -> int"""
        return _core.SWBTree_ResetNodeStates(self)

    def DisplayNodeInfo(self, node, showOption, shownn, buf, _interp):
        r"""
        DisplayNodeInfo(SWBTree self, std::shared_ptr< SWBNode > const & node, int showOption, int shownn, string buf, Tcl_Interp * _interp) -> int

        Parameters
        ----------
        node: std::shared_ptr< SWBNode > const &
        showOption: int
        shownn: int
        buf: str
        _interp: Tcl_Interp *

        """
        return _core.SWBTree_DisplayNodeInfo(self, node, showOption, shownn, buf, _interp)

    def CacheNodeStatus(self, node, _interp):
        r"""
        CacheNodeStatus(SWBTree self, std::shared_ptr< SWBNode > const & node, Tcl_Interp * _interp) -> string

        Parameters
        ----------
        node: std::shared_ptr< SWBNode > const &
        _interp: Tcl_Interp *

        """
        return _core.SWBTree_CacheNodeStatus(self, node, _interp)
    m_VM = property(_core.SWBTree_m_VM_get, _core.SWBTree_m_VM_set, doc=r"""m_VM : std::shared_ptr<(SWBViewModel)>""")

    def CreateNewNode(self, *args):
        r"""
        CreateNewNode(SWBTree self, NKEY const nkey, std::shared_ptr< SWBNode > parent, STEP const stepi, std::shared_ptr< SWBValue > const & pvalue=0, string updatecmd="") -> std::shared_ptr< SWBNode >

        Parameters
        ----------
        nkey: NKEY const
        parent: std::shared_ptr< SWBNode >
        stepi: STEP const
        pvalue: std::shared_ptr< SWBValue > const &
        updatecmd: str

        """
        return _core.SWBTree_CreateNewNode(self, *args)

    def ChildrenExist(self, node, scenario):
        r"""
        ChildrenExist(SWBTree self, std::shared_ptr< SWBNode > const & node, std::shared_ptr< SWBScenario > const & scenario) -> int

        Parameters
        ----------
        node: std::shared_ptr< SWBNode > const &
        scenario: std::shared_ptr< SWBScenario > const &

        """
        return _core.SWBTree_ChildrenExist(self, node, scenario)

    def GetChild(self, children, pvalue):
        r"""
        GetChild(SWBTree self, list_SWBNodesp children, string pvalue) -> std::shared_ptr< SWBNode >

        Parameters
        ----------
        children: ListOfNodes
        pvalue: str

        """
        return _core.SWBTree_GetChild(self, children, pvalue)

    def SetAllParamSpecs(self, *args):
        r"""
        SetAllParamSpecs(SWBTree self, string scnr, string spec="")

        Parameters
        ----------
        scnr: str
        spec: str

        """
        return _core.SWBTree_SetAllParamSpecs(self, *args)

    def SetSpecs(self, *args):
        r"""
        SetSpecs(SWBTree self, string scnr, string pname, string spec="")

        Parameters
        ----------
        scnr: str
        pname: str
        spec: str

        """
        return _core.SWBTree_SetSpecs(self, *args)

    def GetSpecs(self, scnr, pname):
        r"""
        GetSpecs(SWBTree self, string scnr, string pname) -> string

        Parameters
        ----------
        scnr: str
        pname: str

        """
        return _core.SWBTree_GetSpecs(self, scnr, pname)

    def RemoveSpecs(self, scnr, pname):
        r"""
        RemoveSpecs(SWBTree self, string scnr, string pname)

        Parameters
        ----------
        scnr: str
        pname: str

        """
        return _core.SWBTree_RemoveSpecs(self, scnr, pname)

    def RemoveScenarioSpecs(self, scnr):
        r"""
        RemoveScenarioSpecs(SWBTree self, string scnr)

        Parameters
        ----------
        scnr: str

        """
        return _core.SWBTree_RemoveScenarioSpecs(self, scnr)

    def RemParamSpecs(self, pname):
        r"""
        RemParamSpecs(SWBTree self, string pname)

        Parameters
        ----------
        pname: str

        """
        return _core.SWBTree_RemParamSpecs(self, pname)

    def RenameParamSpecs(self, oldpname, newpname):
        r"""
        RenameParamSpecs(SWBTree self, string oldpname, string newpname)

        Parameters
        ----------
        oldpname: str
        newpname: str

        """
        return _core.SWBTree_RenameParamSpecs(self, oldpname, newpname)

    def PrintSpecs(self, *args):
        r"""
        PrintSpecs(SWBTree self, ostream stream=cout)

        Parameters
        ----------
        stream: std::ostream &

        """
        return _core.SWBTree_PrintSpecs(self, *args)

    def AllVars(self):
        r"""AllVars(SWBTree self) -> list_SWBVariablesp"""
        return _core.SWBTree_AllVars(self)

    def AllSpecs(self):
        r"""AllSpecs(SWBTree self) -> map_s_s"""
        return _core.SWBTree_AllSpecs(self)

    def VarValue(self, *args):
        r"""
        VarValue(SWBTree self, std::shared_ptr< SWBNode > & node, string varname, string value, DATE & date, std::shared_ptr< SWBNode > & refnode, VarType type=ANY, char sep='@', int cycle=0, string updatecmd="") -> int

        Parameters
        ----------
        node: std::shared_ptr< SWBNode > &
        varname: str
        value: str
        date: DATE &
        refnode: std::shared_ptr< SWBNode > &
        type: enum VarType
        sep: char
        cycle: int
        updatecmd: str

        VarValue(SWBTree self, NKEY nodekey, string varname, string value, DATE & date, NKEY & refnodekey, VarType type=ANY, char sep='@', int cycle=0, string updatecmd="") -> int

        Parameters
        ----------
        nodekey: NKEY
        varname: str
        value: str
        date: DATE &
        refnodekey: NKEY &
        type: enum VarType
        sep: char
        cycle: int
        updatecmd: str

        """
        return _core.SWBTree_VarValue(self, *args)

    def VarValueTuple(self, nkey, varname, type):
        r"""
        VarValueTuple(SWBTree self, NKEY const nkey, string varname, string type) -> list_s

        Parameters
        ----------
        nkey: NKEY const
        varname: str
        type: str

        """
        return _core.SWBTree_VarValueTuple(self, nkey, varname, type)

    def IsVarValueVisible(self, node, varname, fromExtractDOE=False):
        r"""
        IsVarValueVisible(SWBTree self, std::shared_ptr< SWBNode > & node, string varname, bool fromExtractDOE=False) -> int

        Parameters
        ----------
        node: std::shared_ptr< SWBNode > &
        varname: str
        fromExtractDOE: bool

        """
        return _core.SWBTree_IsVarValueVisible(self, node, varname, fromExtractDOE)

    def InitVars(self):
        r"""InitVars(SWBTree self)"""
        return _core.SWBTree_InitVars(self)

    def AddVarFormula(self, varname, formula):
        r"""
        AddVarFormula(SWBTree self, string varname, string formula)

        Parameters
        ----------
        varname: str
        formula: str

        """
        return _core.SWBTree_AddVarFormula(self, varname, formula)

    def AddVarFormat(self, varname, format):
        r"""
        AddVarFormat(SWBTree self, string varname, string format)

        Parameters
        ----------
        varname: str
        format: str

        """
        return _core.SWBTree_AddVarFormat(self, varname, format)

    def DeleteAllFormats(self):
        r"""DeleteAllFormats(SWBTree self)"""
        return _core.SWBTree_DeleteAllFormats(self)

    def DeleteAllFormulas(self):
        r"""DeleteAllFormulas(SWBTree self)"""
        return _core.SWBTree_DeleteAllFormulas(self)

    def DeleteAllXVars(self, nodeNr):
        r"""
        DeleteAllXVars(SWBTree self, int nodeNr)

        Parameters
        ----------
        nodeNr: int

        """
        return _core.SWBTree_DeleteAllXVars(self, nodeNr)

    def DeleteAllSetVars(self, nodeNr):
        r"""
        DeleteAllSetVars(SWBTree self, int nodeNr)

        Parameters
        ----------
        nodeNr: int

        """
        return _core.SWBTree_DeleteAllSetVars(self, nodeNr)

    def DeleteAllDefVars(self, nodeNr):
        r"""
        DeleteAllDefVars(SWBTree self, int nodeNr)

        Parameters
        ----------
        nodeNr: int

        """
        return _core.SWBTree_DeleteAllDefVars(self, nodeNr)

    def GetVarType(self, varname):
        r"""
        GetVarType(SWBTree self, string varname) -> VarType

        Parameters
        ----------
        varname: str

        """
        return _core.SWBTree_GetVarType(self, varname)

    def DeleteXVar(self, *args):
        r"""
        DeleteXVar(SWBTree self, std::shared_ptr< SWBNode > const & node, string varname, int remove)

        Parameters
        ----------
        node: std::shared_ptr< SWBNode > const &
        varname: str
        remove: int

        DeleteXVar(SWBTree self, NKEY nkey, string varname, int remove) -> int

        Parameters
        ----------
        nkey: NKEY
        varname: str
        remove: int

        """
        return _core.SWBTree_DeleteXVar(self, *args)

    def DeleteDefVar(self, *args):
        r"""
        DeleteDefVar(SWBTree self, std::shared_ptr< SWBNode > const & node, string varname, int remove)

        Parameters
        ----------
        node: std::shared_ptr< SWBNode > const &
        varname: str
        remove: int

        DeleteDefVar(SWBTree self, NKEY nkey, string varname, int remove) -> int

        Parameters
        ----------
        nkey: NKEY
        varname: str
        remove: int

        """
        return _core.SWBTree_DeleteDefVar(self, *args)

    def DeleteSetVar(self, *args):
        r"""
        DeleteSetVar(SWBTree self, std::shared_ptr< SWBNode > const & node, string varname, int remove)

        Parameters
        ----------
        node: std::shared_ptr< SWBNode > const &
        varname: str
        remove: int

        DeleteSetVar(SWBTree self, NKEY nkey, string varname, int remove) -> int

        Parameters
        ----------
        nkey: NKEY
        varname: str
        remove: int

        """
        return _core.SWBTree_DeleteSetVar(self, *args)

    def DeleteFormat(self, varname):
        r"""
        DeleteFormat(SWBTree self, string varname) -> bool

        Parameters
        ----------
        varname: str

        """
        return _core.SWBTree_DeleteFormat(self, varname)

    def CleanupXVars(self, option, someNodeIds):
        r"""
        CleanupXVars(SWBTree self, string option, list_NKEY someNodeIds)

        Parameters
        ----------
        option: str
        someNodeIds: std::list< int,std::allocator< int > >

        """
        return _core.SWBTree_CleanupXVars(self, option, someNodeIds)

    def CleanupSetVars(self, option, someNodeIds):
        r"""
        CleanupSetVars(SWBTree self, string option, list_NKEY someNodeIds)

        Parameters
        ----------
        option: str
        someNodeIds: std::list< int,std::allocator< int > >

        """
        return _core.SWBTree_CleanupSetVars(self, option, someNodeIds)

    def AddVar(self, *args):
        r"""
        AddVar(SWBTree self, std::shared_ptr< SWBNode > const & node, string varname, std::shared_ptr< SWBValue > const & value, bool const hidden=False)

        Parameters
        ----------
        node: std::shared_ptr< SWBNode > const &
        varname: str
        value: std::shared_ptr< SWBValue > const &
        hidden: bool const

        AddVar(SWBTree self, NKEY nkey, string varname, string value, bool const hidden=False) -> int

        Parameters
        ----------
        nkey: NKEY
        varname: str
        value: str
        hidden: bool const

        """
        return _core.SWBTree_AddVar(self, *args)

    def AddXVar(self, *args):
        r"""
        AddXVar(SWBTree self, std::shared_ptr< SWBNode > const & node, string varname, std::shared_ptr< SWBValue > const & xvalue, DATE date, bool bhidden=False)

        Parameters
        ----------
        node: std::shared_ptr< SWBNode > const &
        varname: str
        xvalue: std::shared_ptr< SWBValue > const &
        date: DATE
        bhidden: bool

        AddXVar(SWBTree self, NKEY nkey, string varname, string xvalue, DATE date, bool bhidden=False) -> int

        Parameters
        ----------
        nkey: NKEY
        varname: str
        xvalue: str
        date: DATE
        bhidden: bool

        """
        return _core.SWBTree_AddXVar(self, *args)

    def AddDefinedVar(self, *args):
        r"""
        AddDefinedVar(SWBTree self, std::shared_ptr< SWBNode > const & node, string varname, std::shared_ptr< SWBValue > const & value)

        Parameters
        ----------
        node: std::shared_ptr< SWBNode > const &
        varname: str
        value: std::shared_ptr< SWBValue > const &

        AddDefinedVar(SWBTree self, NKEY nkey, string varname, string value) -> int

        Parameters
        ----------
        nkey: NKEY
        varname: str
        value: str

        """
        return _core.SWBTree_AddDefinedVar(self, *args)

    def DeclareVariable(self, *args):
        r"""
        DeclareVariable(SWBTree self, string varname, string defvalue="", string refvar="", int after=0)

        Parameters
        ----------
        varname: str
        defvalue: str
        refvar: str
        after: int

        """
        return _core.SWBTree_DeclareVariable(self, *args)

    def DeleteVariable(self, varname):
        r"""
        DeleteVariable(SWBTree self, string varname) -> bool

        Parameters
        ----------
        varname: str

        """
        return _core.SWBTree_DeleteVariable(self, varname)

    def DeleteVariableFromNode(self, *args):
        r"""
        DeleteVariableFromNode(SWBTree self, std::shared_ptr< SWBNode > const & node, string varname) -> int

        Parameters
        ----------
        node: std::shared_ptr< SWBNode > const &
        varname: str

        DeleteVariableFromNode(SWBTree self, NKEY nkey, string varname) -> int

        Parameters
        ----------
        nkey: NKEY
        varname: str

        """
        return _core.SWBTree_DeleteVariableFromNode(self, *args)

    def VarNames(self):
        r"""VarNames(SWBTree self) -> list_s"""
        return _core.SWBTree_VarNames(self)

    def AllVarNames(self):
        r"""AllVarNames(SWBTree self) -> list_s"""
        return _core.SWBTree_AllVarNames(self)

    def FormulaVarNames(self):
        r"""FormulaVarNames(SWBTree self) -> list_s"""
        return _core.SWBTree_FormulaVarNames(self)

    def FormatVarNames(self):
        r"""FormatVarNames(SWBTree self) -> list_s"""
        return _core.SWBTree_FormatVarNames(self)

    def VarFormula(self, varname):
        r"""
        VarFormula(SWBTree self, string varname) -> string

        Parameters
        ----------
        varname: str

        """
        return _core.SWBTree_VarFormula(self, varname)

    def VarFormat(self, varname):
        r"""
        VarFormat(SWBTree self, string varname) -> string

        Parameters
        ----------
        varname: str

        """
        return _core.SWBTree_VarFormat(self, varname)

    def PrintTable(self, *args):
        r"""
        PrintTable(SWBTree self, string scnr=ALL, ostream stream=cout) -> int

        Parameters
        ----------
        scnr: str
        stream: std::ostream &

        """
        return _core.SWBTree_PrintTable(self, *args)

    def SaveVarsAs(self, *args):
        r"""
        SaveVarsAs(SWBTree self, string path, string updatecmd="") -> int

        Parameters
        ----------
        path: str
        updatecmd: str

        """
        return _core.SWBTree_SaveVarsAs(self, *args)

    def SaveVars(self, *args):
        r"""
        SaveVars(SWBTree self, string updatecmd="") -> int

        Parameters
        ----------
        updatecmd: str

        """
        return _core.SWBTree_SaveVars(self, *args)

    def FindSpec(self, key, value):
        r"""
        FindSpec(SWBTree self, string key, string value) -> bool

        Parameters
        ----------
        key: str
        value: str

        """
        return _core.SWBTree_FindSpec(self, key, value)

    def AddNodeToNodeListCheck(self, lst, node):
        r"""
        AddNodeToNodeListCheck(SWBTree self, list_SWBNodesp lst, std::shared_ptr< SWBNode > const & node) -> bool

        Parameters
        ----------
        lst: ListOfNodes &
        node: std::shared_ptr< SWBNode > const &

        """
        return _core.SWBTree_AddNodeToNodeListCheck(self, lst, node)

    def NodeExistsInListOfNodes(self, lst, node):
        r"""
        NodeExistsInListOfNodes(SWBTree self, list_SWBNodesp lst, std::shared_ptr< SWBNode > const & node) -> bool

        Parameters
        ----------
        lst: ListOfNodes
        node: std::shared_ptr< SWBNode > const &

        """
        return _core.SWBTree_NodeExistsInListOfNodes(self, lst, node)

    def GetAllSWBVars(self):
        r"""GetAllSWBVars(SWBTree self) -> list_SWBVariablesp"""
        return _core.SWBTree_GetAllSWBVars(self)

    def GetAllExtractedVars(self, nodeNr):
        r"""
        GetAllExtractedVars(SWBTree self, int nodeNr) -> list_SWBVariablesp

        Parameters
        ----------
        nodeNr: int

        """
        return _core.SWBTree_GetAllExtractedVars(self, nodeNr)

    def GetAllDefinedVars(self, nodeNr):
        r"""
        GetAllDefinedVars(SWBTree self, int nodeNr) -> list_SWBVariablesp

        Parameters
        ----------
        nodeNr: int

        """
        return _core.SWBTree_GetAllDefinedVars(self, nodeNr)

    def GetAllSetVars(self, nodeNr):
        r"""
        GetAllSetVars(SWBTree self, int nodeNr) -> list_SWBVariablesp

        Parameters
        ----------
        nodeNr: int

        """
        return _core.SWBTree_GetAllSetVars(self, nodeNr)

    def SortExperiments(self, parameters, SortCriterias, scenario):
        r"""
        SortExperiments(SWBTree self, vector_s parameters, std::vector< SortType,std::allocator< SortType > > SortCriterias, string scenario)

        Parameters
        ----------
        parameters: VectorOfStrings
        SortCriterias: std::vector< SortType,std::allocator< SortType > >
        scenario: str

        """
        return _core.SWBTree_SortExperiments(self, parameters, SortCriterias, scenario)

    def FoldNode(self, nkey, scenario):
        r"""
        FoldNode(SWBTree self, NKEY const & nkey, string scenario) -> bool

        Parameters
        ----------
        nkey: NKEY const &
        scenario: str

        """
        return _core.SWBTree_FoldNode(self, nkey, scenario)

    def UnFoldNode(self, nkey, scenario):
        r"""
        UnFoldNode(SWBTree self, NKEY const & nkey, string scenario) -> bool

        Parameters
        ----------
        nkey: NKEY const &
        scenario: str

        """
        return _core.SWBTree_UnFoldNode(self, nkey, scenario)

    def UnFoldNodeList(self, nkeys, scenario):
        r"""
        UnFoldNodeList(SWBTree self, vector_i nkeys, string scenario) -> bool

        Parameters
        ----------
        nkeys: std::vector< int,std::allocator< int > > const &
        scenario: str

        """
        return _core.SWBTree_UnFoldNodeList(self, nkeys, scenario)

    def UnFoldAll(self, scenario):
        r"""
        UnFoldAll(SWBTree self, string scenario) -> bool

        Parameters
        ----------
        scenario: str

        """
        return _core.SWBTree_UnFoldAll(self, scenario)

    def PrintFoldNodeMap(self, arg2):
        r"""
        PrintFoldNodeMap(SWBTree self, string arg2)

        Parameters
        ----------
        arg2: str

        """
        return _core.SWBTree_PrintFoldNodeMap(self, arg2)

    def MarkTool(self, tool):
        r"""
        MarkTool(SWBTree self, string tool)

        Parameters
        ----------
        tool: str

        """
        return _core.SWBTree_MarkTool(self, tool)

    def UnmarkTool(self, tool):
        r"""
        UnmarkTool(SWBTree self, string tool)

        Parameters
        ----------
        tool: str

        """
        return _core.SWBTree_UnmarkTool(self, tool)

    def LoadExecGraph(self, *args):
        r"""
        LoadExecGraph(SWBTree self, string path, string updatecmd="") -> int

        Parameters
        ----------
        path: str
        updatecmd: str

        """
        return _core.SWBTree_LoadExecGraph(self, *args)

    def IsExecGraphLoaded(self, _path):
        r"""
        IsExecGraphLoaded(SWBTree self, string _path) -> bool

        Parameters
        ----------
        _path: str

        """
        return _core.SWBTree_IsExecGraphLoaded(self, _path)

    def NodeIsReal(self, nkey):
        r"""
        NodeIsReal(SWBTree self, int nkey) -> bool

        Parameters
        ----------
        nkey: int

        """
        return _core.SWBTree_NodeIsReal(self, nkey)

    def GetRealNodes(self):
        r"""GetRealNodes(SWBTree self) -> list_s"""
        return _core.SWBTree_GetRealNodes(self)

    def ProjectMetadata(self):
        r"""ProjectMetadata(SWBTree self) -> SWBProjectMetadata"""
        return _core.SWBTree_ProjectMetadata(self)

    def AddParam(self, *args):
        r"""
        AddParam(SWBTree self, string pname, string defaultValue, STEP atParamStepi, string updatecmd="") -> int

        Parameters
        ----------
        pname: str
        defaultValue: str
        atParamStepi: STEP
        updatecmd: str

        AddParam(SWBTree self, string pname, double const defaultValue, STEP atParamStepi, string updatecmd="") -> int

        Parameters
        ----------
        pname: str
        defaultValue: double const
        atParamStepi: STEP
        updatecmd: str

        """
        return _core.SWBTree_AddParam(self, *args)

    def ParseVarLine(self, *args):
        r"""
        ParseVarLine(SWBTree self, string line, VarType type=ANY) -> int

        Parameters
        ----------
        line: str
        type: enum VarType

        ParseVarLine(SWBTree self, string line, string sType) -> int

        Parameters
        ----------
        line: str
        sType: str

        """
        return _core.SWBTree_ParseVarLine(self, *args)

    def LoadVars(self, *args):
        r"""
        LoadVars(SWBTree self, string path, VarType type=ANY, string updatecmd="", bool _async=False) -> int

        Parameters
        ----------
        path: str
        type: enum VarType
        updatecmd: str
        async: bool

        LoadVars(SWBTree self, string path, string sType=ConvertEnumToString< VarType >(VarType::ANY)) -> int

        Parameters
        ----------
        path: str
        sType: str

        """
        return _core.SWBTree_LoadVars(self, *args)

    def NodeVarNames(self, *args):
        r"""
        NodeVarNames(SWBTree self, NKEY nkey, VarType type=ANY) -> list_s

        Parameters
        ----------
        nkey: NKEY
        type: enum VarType

        NodeVarNames(SWBTree self, NKEY const nkey, string sType) -> list_s

        Parameters
        ----------
        nkey: NKEY const
        sType: str

        """
        return _core.SWBTree_NodeVarNames(self, *args)

    def NodePvalues_str(self, nkey):
        r"""
        NodePvalues_str(SWBTree self, NKEY nkey) -> list_s

        Parameters
        ----------
        nkey: NKEY

        """
        return _core.SWBTree_NodePvalues_str(self, nkey)

    def NodeScenarios_str(self, nkey):
        r"""
        NodeScenarios_str(SWBTree self, NKEY nkey) -> vector_s

        Parameters
        ----------
        nkey: NKEY

        """
        return _core.SWBTree_NodeScenarios_str(self, nkey)

    def AllScenarios_str(self):
        r"""AllScenarios_str(SWBTree self) -> vector_s"""
        return _core.SWBTree_AllScenarios_str(self)

    def Path(self, *args):
        r"""
        Path(SWBTree self, list_SWBValuesp ntuple, string updatecmd="") -> list_NKEY

        Parameters
        ----------
        ntuple: PValueStdList
        updatecmd: str

        """
        return _core.SWBTree_Path(self, *args)

    def PathObj(self, *args):
        r"""
        PathObj(SWBTree self, list_SWBValuesp ntuple, string updatecmd="") -> list_SWBNodesp

        Parameters
        ----------
        ntuple: PValueStdList
        updatecmd: str

        """
        return _core.SWBTree_PathObj(self, *args)

    def NodePath(self, nkey):
        r"""
        NodePath(SWBTree self, NKEY nkey) -> list_NKEY

        Parameters
        ----------
        nkey: NKEY

        """
        return _core.SWBTree_NodePath(self, nkey)

    def NodePathObj(self, nkey):
        r"""
        NodePathObj(SWBTree self, NKEY nkey) -> list_SWBNodesp

        Parameters
        ----------
        nkey: NKEY

        """
        return _core.SWBTree_NodePathObj(self, nkey)

    def NodeAncestors(self, nkey):
        r"""
        NodeAncestors(SWBTree self, NKEY nkey) -> list_NKEY

        Parameters
        ----------
        nkey: NKEY

        """
        return _core.SWBTree_NodeAncestors(self, nkey)

    def NodeAncestorsObj(self, nkey):
        r"""
        NodeAncestorsObj(SWBTree self, NKEY nkey) -> list_SWBNodesp

        Parameters
        ----------
        nkey: NKEY

        """
        return _core.SWBTree_NodeAncestorsObj(self, nkey)

    def NodeChildren(self, *args):
        r"""
        NodeChildren(SWBTree self, NKEY nkey, string scenario=ALL) -> list_NKEY

        Parameters
        ----------
        nkey: NKEY
        scenario: str

        """
        return _core.SWBTree_NodeChildren(self, *args)

    def NodeChildrenObj(self, *args):
        r"""
        NodeChildrenObj(SWBTree self, NKEY nkey, string scenario=ALL) -> list_SWBNodesp

        Parameters
        ----------
        nkey: NKEY
        scenario: str

        """
        return _core.SWBTree_NodeChildrenObj(self, *args)

    def AllNodes(self, *args):
        r"""
        AllNodes(SWBTree self, string scnr=ALL, string order="any", string updatecmd="") -> list_NKEY

        Parameters
        ----------
        scnr: str
        order: str
        updatecmd: str

        """
        return _core.SWBTree_AllNodes(self, *args)

    def AllNodesObj(self, *args):
        r"""
        AllNodesObj(SWBTree self, string scnr=ALL, string order="any", string updatecmd="") -> list_SWBNodesp

        Parameters
        ----------
        scnr: str
        order: str
        updatecmd: str

        """
        return _core.SWBTree_AllNodesObj(self, *args)

    def AllStepNodes(self, *args):
        r"""
        AllStepNodes(SWBTree self, STEP atStepi, string scnr=ALL) -> list_NKEY

        Parameters
        ----------
        atStepi: STEP
        scnr: str

        """
        return _core.SWBTree_AllStepNodes(self, *args)

    def AllStepNodesObj(self, *args):
        r"""
        AllStepNodesObj(SWBTree self, STEP atStepi, string scnr=ALL) -> list_SWBNodesp

        Parameters
        ----------
        atStepi: STEP
        scnr: str

        """
        return _core.SWBTree_AllStepNodesObj(self, *args)

    def AllLeafNodes(self, *args):
        r"""
        AllLeafNodes(SWBTree self, string scnr, bool showpruned=True, bool fold=False, string updatecmd="") -> list_NKEY

        Parameters
        ----------
        scnr: str
        showpruned: bool
        fold: bool
        updatecmd: str

        """
        return _core.SWBTree_AllLeafNodes(self, *args)

    def AllLeafNodesObj(self, *args):
        r"""
        AllLeafNodesObj(SWBTree self, string scnr, bool showpruned=True, bool fold=False, string updatecmd="") -> list_SWBNodesp

        Parameters
        ----------
        scnr: str
        showpruned: bool
        fold: bool
        updatecmd: str

        """
        return _core.SWBTree_AllLeafNodesObj(self, *args)
    def __disown__(self):
        self.this.disown()
        _core.disown_SWBTree(self)
        return weakref.proxy(self)

# Register SWBTree in _core:
_core.SWBTree_swigregister(SWBTree)
ERROR = cvar.ERROR
OK = cvar.OK
BACKTRACK = cvar.BACKTRACK

def SWBTree_PrintNode(*args):
    r"""
    SWBTree_PrintNode(std::shared_ptr< SWBTree > const & tree, std::shared_ptr< SWBNode > & node, std::shared_ptr< SWBScenario > const & scenario=0, ostream stream=cout, Tcl_Interp * interp=None, string cmd="") -> int

    Parameters
    ----------
    tree: std::shared_ptr< SWBTree > const &
    node: std::shared_ptr< SWBNode > &
    scenario: std::shared_ptr< SWBScenario > const &
    stream: std::ostream &
    interp: Tcl_Interp *
    cmd: str

    """
    return _core.SWBTree_PrintNode(*args)

def SWBTree_ResetNode(*args):
    r"""
    SWBTree_ResetNode(std::shared_ptr< SWBTree > const & tree, std::shared_ptr< SWBNode > & node, std::shared_ptr< SWBScenario > const & scenario=0, ostream stream=cout, Tcl_Interp * interp=None, string cmd="") -> int

    Parameters
    ----------
    tree: std::shared_ptr< SWBTree > const &
    node: std::shared_ptr< SWBNode > &
    scenario: std::shared_ptr< SWBScenario > const &
    stream: std::ostream &
    interp: Tcl_Interp *
    cmd: str

    """
    return _core.SWBTree_ResetNode(*args)

def SWBTree_InitNode(*args):
    r"""
    SWBTree_InitNode(std::shared_ptr< SWBTree > const & tree, std::shared_ptr< SWBNode > & node, std::shared_ptr< SWBScenario > const & scenario=0, ostream stream=cout, Tcl_Interp * interp=None, string cmd="") -> int

    Parameters
    ----------
    tree: std::shared_ptr< SWBTree > const &
    node: std::shared_ptr< SWBNode > &
    scenario: std::shared_ptr< SWBScenario > const &
    stream: std::ostream &
    interp: Tcl_Interp *
    cmd: str

    """
    return _core.SWBTree_InitNode(*args)
SWBTree.TAGGROUP_NAME_TREE = _core.cvar.SWBTree_TAGGROUP_NAME_TREE

class SWBExperiment(SWBFlow):
    r"""Proxy of C++ SWBExperiment class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nodes, nr, flow):
        r"""
        __init__(SWBExperiment self, list_SWBNodesp nodes, int const nr, SWBFlow flow) -> SWBExperiment

        Parameters
        ----------
        nodes: list
        nr: int const
        flow: SWBFlow

        """
        if self.__class__ == SWBExperiment:
            _self = None
        else:
            _self = self
        _core.SWBExperiment_swiginit(self, _core.new_SWBExperiment(_self, nodes, nr, flow))
    __swig_destroy__ = _core.delete_SWBExperiment

    def GetExperimentNr(self):
        r"""GetExperimentNr(SWBExperiment self) -> int"""
        return _core.SWBExperiment_GetExperimentNr(self)
    def __disown__(self):
        self.this.disown()
        _core.disown_SWBExperiment(self)
        return weakref.proxy(self)

# Register SWBExperiment in _core:
_core.SWBExperiment_swigregister(SWBExperiment)

class SWBSingleUIDGenerator(object):
    r"""Proxy of C++ SWBSingleUIDGenerator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def Inst(*args):
        r"""
        Inst(map_NKEY_SWBNode nmap) -> std::unique_ptr< SWBSingleUIDGenerator >

        Parameters
        ----------
        nmap: keyNodeStdMap &

        Inst() -> std::unique_ptr< SWBSingleUIDGenerator > &
        """
        return _core.SWBSingleUIDGenerator_Inst(*args)

    def GetUID(self):
        r"""GetUID(SWBSingleUIDGenerator self) -> long"""
        return _core.SWBSingleUIDGenerator_GetUID(self)
    __swig_destroy__ = _core.delete_SWBSingleUIDGenerator

# Register SWBSingleUIDGenerator in _core:
_core.SWBSingleUIDGenerator_swigregister(SWBSingleUIDGenerator)

def SWBSingleUIDGenerator_Inst(*args):
    r"""
    SWBSingleUIDGenerator_Inst(map_NKEY_SWBNode nmap) -> std::unique_ptr< SWBSingleUIDGenerator >

    Parameters
    ----------
    nmap: keyNodeStdMap &

    SWBSingleUIDGenerator_Inst() -> std::unique_ptr< SWBSingleUIDGenerator > &
    """
    return _core.SWBSingleUIDGenerator_Inst(*args)

class SWBExecGraph(object):
    r"""Proxy of C++ SWBExecGraph class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""
        __init__(SWBExecGraph self) -> SWBExecGraph

        Parameters
        ----------
        self: object

        """
        if self.__class__ == SWBExecGraph:
            _self = None
        else:
            _self = self
        _core.SWBExecGraph_swiginit(self, _core.new_SWBExecGraph(_self, ))
    __swig_destroy__ = _core.delete_SWBExecGraph

    def AddJob(self, nkey, argMap, err, check=True):
        r"""
        AddJob(SWBExecGraph self, int nkey, map_s_s argMap, string err, bool check=True) -> bool

        Parameters
        ----------
        nkey: int
        argMap: MapOfStrings
        err: str
        check: bool

        """
        return _core.SWBExecGraph_AddJob(self, nkey, argMap, err, check)

    def SetPath(self, n_path):
        r"""
        SetPath(SWBExecGraph self, string n_path)

        Parameters
        ----------
        n_path: str

        """
        return _core.SWBExecGraph_SetPath(self, n_path)

    def GetPath(self):
        r"""GetPath(SWBExecGraph self) -> string"""
        return _core.SWBExecGraph_GetPath(self)

    def SetName(self, n_name):
        r"""
        SetName(SWBExecGraph self, string n_name)

        Parameters
        ----------
        n_name: str

        """
        return _core.SWBExecGraph_SetName(self, n_name)

    def GetName(self):
        r"""GetName(SWBExecGraph self) -> string"""
        return _core.SWBExecGraph_GetName(self)

    def AddFileDependency(self, parFile, chFile):
        r"""
        AddFileDependency(SWBExecGraph self, string parFile, string chFile)

        Parameters
        ----------
        parFile: str
        chFile: str

        """
        return _core.SWBExecGraph_AddFileDependency(self, parFile, chFile)

    def GetFileDependencies(self):
        r"""GetFileDependencies(SWBExecGraph self) -> FileDep &"""
        return _core.SWBExecGraph_GetFileDependencies(self)

    def AddCheckFile(self, f_name, ch_time):
        r"""
        AddCheckFile(SWBExecGraph self, string f_name, long ch_time)

        Parameters
        ----------
        f_name: str
        ch_time: long

        """
        return _core.SWBExecGraph_AddCheckFile(self, f_name, ch_time)

    def GetCheckFiles(self):
        r"""GetCheckFiles(SWBExecGraph self) -> FileChangeMap &"""
        return _core.SWBExecGraph_GetCheckFiles(self)

    def GetChFileTime(self, f_name, chtime):
        r"""
        GetChFileTime(SWBExecGraph self, string f_name, long & chtime) -> bool

        Parameters
        ----------
        f_name: str
        chtime: long &

        """
        return _core.SWBExecGraph_GetChFileTime(self, f_name, chtime)

    def SetCurTime4CheckFile(self, f_name):
        r"""
        SetCurTime4CheckFile(SWBExecGraph self, string f_name)

        Parameters
        ----------
        f_name: str

        """
        return _core.SWBExecGraph_SetCurTime4CheckFile(self, f_name)

    def GetDependentParents(self, sfile):
        r"""
        GetDependentParents(SWBExecGraph self, string sfile) -> vector_s

        Parameters
        ----------
        sfile: str

        """
        return _core.SWBExecGraph_GetDependentParents(self, sfile)

    def AddParameter(self, err, aname, pname):
        r"""
        AddParameter(SWBExecGraph self, string err, string aname, string pname) -> bool

        Parameters
        ----------
        err: str
        aname: str
        pname: str

        """
        return _core.SWBExecGraph_AddParameter(self, err, aname, pname)

    def CleanParameters(self):
        r"""CleanParameters(SWBExecGraph self)"""
        return _core.SWBExecGraph_CleanParameters(self)

    def InquireParameter(self, err, aname, res):
        r"""
        InquireParameter(SWBExecGraph self, string err, string aname, string res) -> bool

        Parameters
        ----------
        err: str
        aname: str
        res: str

        """
        return _core.SWBExecGraph_InquireParameter(self, err, aname, res)

    def IsLoaded(self):
        r"""IsLoaded(SWBExecGraph self) -> bool"""
        return _core.SWBExecGraph_IsLoaded(self)

    def Clean(self):
        r"""Clean(SWBExecGraph self)"""
        return _core.SWBExecGraph_Clean(self)

    def ChangeNode(self, err, ijob, pname, pval):
        r"""
        ChangeNode(SWBExecGraph self, string err, int ijob, string pname, string pval) -> bool

        Parameters
        ----------
        err: str
        ijob: int
        pname: str
        pval: str

        """
        return _core.SWBExecGraph_ChangeNode(self, err, ijob, pname, pval)

    def InquireNode(self, err, ijob, pname):
        r"""
        InquireNode(SWBExecGraph self, string err, int ijob, string pname) -> string

        Parameters
        ----------
        err: str
        ijob: int
        pname: str

        """
        return _core.SWBExecGraph_InquireNode(self, err, ijob, pname)

    def GetNode(self, nkey):
        r"""
        GetNode(SWBExecGraph self, int nkey) -> std::shared_ptr< SWBExecNode > const

        Parameters
        ----------
        nkey: int

        """
        return _core.SWBExecGraph_GetNode(self, nkey)

    def GetNodes(self):
        r"""GetNodes(SWBExecGraph self) -> std::list< std::shared_ptr< SWBExecNode >,std::allocator< std::shared_ptr< SWBExecNode > > >"""
        return _core.SWBExecGraph_GetNodes(self)
    def __disown__(self):
        self.this.disown()
        _core.disown_SWBExecGraph(self)
        return weakref.proxy(self)

# Register SWBExecGraph in _core:
_core.SWBExecGraph_swigregister(SWBExecGraph)

class SWBExecNode(SWBTagGroupHelper):
    r"""Proxy of C++ SWBExecNode class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(SWBExecNode self, int nkey) -> SWBExecNode

        Parameters
        ----------
        nkey: int

        __init__(SWBExecNode self, int nkey, map_s_s argMap, string err) -> SWBExecNode

        Parameters
        ----------
        nkey: int
        argMap: MapOfStrings
        err: str

        __init__(SWBExecNode self, SWBExecNode other) -> SWBExecNode

        Parameters
        ----------
        other: SWBExecNode const &

        """
        if self.__class__ == SWBExecNode:
            _self = None
        else:
            _self = self
        _core.SWBExecNode_swiginit(self, _core.new_SWBExecNode(_self, *args))
    __swig_destroy__ = _core.delete_SWBExecNode

    def GetNKey(self):
        r"""GetNKey(SWBExecNode self) -> int"""
        return _core.SWBExecNode_GetNKey(self)

    def SetArgument(self, err, pname, pval):
        r"""
        SetArgument(SWBExecNode self, string err, string pname, string pval) -> bool

        Parameters
        ----------
        err: str
        pname: str
        pval: str

        """
        return _core.SWBExecNode_SetArgument(self, err, pname, pval)

    def ResetArguments(self, err, argMap):
        r"""
        ResetArguments(SWBExecNode self, string err, map_s_s argMap) -> bool

        Parameters
        ----------
        err: str
        argMap: MapOfStrings

        """
        return _core.SWBExecNode_ResetArguments(self, err, argMap)

    def InquireArgument(self, err, pname, res):
        r"""
        InquireArgument(SWBExecNode self, string err, string pname, string res) -> bool

        Parameters
        ----------
        err: str
        pname: str
        res: str

        """
        return _core.SWBExecNode_InquireArgument(self, err, pname, res)

    def GetArgument(self, pname):
        r"""
        GetArgument(SWBExecNode self, string pname) -> string

        Parameters
        ----------
        pname: str

        """
        return _core.SWBExecNode_GetArgument(self, pname)

    def GetCustomName(self):
        r"""GetCustomName(SWBExecNode self) -> string"""
        return _core.SWBExecNode_GetCustomName(self)
    m_iDependences = property(_core.SWBExecNode_m_iDependences_get, _core.SWBExecNode_m_iDependences_set, doc=r"""m_iDependences : std::list<(int,std::allocator<(int)>)>""")
    m_sPost = property(_core.SWBExecNode_m_sPost_get, _core.SWBExecNode_m_sPost_set, doc=r"""m_sPost : std::string""")
    m_sPre = property(_core.SWBExecNode_m_sPre_get, _core.SWBExecNode_m_sPre_set, doc=r"""m_sPre : std::string""")
    m_sWdir = property(_core.SWBExecNode_m_sWdir_get, _core.SWBExecNode_m_sWdir_set, doc=r"""m_sWdir : std::string""")
    m_sEdir = property(_core.SWBExecNode_m_sEdir_get, _core.SWBExecNode_m_sEdir_set, doc=r"""m_sEdir : std::string""")
    m_sOut = property(_core.SWBExecNode_m_sOut_get, _core.SWBExecNode_m_sOut_set, doc=r"""m_sOut : std::string""")
    m_sBinary = property(_core.SWBExecNode_m_sBinary_get, _core.SWBExecNode_m_sBinary_set, doc=r"""m_sBinary : std::string""")
    m_sCmd = property(_core.SWBExecNode_m_sCmd_get, _core.SWBExecNode_m_sCmd_set, doc=r"""m_sCmd : std::string""")
    m_sCmdArgs = property(_core.SWBExecNode_m_sCmdArgs_get, _core.SWBExecNode_m_sCmdArgs_set, doc=r"""m_sCmdArgs : std::string""")
    m_sDBTool = property(_core.SWBExecNode_m_sDBTool_get, _core.SWBExecNode_m_sDBTool_set, doc=r"""m_sDBTool : std::string""")
    m_iLineNumber = property(_core.SWBExecNode_m_iLineNumber_get, _core.SWBExecNode_m_iLineNumber_set, doc=r"""m_iLineNumber : int""")
    m_nkey = property(_core.SWBExecNode_m_nkey_get, _core.SWBExecNode_m_nkey_set, doc=r"""m_nkey : int""")
    def __disown__(self):
        self.this.disown()
        _core.disown_SWBExecNode(self)
        return weakref.proxy(self)

# Register SWBExecNode in _core:
_core.SWBExecNode_swigregister(SWBExecNode)
SWBExecNode.TAGGROUP_NAME_EXECUTION_DATA = _core.cvar.SWBExecNode_TAGGROUP_NAME_EXECUTION_DATA

class SWBExecGraphHandler(object):
    r"""Proxy of C++ SWBExecGraphHandler class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def Inst():
        r"""Inst() -> std::unique_ptr< SWBExecGraphHandler > &"""
        return _core.SWBExecGraphHandler_Inst()
    __swig_destroy__ = _core.delete_SWBExecGraphHandler

    def GetGraph(self, *args):
        r"""
        GetGraph(SWBExecGraphHandler self, string name="") -> std::shared_ptr< SWBExecGraph >

        Parameters
        ----------
        name: str

        """
        return _core.SWBExecGraphHandler_GetGraph(self, *args)

    def SetCurrent(self, path):
        r"""
        SetCurrent(SWBExecGraphHandler self, string path) -> bool

        Parameters
        ----------
        path: str

        """
        return _core.SWBExecGraphHandler_SetCurrent(self, path)
    def __disown__(self):
        self.this.disown()
        _core.disown_SWBExecGraphHandler(self)
        return weakref.proxy(self)

# Register SWBExecGraphHandler in _core:
_core.SWBExecGraphHandler_swigregister(SWBExecGraphHandler)

def SWBExecGraphHandler_Inst():
    r"""SWBExecGraphHandler_Inst() -> std::unique_ptr< SWBExecGraphHandler > &"""
    return _core.SWBExecGraphHandler_Inst()

class pair_i_i(object):
    r"""Proxy of C++ std::pair< int,int > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(pair_i_i self) -> pair_i_i
        __init__(pair_i_i self, int first, int second) -> pair_i_i

        Parameters
        ----------
        first: int
        second: int

        __init__(pair_i_i self, pair_i_i other) -> pair_i_i

        Parameters
        ----------
        other: std::pair< int,int > const &

        """
        _core.pair_i_i_swiginit(self, _core.new_pair_i_i(*args))
    first = property(_core.pair_i_i_first_get, _core.pair_i_i_first_set, doc=r"""first : int""")
    second = property(_core.pair_i_i_second_get, _core.pair_i_i_second_set, doc=r"""second : int""")
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _core.delete_pair_i_i

# Register pair_i_i in _core:
_core.pair_i_i_swigregister(pair_i_i)

class vector_s(object):
    r"""Proxy of C++ std::vector< std::string > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(vector_s self) -> SwigPyIterator"""
        return _core.vector_s_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(vector_s self) -> bool"""
        return _core.vector_s___nonzero__(self)

    def __bool__(self):
        r"""__bool__(vector_s self) -> bool"""
        return _core.vector_s___bool__(self)

    def __len__(self):
        r"""__len__(vector_s self) -> std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::size_type"""
        return _core.vector_s___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(vector_s self, std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::difference_type i, std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::difference_type j) -> vector_s

        Parameters
        ----------
        i: std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::difference_type
        j: std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::difference_type

        """
        return _core.vector_s___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(vector_s self, std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::difference_type i, std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::difference_type
        j: std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::difference_type

        __setslice__(vector_s self, std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::difference_type i, std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::difference_type j, vector_s v)

        Parameters
        ----------
        i: std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::difference_type
        j: std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::difference_type
        v: std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::allocator< std::basic_string< char,std::char_traits< char >,std::allocator< char > > > > const &

        """
        return _core.vector_s___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(vector_s self, std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::difference_type i, std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::difference_type
        j: std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::difference_type

        """
        return _core.vector_s___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(vector_s self, std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::difference_type

        __delitem__(vector_s self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _core.vector_s___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(vector_s self, PySliceObject * slice) -> vector_s

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(vector_s self, std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::difference_type i) -> string

        Parameters
        ----------
        i: std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::difference_type

        """
        return _core.vector_s___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(vector_s self, PySliceObject * slice, vector_s v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::allocator< std::basic_string< char,std::char_traits< char >,std::allocator< char > > > > const &

        __setitem__(vector_s self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(vector_s self, std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::difference_type i, string x)

        Parameters
        ----------
        i: std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::difference_type
        x: std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::value_type const &

        """
        return _core.vector_s___setitem__(self, *args)

    def pop(self):
        r"""pop(vector_s self) -> string"""
        return _core.vector_s_pop(self)

    def append(self, x):
        r"""
        append(vector_s self, string x)

        Parameters
        ----------
        x: std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::value_type const &

        """
        return _core.vector_s_append(self, x)

    def empty(self):
        r"""empty(vector_s self) -> bool"""
        return _core.vector_s_empty(self)

    def size(self):
        r"""size(vector_s self) -> std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::size_type"""
        return _core.vector_s_size(self)

    def swap(self, v):
        r"""
        swap(vector_s self, vector_s v)

        Parameters
        ----------
        v: std::vector< std::string > &

        """
        return _core.vector_s_swap(self, v)

    def begin(self):
        r"""begin(vector_s self) -> std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::iterator"""
        return _core.vector_s_begin(self)

    def end(self):
        r"""end(vector_s self) -> std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::iterator"""
        return _core.vector_s_end(self)

    def rbegin(self):
        r"""rbegin(vector_s self) -> std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::reverse_iterator"""
        return _core.vector_s_rbegin(self)

    def rend(self):
        r"""rend(vector_s self) -> std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::reverse_iterator"""
        return _core.vector_s_rend(self)

    def clear(self):
        r"""clear(vector_s self)"""
        return _core.vector_s_clear(self)

    def get_allocator(self):
        r"""get_allocator(vector_s self) -> std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::allocator_type"""
        return _core.vector_s_get_allocator(self)

    def pop_back(self):
        r"""pop_back(vector_s self)"""
        return _core.vector_s_pop_back(self)

    def erase(self, *args):
        r"""
        erase(vector_s self, std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::iterator pos) -> std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::iterator

        Parameters
        ----------
        pos: std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::iterator

        erase(vector_s self, std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::iterator first, std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::iterator last) -> std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::iterator

        Parameters
        ----------
        first: std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::iterator
        last: std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::iterator

        """
        return _core.vector_s_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(vector_s self) -> vector_s
        __init__(vector_s self, vector_s other) -> vector_s

        Parameters
        ----------
        other: std::vector< std::string > const &

        __init__(vector_s self, std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::size_type size) -> vector_s

        Parameters
        ----------
        size: std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::size_type

        __init__(vector_s self, std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::size_type size, string value) -> vector_s

        Parameters
        ----------
        size: std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::size_type
        value: std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::value_type const &

        """
        _core.vector_s_swiginit(self, _core.new_vector_s(*args))

    def push_back(self, x):
        r"""
        push_back(vector_s self, string x)

        Parameters
        ----------
        x: std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::value_type const &

        """
        return _core.vector_s_push_back(self, x)

    def front(self):
        r"""front(vector_s self) -> string"""
        return _core.vector_s_front(self)

    def back(self):
        r"""back(vector_s self) -> string"""
        return _core.vector_s_back(self)

    def assign(self, n, x):
        r"""
        assign(vector_s self, std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::size_type n, string x)

        Parameters
        ----------
        n: std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::size_type
        x: std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::value_type const &

        """
        return _core.vector_s_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(vector_s self, std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::size_type

        resize(vector_s self, std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::size_type new_size, string x)

        Parameters
        ----------
        new_size: std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::size_type
        x: std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::value_type const &

        """
        return _core.vector_s_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(vector_s self, std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::iterator pos, string x) -> std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::iterator

        Parameters
        ----------
        pos: std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::iterator
        x: std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::value_type const &

        insert(vector_s self, std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::iterator pos, std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::size_type n, string x)

        Parameters
        ----------
        pos: std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::iterator
        n: std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::size_type
        x: std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::value_type const &

        """
        return _core.vector_s_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(vector_s self, std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::size_type

        """
        return _core.vector_s_reserve(self, n)

    def capacity(self):
        r"""capacity(vector_s self) -> std::vector< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::size_type"""
        return _core.vector_s_capacity(self)
    __swig_destroy__ = _core.delete_vector_s

# Register vector_s in _core:
_core.vector_s_swigregister(vector_s)

class vector_i(object):
    r"""Proxy of C++ std::vector< int > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(vector_i self) -> SwigPyIterator"""
        return _core.vector_i_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(vector_i self) -> bool"""
        return _core.vector_i___nonzero__(self)

    def __bool__(self):
        r"""__bool__(vector_i self) -> bool"""
        return _core.vector_i___bool__(self)

    def __len__(self):
        r"""__len__(vector_i self) -> std::vector< int >::size_type"""
        return _core.vector_i___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(vector_i self, std::vector< int >::difference_type i, std::vector< int >::difference_type j) -> vector_i

        Parameters
        ----------
        i: std::vector< int >::difference_type
        j: std::vector< int >::difference_type

        """
        return _core.vector_i___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(vector_i self, std::vector< int >::difference_type i, std::vector< int >::difference_type j)

        Parameters
        ----------
        i: std::vector< int >::difference_type
        j: std::vector< int >::difference_type

        __setslice__(vector_i self, std::vector< int >::difference_type i, std::vector< int >::difference_type j, vector_i v)

        Parameters
        ----------
        i: std::vector< int >::difference_type
        j: std::vector< int >::difference_type
        v: std::vector< int,std::allocator< int > > const &

        """
        return _core.vector_i___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(vector_i self, std::vector< int >::difference_type i, std::vector< int >::difference_type j)

        Parameters
        ----------
        i: std::vector< int >::difference_type
        j: std::vector< int >::difference_type

        """
        return _core.vector_i___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(vector_i self, std::vector< int >::difference_type i)

        Parameters
        ----------
        i: std::vector< int >::difference_type

        __delitem__(vector_i self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _core.vector_i___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(vector_i self, PySliceObject * slice) -> vector_i

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(vector_i self, std::vector< int >::difference_type i) -> std::vector< int >::value_type const &

        Parameters
        ----------
        i: std::vector< int >::difference_type

        """
        return _core.vector_i___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(vector_i self, PySliceObject * slice, vector_i v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< int,std::allocator< int > > const &

        __setitem__(vector_i self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(vector_i self, std::vector< int >::difference_type i, std::vector< int >::value_type const & x)

        Parameters
        ----------
        i: std::vector< int >::difference_type
        x: std::vector< int >::value_type const &

        """
        return _core.vector_i___setitem__(self, *args)

    def pop(self):
        r"""pop(vector_i self) -> std::vector< int >::value_type"""
        return _core.vector_i_pop(self)

    def append(self, x):
        r"""
        append(vector_i self, std::vector< int >::value_type const & x)

        Parameters
        ----------
        x: std::vector< int >::value_type const &

        """
        return _core.vector_i_append(self, x)

    def empty(self):
        r"""empty(vector_i self) -> bool"""
        return _core.vector_i_empty(self)

    def size(self):
        r"""size(vector_i self) -> std::vector< int >::size_type"""
        return _core.vector_i_size(self)

    def swap(self, v):
        r"""
        swap(vector_i self, vector_i v)

        Parameters
        ----------
        v: std::vector< int > &

        """
        return _core.vector_i_swap(self, v)

    def begin(self):
        r"""begin(vector_i self) -> std::vector< int >::iterator"""
        return _core.vector_i_begin(self)

    def end(self):
        r"""end(vector_i self) -> std::vector< int >::iterator"""
        return _core.vector_i_end(self)

    def rbegin(self):
        r"""rbegin(vector_i self) -> std::vector< int >::reverse_iterator"""
        return _core.vector_i_rbegin(self)

    def rend(self):
        r"""rend(vector_i self) -> std::vector< int >::reverse_iterator"""
        return _core.vector_i_rend(self)

    def clear(self):
        r"""clear(vector_i self)"""
        return _core.vector_i_clear(self)

    def get_allocator(self):
        r"""get_allocator(vector_i self) -> std::vector< int >::allocator_type"""
        return _core.vector_i_get_allocator(self)

    def pop_back(self):
        r"""pop_back(vector_i self)"""
        return _core.vector_i_pop_back(self)

    def erase(self, *args):
        r"""
        erase(vector_i self, std::vector< int >::iterator pos) -> std::vector< int >::iterator

        Parameters
        ----------
        pos: std::vector< int >::iterator

        erase(vector_i self, std::vector< int >::iterator first, std::vector< int >::iterator last) -> std::vector< int >::iterator

        Parameters
        ----------
        first: std::vector< int >::iterator
        last: std::vector< int >::iterator

        """
        return _core.vector_i_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(vector_i self) -> vector_i
        __init__(vector_i self, vector_i other) -> vector_i

        Parameters
        ----------
        other: std::vector< int > const &

        __init__(vector_i self, std::vector< int >::size_type size) -> vector_i

        Parameters
        ----------
        size: std::vector< int >::size_type

        __init__(vector_i self, std::vector< int >::size_type size, std::vector< int >::value_type const & value) -> vector_i

        Parameters
        ----------
        size: std::vector< int >::size_type
        value: std::vector< int >::value_type const &

        """
        _core.vector_i_swiginit(self, _core.new_vector_i(*args))

    def push_back(self, x):
        r"""
        push_back(vector_i self, std::vector< int >::value_type const & x)

        Parameters
        ----------
        x: std::vector< int >::value_type const &

        """
        return _core.vector_i_push_back(self, x)

    def front(self):
        r"""front(vector_i self) -> std::vector< int >::value_type const &"""
        return _core.vector_i_front(self)

    def back(self):
        r"""back(vector_i self) -> std::vector< int >::value_type const &"""
        return _core.vector_i_back(self)

    def assign(self, n, x):
        r"""
        assign(vector_i self, std::vector< int >::size_type n, std::vector< int >::value_type const & x)

        Parameters
        ----------
        n: std::vector< int >::size_type
        x: std::vector< int >::value_type const &

        """
        return _core.vector_i_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(vector_i self, std::vector< int >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< int >::size_type

        resize(vector_i self, std::vector< int >::size_type new_size, std::vector< int >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< int >::size_type
        x: std::vector< int >::value_type const &

        """
        return _core.vector_i_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(vector_i self, std::vector< int >::iterator pos, std::vector< int >::value_type const & x) -> std::vector< int >::iterator

        Parameters
        ----------
        pos: std::vector< int >::iterator
        x: std::vector< int >::value_type const &

        insert(vector_i self, std::vector< int >::iterator pos, std::vector< int >::size_type n, std::vector< int >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< int >::iterator
        n: std::vector< int >::size_type
        x: std::vector< int >::value_type const &

        """
        return _core.vector_i_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(vector_i self, std::vector< int >::size_type n)

        Parameters
        ----------
        n: std::vector< int >::size_type

        """
        return _core.vector_i_reserve(self, n)

    def capacity(self):
        r"""capacity(vector_i self) -> std::vector< int >::size_type"""
        return _core.vector_i_capacity(self)
    __swig_destroy__ = _core.delete_vector_i

# Register vector_i in _core:
_core.vector_i_swigregister(vector_i)

class vector_SWBNodesp(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< SWBNode > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(vector_SWBNodesp self) -> SwigPyIterator"""
        return _core.vector_SWBNodesp_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(vector_SWBNodesp self) -> bool"""
        return _core.vector_SWBNodesp___nonzero__(self)

    def __bool__(self):
        r"""__bool__(vector_SWBNodesp self) -> bool"""
        return _core.vector_SWBNodesp___bool__(self)

    def __len__(self):
        r"""__len__(vector_SWBNodesp self) -> std::vector< std::shared_ptr< SWBNode > >::size_type"""
        return _core.vector_SWBNodesp___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(vector_SWBNodesp self, std::vector< std::shared_ptr< SWBNode > >::difference_type i, std::vector< std::shared_ptr< SWBNode > >::difference_type j) -> vector_SWBNodesp

        Parameters
        ----------
        i: std::vector< std::shared_ptr< SWBNode > >::difference_type
        j: std::vector< std::shared_ptr< SWBNode > >::difference_type

        """
        return _core.vector_SWBNodesp___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(vector_SWBNodesp self, std::vector< std::shared_ptr< SWBNode > >::difference_type i, std::vector< std::shared_ptr< SWBNode > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< SWBNode > >::difference_type
        j: std::vector< std::shared_ptr< SWBNode > >::difference_type

        __setslice__(vector_SWBNodesp self, std::vector< std::shared_ptr< SWBNode > >::difference_type i, std::vector< std::shared_ptr< SWBNode > >::difference_type j, vector_SWBNodesp v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< SWBNode > >::difference_type
        j: std::vector< std::shared_ptr< SWBNode > >::difference_type
        v: std::vector< std::shared_ptr< SWBNode >,std::allocator< std::shared_ptr< SWBNode > > > const &

        """
        return _core.vector_SWBNodesp___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(vector_SWBNodesp self, std::vector< std::shared_ptr< SWBNode > >::difference_type i, std::vector< std::shared_ptr< SWBNode > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< SWBNode > >::difference_type
        j: std::vector< std::shared_ptr< SWBNode > >::difference_type

        """
        return _core.vector_SWBNodesp___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(vector_SWBNodesp self, std::vector< std::shared_ptr< SWBNode > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< SWBNode > >::difference_type

        __delitem__(vector_SWBNodesp self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _core.vector_SWBNodesp___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(vector_SWBNodesp self, PySliceObject * slice) -> vector_SWBNodesp

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(vector_SWBNodesp self, std::vector< std::shared_ptr< SWBNode > >::difference_type i) -> std::vector< std::shared_ptr< SWBNode > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< SWBNode > >::difference_type

        """
        return _core.vector_SWBNodesp___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(vector_SWBNodesp self, PySliceObject * slice, vector_SWBNodesp v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< SWBNode >,std::allocator< std::shared_ptr< SWBNode > > > const &

        __setitem__(vector_SWBNodesp self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(vector_SWBNodesp self, std::vector< std::shared_ptr< SWBNode > >::difference_type i, std::vector< std::shared_ptr< SWBNode > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< SWBNode > >::difference_type
        x: std::vector< std::shared_ptr< SWBNode > >::value_type const &

        """
        return _core.vector_SWBNodesp___setitem__(self, *args)

    def pop(self):
        r"""pop(vector_SWBNodesp self) -> std::vector< std::shared_ptr< SWBNode > >::value_type"""
        return _core.vector_SWBNodesp_pop(self)

    def append(self, x):
        r"""
        append(vector_SWBNodesp self, std::vector< std::shared_ptr< SWBNode > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< SWBNode > >::value_type const &

        """
        return _core.vector_SWBNodesp_append(self, x)

    def empty(self):
        r"""empty(vector_SWBNodesp self) -> bool"""
        return _core.vector_SWBNodesp_empty(self)

    def size(self):
        r"""size(vector_SWBNodesp self) -> std::vector< std::shared_ptr< SWBNode > >::size_type"""
        return _core.vector_SWBNodesp_size(self)

    def swap(self, v):
        r"""
        swap(vector_SWBNodesp self, vector_SWBNodesp v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< SWBNode > > &

        """
        return _core.vector_SWBNodesp_swap(self, v)

    def begin(self):
        r"""begin(vector_SWBNodesp self) -> std::vector< std::shared_ptr< SWBNode > >::iterator"""
        return _core.vector_SWBNodesp_begin(self)

    def end(self):
        r"""end(vector_SWBNodesp self) -> std::vector< std::shared_ptr< SWBNode > >::iterator"""
        return _core.vector_SWBNodesp_end(self)

    def rbegin(self):
        r"""rbegin(vector_SWBNodesp self) -> std::vector< std::shared_ptr< SWBNode > >::reverse_iterator"""
        return _core.vector_SWBNodesp_rbegin(self)

    def rend(self):
        r"""rend(vector_SWBNodesp self) -> std::vector< std::shared_ptr< SWBNode > >::reverse_iterator"""
        return _core.vector_SWBNodesp_rend(self)

    def clear(self):
        r"""clear(vector_SWBNodesp self)"""
        return _core.vector_SWBNodesp_clear(self)

    def get_allocator(self):
        r"""get_allocator(vector_SWBNodesp self) -> std::vector< std::shared_ptr< SWBNode > >::allocator_type"""
        return _core.vector_SWBNodesp_get_allocator(self)

    def pop_back(self):
        r"""pop_back(vector_SWBNodesp self)"""
        return _core.vector_SWBNodesp_pop_back(self)

    def erase(self, *args):
        r"""
        erase(vector_SWBNodesp self, std::vector< std::shared_ptr< SWBNode > >::iterator pos) -> std::vector< std::shared_ptr< SWBNode > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< SWBNode > >::iterator

        erase(vector_SWBNodesp self, std::vector< std::shared_ptr< SWBNode > >::iterator first, std::vector< std::shared_ptr< SWBNode > >::iterator last) -> std::vector< std::shared_ptr< SWBNode > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< SWBNode > >::iterator
        last: std::vector< std::shared_ptr< SWBNode > >::iterator

        """
        return _core.vector_SWBNodesp_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(vector_SWBNodesp self) -> vector_SWBNodesp
        __init__(vector_SWBNodesp self, vector_SWBNodesp other) -> vector_SWBNodesp

        Parameters
        ----------
        other: std::vector< std::shared_ptr< SWBNode > > const &

        __init__(vector_SWBNodesp self, std::vector< std::shared_ptr< SWBNode > >::size_type size) -> vector_SWBNodesp

        Parameters
        ----------
        size: std::vector< std::shared_ptr< SWBNode > >::size_type

        __init__(vector_SWBNodesp self, std::vector< std::shared_ptr< SWBNode > >::size_type size, std::vector< std::shared_ptr< SWBNode > >::value_type const & value) -> vector_SWBNodesp

        Parameters
        ----------
        size: std::vector< std::shared_ptr< SWBNode > >::size_type
        value: std::vector< std::shared_ptr< SWBNode > >::value_type const &

        """
        _core.vector_SWBNodesp_swiginit(self, _core.new_vector_SWBNodesp(*args))

    def push_back(self, x):
        r"""
        push_back(vector_SWBNodesp self, std::vector< std::shared_ptr< SWBNode > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< SWBNode > >::value_type const &

        """
        return _core.vector_SWBNodesp_push_back(self, x)

    def front(self):
        r"""front(vector_SWBNodesp self) -> std::vector< std::shared_ptr< SWBNode > >::value_type const &"""
        return _core.vector_SWBNodesp_front(self)

    def back(self):
        r"""back(vector_SWBNodesp self) -> std::vector< std::shared_ptr< SWBNode > >::value_type const &"""
        return _core.vector_SWBNodesp_back(self)

    def assign(self, n, x):
        r"""
        assign(vector_SWBNodesp self, std::vector< std::shared_ptr< SWBNode > >::size_type n, std::vector< std::shared_ptr< SWBNode > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< SWBNode > >::size_type
        x: std::vector< std::shared_ptr< SWBNode > >::value_type const &

        """
        return _core.vector_SWBNodesp_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(vector_SWBNodesp self, std::vector< std::shared_ptr< SWBNode > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< SWBNode > >::size_type

        resize(vector_SWBNodesp self, std::vector< std::shared_ptr< SWBNode > >::size_type new_size, std::vector< std::shared_ptr< SWBNode > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< SWBNode > >::size_type
        x: std::vector< std::shared_ptr< SWBNode > >::value_type const &

        """
        return _core.vector_SWBNodesp_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(vector_SWBNodesp self, std::vector< std::shared_ptr< SWBNode > >::iterator pos, std::vector< std::shared_ptr< SWBNode > >::value_type const & x) -> std::vector< std::shared_ptr< SWBNode > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< SWBNode > >::iterator
        x: std::vector< std::shared_ptr< SWBNode > >::value_type const &

        insert(vector_SWBNodesp self, std::vector< std::shared_ptr< SWBNode > >::iterator pos, std::vector< std::shared_ptr< SWBNode > >::size_type n, std::vector< std::shared_ptr< SWBNode > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< SWBNode > >::iterator
        n: std::vector< std::shared_ptr< SWBNode > >::size_type
        x: std::vector< std::shared_ptr< SWBNode > >::value_type const &

        """
        return _core.vector_SWBNodesp_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(vector_SWBNodesp self, std::vector< std::shared_ptr< SWBNode > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< SWBNode > >::size_type

        """
        return _core.vector_SWBNodesp_reserve(self, n)

    def capacity(self):
        r"""capacity(vector_SWBNodesp self) -> std::vector< std::shared_ptr< SWBNode > >::size_type"""
        return _core.vector_SWBNodesp_capacity(self)
    __swig_destroy__ = _core.delete_vector_SWBNodesp

# Register vector_SWBNodesp in _core:
_core.vector_SWBNodesp_swigregister(vector_SWBNodesp)

class list_s(object):
    r"""Proxy of C++ std::list< std::string > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(list_s self) -> SwigPyIterator"""
        return _core.list_s_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(list_s self) -> bool"""
        return _core.list_s___nonzero__(self)

    def __bool__(self):
        r"""__bool__(list_s self) -> bool"""
        return _core.list_s___bool__(self)

    def __len__(self):
        r"""__len__(list_s self) -> std::list< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::size_type"""
        return _core.list_s___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(list_s self, std::list< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::difference_type i, std::list< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::difference_type j) -> list_s

        Parameters
        ----------
        i: std::list< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::difference_type
        j: std::list< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::difference_type

        """
        return _core.list_s___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(list_s self, std::list< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::difference_type i, std::list< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::difference_type j)

        Parameters
        ----------
        i: std::list< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::difference_type
        j: std::list< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::difference_type

        __setslice__(list_s self, std::list< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::difference_type i, std::list< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::difference_type j, list_s v)

        Parameters
        ----------
        i: std::list< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::difference_type
        j: std::list< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::difference_type
        v: std::list< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::allocator< std::basic_string< char,std::char_traits< char >,std::allocator< char > > > > const &

        """
        return _core.list_s___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(list_s self, std::list< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::difference_type i, std::list< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::difference_type j)

        Parameters
        ----------
        i: std::list< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::difference_type
        j: std::list< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::difference_type

        """
        return _core.list_s___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(list_s self, std::list< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::difference_type i)

        Parameters
        ----------
        i: std::list< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::difference_type

        __delitem__(list_s self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _core.list_s___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(list_s self, PySliceObject * slice) -> list_s

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(list_s self, std::list< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::difference_type i) -> string

        Parameters
        ----------
        i: std::list< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::difference_type

        """
        return _core.list_s___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(list_s self, PySliceObject * slice, list_s v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::list< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::allocator< std::basic_string< char,std::char_traits< char >,std::allocator< char > > > > const &

        __setitem__(list_s self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(list_s self, std::list< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::difference_type i, string x)

        Parameters
        ----------
        i: std::list< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::difference_type
        x: std::list< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::value_type const &

        """
        return _core.list_s___setitem__(self, *args)

    def pop(self):
        r"""pop(list_s self) -> string"""
        return _core.list_s_pop(self)

    def append(self, x):
        r"""
        append(list_s self, string x)

        Parameters
        ----------
        x: std::list< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::value_type const &

        """
        return _core.list_s_append(self, x)

    def empty(self):
        r"""empty(list_s self) -> bool"""
        return _core.list_s_empty(self)

    def size(self):
        r"""size(list_s self) -> std::list< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::size_type"""
        return _core.list_s_size(self)

    def swap(self, v):
        r"""
        swap(list_s self, list_s v)

        Parameters
        ----------
        v: std::list< std::string > &

        """
        return _core.list_s_swap(self, v)

    def begin(self):
        r"""begin(list_s self) -> std::list< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::iterator"""
        return _core.list_s_begin(self)

    def end(self):
        r"""end(list_s self) -> std::list< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::iterator"""
        return _core.list_s_end(self)

    def rbegin(self):
        r"""rbegin(list_s self) -> std::list< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::reverse_iterator"""
        return _core.list_s_rbegin(self)

    def rend(self):
        r"""rend(list_s self) -> std::list< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::reverse_iterator"""
        return _core.list_s_rend(self)

    def clear(self):
        r"""clear(list_s self)"""
        return _core.list_s_clear(self)

    def get_allocator(self):
        r"""get_allocator(list_s self) -> std::list< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::allocator_type"""
        return _core.list_s_get_allocator(self)

    def pop_back(self):
        r"""pop_back(list_s self)"""
        return _core.list_s_pop_back(self)

    def erase(self, *args):
        r"""
        erase(list_s self, std::list< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::iterator pos) -> std::list< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::iterator

        Parameters
        ----------
        pos: std::list< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::iterator

        erase(list_s self, std::list< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::iterator first, std::list< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::iterator last) -> std::list< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::iterator

        Parameters
        ----------
        first: std::list< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::iterator
        last: std::list< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::iterator

        """
        return _core.list_s_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(list_s self) -> list_s
        __init__(list_s self, list_s other) -> list_s

        Parameters
        ----------
        other: std::list< std::string > const &

        __init__(list_s self, std::list< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::size_type size) -> list_s

        Parameters
        ----------
        size: std::list< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::size_type

        __init__(list_s self, std::list< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::size_type size, string value) -> list_s

        Parameters
        ----------
        size: std::list< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::size_type
        value: std::list< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::value_type const &

        """
        _core.list_s_swiginit(self, _core.new_list_s(*args))

    def push_back(self, x):
        r"""
        push_back(list_s self, string x)

        Parameters
        ----------
        x: std::list< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::value_type const &

        """
        return _core.list_s_push_back(self, x)

    def front(self):
        r"""front(list_s self) -> string"""
        return _core.list_s_front(self)

    def back(self):
        r"""back(list_s self) -> string"""
        return _core.list_s_back(self)

    def assign(self, n, x):
        r"""
        assign(list_s self, std::list< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::size_type n, string x)

        Parameters
        ----------
        n: std::list< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::size_type
        x: std::list< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::value_type const &

        """
        return _core.list_s_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(list_s self, std::list< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::size_type new_size)

        Parameters
        ----------
        new_size: std::list< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::size_type

        resize(list_s self, std::list< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::size_type new_size, string x)

        Parameters
        ----------
        new_size: std::list< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::size_type
        x: std::list< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::value_type const &

        """
        return _core.list_s_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(list_s self, std::list< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::iterator pos, string x) -> std::list< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::iterator

        Parameters
        ----------
        pos: std::list< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::iterator
        x: std::list< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::value_type const &

        insert(list_s self, std::list< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::iterator pos, std::list< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::size_type n, string x)

        Parameters
        ----------
        pos: std::list< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::iterator
        n: std::list< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::size_type
        x: std::list< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::value_type const &

        """
        return _core.list_s_insert(self, *args)

    def pop_front(self):
        r"""pop_front(list_s self)"""
        return _core.list_s_pop_front(self)

    def push_front(self, x):
        r"""
        push_front(list_s self, string x)

        Parameters
        ----------
        x: std::list< std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::value_type const &

        """
        return _core.list_s_push_front(self, x)

    def reverse(self):
        r"""reverse(list_s self)"""
        return _core.list_s_reverse(self)
    __swig_destroy__ = _core.delete_list_s

# Register list_s in _core:
_core.list_s_swigregister(list_s)

class list_SWBVariablesp(object):
    r"""Proxy of C++ std::list< std::shared_ptr< SWBVariable > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(list_SWBVariablesp self) -> SwigPyIterator"""
        return _core.list_SWBVariablesp_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(list_SWBVariablesp self) -> bool"""
        return _core.list_SWBVariablesp___nonzero__(self)

    def __bool__(self):
        r"""__bool__(list_SWBVariablesp self) -> bool"""
        return _core.list_SWBVariablesp___bool__(self)

    def __len__(self):
        r"""__len__(list_SWBVariablesp self) -> std::list< std::shared_ptr< SWBVariable > >::size_type"""
        return _core.list_SWBVariablesp___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(list_SWBVariablesp self, std::list< std::shared_ptr< SWBVariable > >::difference_type i, std::list< std::shared_ptr< SWBVariable > >::difference_type j) -> list_SWBVariablesp

        Parameters
        ----------
        i: std::list< std::shared_ptr< SWBVariable > >::difference_type
        j: std::list< std::shared_ptr< SWBVariable > >::difference_type

        """
        return _core.list_SWBVariablesp___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(list_SWBVariablesp self, std::list< std::shared_ptr< SWBVariable > >::difference_type i, std::list< std::shared_ptr< SWBVariable > >::difference_type j)

        Parameters
        ----------
        i: std::list< std::shared_ptr< SWBVariable > >::difference_type
        j: std::list< std::shared_ptr< SWBVariable > >::difference_type

        __setslice__(list_SWBVariablesp self, std::list< std::shared_ptr< SWBVariable > >::difference_type i, std::list< std::shared_ptr< SWBVariable > >::difference_type j, list_SWBVariablesp v)

        Parameters
        ----------
        i: std::list< std::shared_ptr< SWBVariable > >::difference_type
        j: std::list< std::shared_ptr< SWBVariable > >::difference_type
        v: std::list< std::shared_ptr< SWBVariable >,std::allocator< std::shared_ptr< SWBVariable > > > const &

        """
        return _core.list_SWBVariablesp___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(list_SWBVariablesp self, std::list< std::shared_ptr< SWBVariable > >::difference_type i, std::list< std::shared_ptr< SWBVariable > >::difference_type j)

        Parameters
        ----------
        i: std::list< std::shared_ptr< SWBVariable > >::difference_type
        j: std::list< std::shared_ptr< SWBVariable > >::difference_type

        """
        return _core.list_SWBVariablesp___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(list_SWBVariablesp self, std::list< std::shared_ptr< SWBVariable > >::difference_type i)

        Parameters
        ----------
        i: std::list< std::shared_ptr< SWBVariable > >::difference_type

        __delitem__(list_SWBVariablesp self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _core.list_SWBVariablesp___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(list_SWBVariablesp self, PySliceObject * slice) -> list_SWBVariablesp

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(list_SWBVariablesp self, std::list< std::shared_ptr< SWBVariable > >::difference_type i) -> std::list< std::shared_ptr< SWBVariable > >::value_type const &

        Parameters
        ----------
        i: std::list< std::shared_ptr< SWBVariable > >::difference_type

        """
        return _core.list_SWBVariablesp___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(list_SWBVariablesp self, PySliceObject * slice, list_SWBVariablesp v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::list< std::shared_ptr< SWBVariable >,std::allocator< std::shared_ptr< SWBVariable > > > const &

        __setitem__(list_SWBVariablesp self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(list_SWBVariablesp self, std::list< std::shared_ptr< SWBVariable > >::difference_type i, std::list< std::shared_ptr< SWBVariable > >::value_type const & x)

        Parameters
        ----------
        i: std::list< std::shared_ptr< SWBVariable > >::difference_type
        x: std::list< std::shared_ptr< SWBVariable > >::value_type const &

        """
        return _core.list_SWBVariablesp___setitem__(self, *args)

    def pop(self):
        r"""pop(list_SWBVariablesp self) -> std::list< std::shared_ptr< SWBVariable > >::value_type"""
        return _core.list_SWBVariablesp_pop(self)

    def append(self, x):
        r"""
        append(list_SWBVariablesp self, std::list< std::shared_ptr< SWBVariable > >::value_type const & x)

        Parameters
        ----------
        x: std::list< std::shared_ptr< SWBVariable > >::value_type const &

        """
        return _core.list_SWBVariablesp_append(self, x)

    def empty(self):
        r"""empty(list_SWBVariablesp self) -> bool"""
        return _core.list_SWBVariablesp_empty(self)

    def size(self):
        r"""size(list_SWBVariablesp self) -> std::list< std::shared_ptr< SWBVariable > >::size_type"""
        return _core.list_SWBVariablesp_size(self)

    def swap(self, v):
        r"""
        swap(list_SWBVariablesp self, list_SWBVariablesp v)

        Parameters
        ----------
        v: std::list< std::shared_ptr< SWBVariable > > &

        """
        return _core.list_SWBVariablesp_swap(self, v)

    def begin(self):
        r"""begin(list_SWBVariablesp self) -> std::list< std::shared_ptr< SWBVariable > >::iterator"""
        return _core.list_SWBVariablesp_begin(self)

    def end(self):
        r"""end(list_SWBVariablesp self) -> std::list< std::shared_ptr< SWBVariable > >::iterator"""
        return _core.list_SWBVariablesp_end(self)

    def rbegin(self):
        r"""rbegin(list_SWBVariablesp self) -> std::list< std::shared_ptr< SWBVariable > >::reverse_iterator"""
        return _core.list_SWBVariablesp_rbegin(self)

    def rend(self):
        r"""rend(list_SWBVariablesp self) -> std::list< std::shared_ptr< SWBVariable > >::reverse_iterator"""
        return _core.list_SWBVariablesp_rend(self)

    def clear(self):
        r"""clear(list_SWBVariablesp self)"""
        return _core.list_SWBVariablesp_clear(self)

    def get_allocator(self):
        r"""get_allocator(list_SWBVariablesp self) -> std::list< std::shared_ptr< SWBVariable > >::allocator_type"""
        return _core.list_SWBVariablesp_get_allocator(self)

    def pop_back(self):
        r"""pop_back(list_SWBVariablesp self)"""
        return _core.list_SWBVariablesp_pop_back(self)

    def erase(self, *args):
        r"""
        erase(list_SWBVariablesp self, std::list< std::shared_ptr< SWBVariable > >::iterator pos) -> std::list< std::shared_ptr< SWBVariable > >::iterator

        Parameters
        ----------
        pos: std::list< std::shared_ptr< SWBVariable > >::iterator

        erase(list_SWBVariablesp self, std::list< std::shared_ptr< SWBVariable > >::iterator first, std::list< std::shared_ptr< SWBVariable > >::iterator last) -> std::list< std::shared_ptr< SWBVariable > >::iterator

        Parameters
        ----------
        first: std::list< std::shared_ptr< SWBVariable > >::iterator
        last: std::list< std::shared_ptr< SWBVariable > >::iterator

        """
        return _core.list_SWBVariablesp_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(list_SWBVariablesp self) -> list_SWBVariablesp
        __init__(list_SWBVariablesp self, list_SWBVariablesp other) -> list_SWBVariablesp

        Parameters
        ----------
        other: std::list< std::shared_ptr< SWBVariable > > const &

        __init__(list_SWBVariablesp self, std::list< std::shared_ptr< SWBVariable > >::size_type size) -> list_SWBVariablesp

        Parameters
        ----------
        size: std::list< std::shared_ptr< SWBVariable > >::size_type

        __init__(list_SWBVariablesp self, std::list< std::shared_ptr< SWBVariable > >::size_type size, std::list< std::shared_ptr< SWBVariable > >::value_type const & value) -> list_SWBVariablesp

        Parameters
        ----------
        size: std::list< std::shared_ptr< SWBVariable > >::size_type
        value: std::list< std::shared_ptr< SWBVariable > >::value_type const &

        """
        _core.list_SWBVariablesp_swiginit(self, _core.new_list_SWBVariablesp(*args))

    def push_back(self, x):
        r"""
        push_back(list_SWBVariablesp self, std::list< std::shared_ptr< SWBVariable > >::value_type const & x)

        Parameters
        ----------
        x: std::list< std::shared_ptr< SWBVariable > >::value_type const &

        """
        return _core.list_SWBVariablesp_push_back(self, x)

    def front(self):
        r"""front(list_SWBVariablesp self) -> std::list< std::shared_ptr< SWBVariable > >::value_type const &"""
        return _core.list_SWBVariablesp_front(self)

    def back(self):
        r"""back(list_SWBVariablesp self) -> std::list< std::shared_ptr< SWBVariable > >::value_type const &"""
        return _core.list_SWBVariablesp_back(self)

    def assign(self, n, x):
        r"""
        assign(list_SWBVariablesp self, std::list< std::shared_ptr< SWBVariable > >::size_type n, std::list< std::shared_ptr< SWBVariable > >::value_type const & x)

        Parameters
        ----------
        n: std::list< std::shared_ptr< SWBVariable > >::size_type
        x: std::list< std::shared_ptr< SWBVariable > >::value_type const &

        """
        return _core.list_SWBVariablesp_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(list_SWBVariablesp self, std::list< std::shared_ptr< SWBVariable > >::size_type new_size)

        Parameters
        ----------
        new_size: std::list< std::shared_ptr< SWBVariable > >::size_type

        resize(list_SWBVariablesp self, std::list< std::shared_ptr< SWBVariable > >::size_type new_size, std::list< std::shared_ptr< SWBVariable > >::value_type const & x)

        Parameters
        ----------
        new_size: std::list< std::shared_ptr< SWBVariable > >::size_type
        x: std::list< std::shared_ptr< SWBVariable > >::value_type const &

        """
        return _core.list_SWBVariablesp_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(list_SWBVariablesp self, std::list< std::shared_ptr< SWBVariable > >::iterator pos, std::list< std::shared_ptr< SWBVariable > >::value_type const & x) -> std::list< std::shared_ptr< SWBVariable > >::iterator

        Parameters
        ----------
        pos: std::list< std::shared_ptr< SWBVariable > >::iterator
        x: std::list< std::shared_ptr< SWBVariable > >::value_type const &

        insert(list_SWBVariablesp self, std::list< std::shared_ptr< SWBVariable > >::iterator pos, std::list< std::shared_ptr< SWBVariable > >::size_type n, std::list< std::shared_ptr< SWBVariable > >::value_type const & x)

        Parameters
        ----------
        pos: std::list< std::shared_ptr< SWBVariable > >::iterator
        n: std::list< std::shared_ptr< SWBVariable > >::size_type
        x: std::list< std::shared_ptr< SWBVariable > >::value_type const &

        """
        return _core.list_SWBVariablesp_insert(self, *args)

    def pop_front(self):
        r"""pop_front(list_SWBVariablesp self)"""
        return _core.list_SWBVariablesp_pop_front(self)

    def push_front(self, x):
        r"""
        push_front(list_SWBVariablesp self, std::list< std::shared_ptr< SWBVariable > >::value_type const & x)

        Parameters
        ----------
        x: std::list< std::shared_ptr< SWBVariable > >::value_type const &

        """
        return _core.list_SWBVariablesp_push_front(self, x)

    def reverse(self):
        r"""reverse(list_SWBVariablesp self)"""
        return _core.list_SWBVariablesp_reverse(self)
    __swig_destroy__ = _core.delete_list_SWBVariablesp

# Register list_SWBVariablesp in _core:
_core.list_SWBVariablesp_swigregister(list_SWBVariablesp)

class list_SWBNodesp(object):
    r"""Proxy of C++ std::list< std::shared_ptr< SWBNode > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(list_SWBNodesp self) -> SwigPyIterator"""
        return _core.list_SWBNodesp_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(list_SWBNodesp self) -> bool"""
        return _core.list_SWBNodesp___nonzero__(self)

    def __bool__(self):
        r"""__bool__(list_SWBNodesp self) -> bool"""
        return _core.list_SWBNodesp___bool__(self)

    def __len__(self):
        r"""__len__(list_SWBNodesp self) -> std::list< std::shared_ptr< SWBNode > >::size_type"""
        return _core.list_SWBNodesp___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(list_SWBNodesp self, std::list< std::shared_ptr< SWBNode > >::difference_type i, std::list< std::shared_ptr< SWBNode > >::difference_type j) -> list_SWBNodesp

        Parameters
        ----------
        i: std::list< std::shared_ptr< SWBNode > >::difference_type
        j: std::list< std::shared_ptr< SWBNode > >::difference_type

        """
        return _core.list_SWBNodesp___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(list_SWBNodesp self, std::list< std::shared_ptr< SWBNode > >::difference_type i, std::list< std::shared_ptr< SWBNode > >::difference_type j)

        Parameters
        ----------
        i: std::list< std::shared_ptr< SWBNode > >::difference_type
        j: std::list< std::shared_ptr< SWBNode > >::difference_type

        __setslice__(list_SWBNodesp self, std::list< std::shared_ptr< SWBNode > >::difference_type i, std::list< std::shared_ptr< SWBNode > >::difference_type j, list_SWBNodesp v)

        Parameters
        ----------
        i: std::list< std::shared_ptr< SWBNode > >::difference_type
        j: std::list< std::shared_ptr< SWBNode > >::difference_type
        v: std::list< std::shared_ptr< SWBNode >,std::allocator< std::shared_ptr< SWBNode > > > const &

        """
        return _core.list_SWBNodesp___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(list_SWBNodesp self, std::list< std::shared_ptr< SWBNode > >::difference_type i, std::list< std::shared_ptr< SWBNode > >::difference_type j)

        Parameters
        ----------
        i: std::list< std::shared_ptr< SWBNode > >::difference_type
        j: std::list< std::shared_ptr< SWBNode > >::difference_type

        """
        return _core.list_SWBNodesp___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(list_SWBNodesp self, std::list< std::shared_ptr< SWBNode > >::difference_type i)

        Parameters
        ----------
        i: std::list< std::shared_ptr< SWBNode > >::difference_type

        __delitem__(list_SWBNodesp self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _core.list_SWBNodesp___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(list_SWBNodesp self, PySliceObject * slice) -> list_SWBNodesp

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(list_SWBNodesp self, std::list< std::shared_ptr< SWBNode > >::difference_type i) -> std::list< std::shared_ptr< SWBNode > >::value_type const &

        Parameters
        ----------
        i: std::list< std::shared_ptr< SWBNode > >::difference_type

        """
        return _core.list_SWBNodesp___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(list_SWBNodesp self, PySliceObject * slice, list_SWBNodesp v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::list< std::shared_ptr< SWBNode >,std::allocator< std::shared_ptr< SWBNode > > > const &

        __setitem__(list_SWBNodesp self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(list_SWBNodesp self, std::list< std::shared_ptr< SWBNode > >::difference_type i, std::list< std::shared_ptr< SWBNode > >::value_type const & x)

        Parameters
        ----------
        i: std::list< std::shared_ptr< SWBNode > >::difference_type
        x: std::list< std::shared_ptr< SWBNode > >::value_type const &

        """
        return _core.list_SWBNodesp___setitem__(self, *args)

    def pop(self):
        r"""pop(list_SWBNodesp self) -> std::list< std::shared_ptr< SWBNode > >::value_type"""
        return _core.list_SWBNodesp_pop(self)

    def append(self, x):
        r"""
        append(list_SWBNodesp self, std::list< std::shared_ptr< SWBNode > >::value_type const & x)

        Parameters
        ----------
        x: std::list< std::shared_ptr< SWBNode > >::value_type const &

        """
        return _core.list_SWBNodesp_append(self, x)

    def empty(self):
        r"""empty(list_SWBNodesp self) -> bool"""
        return _core.list_SWBNodesp_empty(self)

    def size(self):
        r"""size(list_SWBNodesp self) -> std::list< std::shared_ptr< SWBNode > >::size_type"""
        return _core.list_SWBNodesp_size(self)

    def swap(self, v):
        r"""
        swap(list_SWBNodesp self, list_SWBNodesp v)

        Parameters
        ----------
        v: std::list< std::shared_ptr< SWBNode > > &

        """
        return _core.list_SWBNodesp_swap(self, v)

    def begin(self):
        r"""begin(list_SWBNodesp self) -> std::list< std::shared_ptr< SWBNode > >::iterator"""
        return _core.list_SWBNodesp_begin(self)

    def end(self):
        r"""end(list_SWBNodesp self) -> std::list< std::shared_ptr< SWBNode > >::iterator"""
        return _core.list_SWBNodesp_end(self)

    def rbegin(self):
        r"""rbegin(list_SWBNodesp self) -> std::list< std::shared_ptr< SWBNode > >::reverse_iterator"""
        return _core.list_SWBNodesp_rbegin(self)

    def rend(self):
        r"""rend(list_SWBNodesp self) -> std::list< std::shared_ptr< SWBNode > >::reverse_iterator"""
        return _core.list_SWBNodesp_rend(self)

    def clear(self):
        r"""clear(list_SWBNodesp self)"""
        return _core.list_SWBNodesp_clear(self)

    def get_allocator(self):
        r"""get_allocator(list_SWBNodesp self) -> std::list< std::shared_ptr< SWBNode > >::allocator_type"""
        return _core.list_SWBNodesp_get_allocator(self)

    def pop_back(self):
        r"""pop_back(list_SWBNodesp self)"""
        return _core.list_SWBNodesp_pop_back(self)

    def erase(self, *args):
        r"""
        erase(list_SWBNodesp self, std::list< std::shared_ptr< SWBNode > >::iterator pos) -> std::list< std::shared_ptr< SWBNode > >::iterator

        Parameters
        ----------
        pos: std::list< std::shared_ptr< SWBNode > >::iterator

        erase(list_SWBNodesp self, std::list< std::shared_ptr< SWBNode > >::iterator first, std::list< std::shared_ptr< SWBNode > >::iterator last) -> std::list< std::shared_ptr< SWBNode > >::iterator

        Parameters
        ----------
        first: std::list< std::shared_ptr< SWBNode > >::iterator
        last: std::list< std::shared_ptr< SWBNode > >::iterator

        """
        return _core.list_SWBNodesp_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(list_SWBNodesp self) -> list_SWBNodesp
        __init__(list_SWBNodesp self, list_SWBNodesp other) -> list_SWBNodesp

        Parameters
        ----------
        other: std::list< std::shared_ptr< SWBNode > > const &

        __init__(list_SWBNodesp self, std::list< std::shared_ptr< SWBNode > >::size_type size) -> list_SWBNodesp

        Parameters
        ----------
        size: std::list< std::shared_ptr< SWBNode > >::size_type

        __init__(list_SWBNodesp self, std::list< std::shared_ptr< SWBNode > >::size_type size, std::list< std::shared_ptr< SWBNode > >::value_type const & value) -> list_SWBNodesp

        Parameters
        ----------
        size: std::list< std::shared_ptr< SWBNode > >::size_type
        value: std::list< std::shared_ptr< SWBNode > >::value_type const &

        """
        _core.list_SWBNodesp_swiginit(self, _core.new_list_SWBNodesp(*args))

    def push_back(self, x):
        r"""
        push_back(list_SWBNodesp self, std::list< std::shared_ptr< SWBNode > >::value_type const & x)

        Parameters
        ----------
        x: std::list< std::shared_ptr< SWBNode > >::value_type const &

        """
        return _core.list_SWBNodesp_push_back(self, x)

    def front(self):
        r"""front(list_SWBNodesp self) -> std::list< std::shared_ptr< SWBNode > >::value_type const &"""
        return _core.list_SWBNodesp_front(self)

    def back(self):
        r"""back(list_SWBNodesp self) -> std::list< std::shared_ptr< SWBNode > >::value_type const &"""
        return _core.list_SWBNodesp_back(self)

    def assign(self, n, x):
        r"""
        assign(list_SWBNodesp self, std::list< std::shared_ptr< SWBNode > >::size_type n, std::list< std::shared_ptr< SWBNode > >::value_type const & x)

        Parameters
        ----------
        n: std::list< std::shared_ptr< SWBNode > >::size_type
        x: std::list< std::shared_ptr< SWBNode > >::value_type const &

        """
        return _core.list_SWBNodesp_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(list_SWBNodesp self, std::list< std::shared_ptr< SWBNode > >::size_type new_size)

        Parameters
        ----------
        new_size: std::list< std::shared_ptr< SWBNode > >::size_type

        resize(list_SWBNodesp self, std::list< std::shared_ptr< SWBNode > >::size_type new_size, std::list< std::shared_ptr< SWBNode > >::value_type const & x)

        Parameters
        ----------
        new_size: std::list< std::shared_ptr< SWBNode > >::size_type
        x: std::list< std::shared_ptr< SWBNode > >::value_type const &

        """
        return _core.list_SWBNodesp_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(list_SWBNodesp self, std::list< std::shared_ptr< SWBNode > >::iterator pos, std::list< std::shared_ptr< SWBNode > >::value_type const & x) -> std::list< std::shared_ptr< SWBNode > >::iterator

        Parameters
        ----------
        pos: std::list< std::shared_ptr< SWBNode > >::iterator
        x: std::list< std::shared_ptr< SWBNode > >::value_type const &

        insert(list_SWBNodesp self, std::list< std::shared_ptr< SWBNode > >::iterator pos, std::list< std::shared_ptr< SWBNode > >::size_type n, std::list< std::shared_ptr< SWBNode > >::value_type const & x)

        Parameters
        ----------
        pos: std::list< std::shared_ptr< SWBNode > >::iterator
        n: std::list< std::shared_ptr< SWBNode > >::size_type
        x: std::list< std::shared_ptr< SWBNode > >::value_type const &

        """
        return _core.list_SWBNodesp_insert(self, *args)

    def pop_front(self):
        r"""pop_front(list_SWBNodesp self)"""
        return _core.list_SWBNodesp_pop_front(self)

    def push_front(self, x):
        r"""
        push_front(list_SWBNodesp self, std::list< std::shared_ptr< SWBNode > >::value_type const & x)

        Parameters
        ----------
        x: std::list< std::shared_ptr< SWBNode > >::value_type const &

        """
        return _core.list_SWBNodesp_push_front(self, x)

    def reverse(self):
        r"""reverse(list_SWBNodesp self)"""
        return _core.list_SWBNodesp_reverse(self)
    __swig_destroy__ = _core.delete_list_SWBNodesp

# Register list_SWBNodesp in _core:
_core.list_SWBNodesp_swigregister(list_SWBNodesp)

class list_SWBTreesp(object):
    r"""Proxy of C++ std::list< std::shared_ptr< SWBTree > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(list_SWBTreesp self) -> SwigPyIterator"""
        return _core.list_SWBTreesp_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(list_SWBTreesp self) -> bool"""
        return _core.list_SWBTreesp___nonzero__(self)

    def __bool__(self):
        r"""__bool__(list_SWBTreesp self) -> bool"""
        return _core.list_SWBTreesp___bool__(self)

    def __len__(self):
        r"""__len__(list_SWBTreesp self) -> std::list< std::shared_ptr< SWBTree > >::size_type"""
        return _core.list_SWBTreesp___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(list_SWBTreesp self, std::list< std::shared_ptr< SWBTree > >::difference_type i, std::list< std::shared_ptr< SWBTree > >::difference_type j) -> list_SWBTreesp

        Parameters
        ----------
        i: std::list< std::shared_ptr< SWBTree > >::difference_type
        j: std::list< std::shared_ptr< SWBTree > >::difference_type

        """
        return _core.list_SWBTreesp___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(list_SWBTreesp self, std::list< std::shared_ptr< SWBTree > >::difference_type i, std::list< std::shared_ptr< SWBTree > >::difference_type j)

        Parameters
        ----------
        i: std::list< std::shared_ptr< SWBTree > >::difference_type
        j: std::list< std::shared_ptr< SWBTree > >::difference_type

        __setslice__(list_SWBTreesp self, std::list< std::shared_ptr< SWBTree > >::difference_type i, std::list< std::shared_ptr< SWBTree > >::difference_type j, list_SWBTreesp v)

        Parameters
        ----------
        i: std::list< std::shared_ptr< SWBTree > >::difference_type
        j: std::list< std::shared_ptr< SWBTree > >::difference_type
        v: std::list< std::shared_ptr< SWBTree >,std::allocator< std::shared_ptr< SWBTree > > > const &

        """
        return _core.list_SWBTreesp___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(list_SWBTreesp self, std::list< std::shared_ptr< SWBTree > >::difference_type i, std::list< std::shared_ptr< SWBTree > >::difference_type j)

        Parameters
        ----------
        i: std::list< std::shared_ptr< SWBTree > >::difference_type
        j: std::list< std::shared_ptr< SWBTree > >::difference_type

        """
        return _core.list_SWBTreesp___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(list_SWBTreesp self, std::list< std::shared_ptr< SWBTree > >::difference_type i)

        Parameters
        ----------
        i: std::list< std::shared_ptr< SWBTree > >::difference_type

        __delitem__(list_SWBTreesp self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _core.list_SWBTreesp___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(list_SWBTreesp self, PySliceObject * slice) -> list_SWBTreesp

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(list_SWBTreesp self, std::list< std::shared_ptr< SWBTree > >::difference_type i) -> std::list< std::shared_ptr< SWBTree > >::value_type const &

        Parameters
        ----------
        i: std::list< std::shared_ptr< SWBTree > >::difference_type

        """
        return _core.list_SWBTreesp___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(list_SWBTreesp self, PySliceObject * slice, list_SWBTreesp v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::list< std::shared_ptr< SWBTree >,std::allocator< std::shared_ptr< SWBTree > > > const &

        __setitem__(list_SWBTreesp self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(list_SWBTreesp self, std::list< std::shared_ptr< SWBTree > >::difference_type i, std::list< std::shared_ptr< SWBTree > >::value_type const & x)

        Parameters
        ----------
        i: std::list< std::shared_ptr< SWBTree > >::difference_type
        x: std::list< std::shared_ptr< SWBTree > >::value_type const &

        """
        return _core.list_SWBTreesp___setitem__(self, *args)

    def pop(self):
        r"""pop(list_SWBTreesp self) -> std::list< std::shared_ptr< SWBTree > >::value_type"""
        return _core.list_SWBTreesp_pop(self)

    def append(self, x):
        r"""
        append(list_SWBTreesp self, std::list< std::shared_ptr< SWBTree > >::value_type const & x)

        Parameters
        ----------
        x: std::list< std::shared_ptr< SWBTree > >::value_type const &

        """
        return _core.list_SWBTreesp_append(self, x)

    def empty(self):
        r"""empty(list_SWBTreesp self) -> bool"""
        return _core.list_SWBTreesp_empty(self)

    def size(self):
        r"""size(list_SWBTreesp self) -> std::list< std::shared_ptr< SWBTree > >::size_type"""
        return _core.list_SWBTreesp_size(self)

    def swap(self, v):
        r"""
        swap(list_SWBTreesp self, list_SWBTreesp v)

        Parameters
        ----------
        v: std::list< std::shared_ptr< SWBTree > > &

        """
        return _core.list_SWBTreesp_swap(self, v)

    def begin(self):
        r"""begin(list_SWBTreesp self) -> std::list< std::shared_ptr< SWBTree > >::iterator"""
        return _core.list_SWBTreesp_begin(self)

    def end(self):
        r"""end(list_SWBTreesp self) -> std::list< std::shared_ptr< SWBTree > >::iterator"""
        return _core.list_SWBTreesp_end(self)

    def rbegin(self):
        r"""rbegin(list_SWBTreesp self) -> std::list< std::shared_ptr< SWBTree > >::reverse_iterator"""
        return _core.list_SWBTreesp_rbegin(self)

    def rend(self):
        r"""rend(list_SWBTreesp self) -> std::list< std::shared_ptr< SWBTree > >::reverse_iterator"""
        return _core.list_SWBTreesp_rend(self)

    def clear(self):
        r"""clear(list_SWBTreesp self)"""
        return _core.list_SWBTreesp_clear(self)

    def get_allocator(self):
        r"""get_allocator(list_SWBTreesp self) -> std::list< std::shared_ptr< SWBTree > >::allocator_type"""
        return _core.list_SWBTreesp_get_allocator(self)

    def pop_back(self):
        r"""pop_back(list_SWBTreesp self)"""
        return _core.list_SWBTreesp_pop_back(self)

    def erase(self, *args):
        r"""
        erase(list_SWBTreesp self, std::list< std::shared_ptr< SWBTree > >::iterator pos) -> std::list< std::shared_ptr< SWBTree > >::iterator

        Parameters
        ----------
        pos: std::list< std::shared_ptr< SWBTree > >::iterator

        erase(list_SWBTreesp self, std::list< std::shared_ptr< SWBTree > >::iterator first, std::list< std::shared_ptr< SWBTree > >::iterator last) -> std::list< std::shared_ptr< SWBTree > >::iterator

        Parameters
        ----------
        first: std::list< std::shared_ptr< SWBTree > >::iterator
        last: std::list< std::shared_ptr< SWBTree > >::iterator

        """
        return _core.list_SWBTreesp_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(list_SWBTreesp self) -> list_SWBTreesp
        __init__(list_SWBTreesp self, list_SWBTreesp other) -> list_SWBTreesp

        Parameters
        ----------
        other: std::list< std::shared_ptr< SWBTree > > const &

        __init__(list_SWBTreesp self, std::list< std::shared_ptr< SWBTree > >::size_type size) -> list_SWBTreesp

        Parameters
        ----------
        size: std::list< std::shared_ptr< SWBTree > >::size_type

        __init__(list_SWBTreesp self, std::list< std::shared_ptr< SWBTree > >::size_type size, std::list< std::shared_ptr< SWBTree > >::value_type const & value) -> list_SWBTreesp

        Parameters
        ----------
        size: std::list< std::shared_ptr< SWBTree > >::size_type
        value: std::list< std::shared_ptr< SWBTree > >::value_type const &

        """
        _core.list_SWBTreesp_swiginit(self, _core.new_list_SWBTreesp(*args))

    def push_back(self, x):
        r"""
        push_back(list_SWBTreesp self, std::list< std::shared_ptr< SWBTree > >::value_type const & x)

        Parameters
        ----------
        x: std::list< std::shared_ptr< SWBTree > >::value_type const &

        """
        return _core.list_SWBTreesp_push_back(self, x)

    def front(self):
        r"""front(list_SWBTreesp self) -> std::list< std::shared_ptr< SWBTree > >::value_type const &"""
        return _core.list_SWBTreesp_front(self)

    def back(self):
        r"""back(list_SWBTreesp self) -> std::list< std::shared_ptr< SWBTree > >::value_type const &"""
        return _core.list_SWBTreesp_back(self)

    def assign(self, n, x):
        r"""
        assign(list_SWBTreesp self, std::list< std::shared_ptr< SWBTree > >::size_type n, std::list< std::shared_ptr< SWBTree > >::value_type const & x)

        Parameters
        ----------
        n: std::list< std::shared_ptr< SWBTree > >::size_type
        x: std::list< std::shared_ptr< SWBTree > >::value_type const &

        """
        return _core.list_SWBTreesp_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(list_SWBTreesp self, std::list< std::shared_ptr< SWBTree > >::size_type new_size)

        Parameters
        ----------
        new_size: std::list< std::shared_ptr< SWBTree > >::size_type

        resize(list_SWBTreesp self, std::list< std::shared_ptr< SWBTree > >::size_type new_size, std::list< std::shared_ptr< SWBTree > >::value_type const & x)

        Parameters
        ----------
        new_size: std::list< std::shared_ptr< SWBTree > >::size_type
        x: std::list< std::shared_ptr< SWBTree > >::value_type const &

        """
        return _core.list_SWBTreesp_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(list_SWBTreesp self, std::list< std::shared_ptr< SWBTree > >::iterator pos, std::list< std::shared_ptr< SWBTree > >::value_type const & x) -> std::list< std::shared_ptr< SWBTree > >::iterator

        Parameters
        ----------
        pos: std::list< std::shared_ptr< SWBTree > >::iterator
        x: std::list< std::shared_ptr< SWBTree > >::value_type const &

        insert(list_SWBTreesp self, std::list< std::shared_ptr< SWBTree > >::iterator pos, std::list< std::shared_ptr< SWBTree > >::size_type n, std::list< std::shared_ptr< SWBTree > >::value_type const & x)

        Parameters
        ----------
        pos: std::list< std::shared_ptr< SWBTree > >::iterator
        n: std::list< std::shared_ptr< SWBTree > >::size_type
        x: std::list< std::shared_ptr< SWBTree > >::value_type const &

        """
        return _core.list_SWBTreesp_insert(self, *args)

    def pop_front(self):
        r"""pop_front(list_SWBTreesp self)"""
        return _core.list_SWBTreesp_pop_front(self)

    def push_front(self, x):
        r"""
        push_front(list_SWBTreesp self, std::list< std::shared_ptr< SWBTree > >::value_type const & x)

        Parameters
        ----------
        x: std::list< std::shared_ptr< SWBTree > >::value_type const &

        """
        return _core.list_SWBTreesp_push_front(self, x)

    def reverse(self):
        r"""reverse(list_SWBTreesp self)"""
        return _core.list_SWBTreesp_reverse(self)
    __swig_destroy__ = _core.delete_list_SWBTreesp

# Register list_SWBTreesp in _core:
_core.list_SWBTreesp_swigregister(list_SWBTreesp)

class list_SWBValuesp(object):
    r"""Proxy of C++ std::list< std::shared_ptr< SWBValue > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(list_SWBValuesp self) -> SwigPyIterator"""
        return _core.list_SWBValuesp_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(list_SWBValuesp self) -> bool"""
        return _core.list_SWBValuesp___nonzero__(self)

    def __bool__(self):
        r"""__bool__(list_SWBValuesp self) -> bool"""
        return _core.list_SWBValuesp___bool__(self)

    def __len__(self):
        r"""__len__(list_SWBValuesp self) -> std::list< std::shared_ptr< SWBValue > >::size_type"""
        return _core.list_SWBValuesp___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(list_SWBValuesp self, std::list< std::shared_ptr< SWBValue > >::difference_type i, std::list< std::shared_ptr< SWBValue > >::difference_type j) -> list_SWBValuesp

        Parameters
        ----------
        i: std::list< std::shared_ptr< SWBValue > >::difference_type
        j: std::list< std::shared_ptr< SWBValue > >::difference_type

        """
        return _core.list_SWBValuesp___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(list_SWBValuesp self, std::list< std::shared_ptr< SWBValue > >::difference_type i, std::list< std::shared_ptr< SWBValue > >::difference_type j)

        Parameters
        ----------
        i: std::list< std::shared_ptr< SWBValue > >::difference_type
        j: std::list< std::shared_ptr< SWBValue > >::difference_type

        __setslice__(list_SWBValuesp self, std::list< std::shared_ptr< SWBValue > >::difference_type i, std::list< std::shared_ptr< SWBValue > >::difference_type j, list_SWBValuesp v)

        Parameters
        ----------
        i: std::list< std::shared_ptr< SWBValue > >::difference_type
        j: std::list< std::shared_ptr< SWBValue > >::difference_type
        v: std::list< std::shared_ptr< SWBValue >,std::allocator< std::shared_ptr< SWBValue > > > const &

        """
        return _core.list_SWBValuesp___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(list_SWBValuesp self, std::list< std::shared_ptr< SWBValue > >::difference_type i, std::list< std::shared_ptr< SWBValue > >::difference_type j)

        Parameters
        ----------
        i: std::list< std::shared_ptr< SWBValue > >::difference_type
        j: std::list< std::shared_ptr< SWBValue > >::difference_type

        """
        return _core.list_SWBValuesp___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(list_SWBValuesp self, std::list< std::shared_ptr< SWBValue > >::difference_type i)

        Parameters
        ----------
        i: std::list< std::shared_ptr< SWBValue > >::difference_type

        __delitem__(list_SWBValuesp self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _core.list_SWBValuesp___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(list_SWBValuesp self, PySliceObject * slice) -> list_SWBValuesp

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(list_SWBValuesp self, std::list< std::shared_ptr< SWBValue > >::difference_type i) -> std::list< std::shared_ptr< SWBValue > >::value_type const &

        Parameters
        ----------
        i: std::list< std::shared_ptr< SWBValue > >::difference_type

        """
        return _core.list_SWBValuesp___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(list_SWBValuesp self, PySliceObject * slice, list_SWBValuesp v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::list< std::shared_ptr< SWBValue >,std::allocator< std::shared_ptr< SWBValue > > > const &

        __setitem__(list_SWBValuesp self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(list_SWBValuesp self, std::list< std::shared_ptr< SWBValue > >::difference_type i, std::list< std::shared_ptr< SWBValue > >::value_type const & x)

        Parameters
        ----------
        i: std::list< std::shared_ptr< SWBValue > >::difference_type
        x: std::list< std::shared_ptr< SWBValue > >::value_type const &

        """
        return _core.list_SWBValuesp___setitem__(self, *args)

    def pop(self):
        r"""pop(list_SWBValuesp self) -> std::list< std::shared_ptr< SWBValue > >::value_type"""
        return _core.list_SWBValuesp_pop(self)

    def append(self, x):
        r"""
        append(list_SWBValuesp self, std::list< std::shared_ptr< SWBValue > >::value_type const & x)

        Parameters
        ----------
        x: std::list< std::shared_ptr< SWBValue > >::value_type const &

        """
        return _core.list_SWBValuesp_append(self, x)

    def empty(self):
        r"""empty(list_SWBValuesp self) -> bool"""
        return _core.list_SWBValuesp_empty(self)

    def size(self):
        r"""size(list_SWBValuesp self) -> std::list< std::shared_ptr< SWBValue > >::size_type"""
        return _core.list_SWBValuesp_size(self)

    def swap(self, v):
        r"""
        swap(list_SWBValuesp self, list_SWBValuesp v)

        Parameters
        ----------
        v: std::list< std::shared_ptr< SWBValue > > &

        """
        return _core.list_SWBValuesp_swap(self, v)

    def begin(self):
        r"""begin(list_SWBValuesp self) -> std::list< std::shared_ptr< SWBValue > >::iterator"""
        return _core.list_SWBValuesp_begin(self)

    def end(self):
        r"""end(list_SWBValuesp self) -> std::list< std::shared_ptr< SWBValue > >::iterator"""
        return _core.list_SWBValuesp_end(self)

    def rbegin(self):
        r"""rbegin(list_SWBValuesp self) -> std::list< std::shared_ptr< SWBValue > >::reverse_iterator"""
        return _core.list_SWBValuesp_rbegin(self)

    def rend(self):
        r"""rend(list_SWBValuesp self) -> std::list< std::shared_ptr< SWBValue > >::reverse_iterator"""
        return _core.list_SWBValuesp_rend(self)

    def clear(self):
        r"""clear(list_SWBValuesp self)"""
        return _core.list_SWBValuesp_clear(self)

    def get_allocator(self):
        r"""get_allocator(list_SWBValuesp self) -> std::list< std::shared_ptr< SWBValue > >::allocator_type"""
        return _core.list_SWBValuesp_get_allocator(self)

    def pop_back(self):
        r"""pop_back(list_SWBValuesp self)"""
        return _core.list_SWBValuesp_pop_back(self)

    def erase(self, *args):
        r"""
        erase(list_SWBValuesp self, std::list< std::shared_ptr< SWBValue > >::iterator pos) -> std::list< std::shared_ptr< SWBValue > >::iterator

        Parameters
        ----------
        pos: std::list< std::shared_ptr< SWBValue > >::iterator

        erase(list_SWBValuesp self, std::list< std::shared_ptr< SWBValue > >::iterator first, std::list< std::shared_ptr< SWBValue > >::iterator last) -> std::list< std::shared_ptr< SWBValue > >::iterator

        Parameters
        ----------
        first: std::list< std::shared_ptr< SWBValue > >::iterator
        last: std::list< std::shared_ptr< SWBValue > >::iterator

        """
        return _core.list_SWBValuesp_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(list_SWBValuesp self) -> list_SWBValuesp
        __init__(list_SWBValuesp self, list_SWBValuesp other) -> list_SWBValuesp

        Parameters
        ----------
        other: std::list< std::shared_ptr< SWBValue > > const &

        __init__(list_SWBValuesp self, std::list< std::shared_ptr< SWBValue > >::size_type size) -> list_SWBValuesp

        Parameters
        ----------
        size: std::list< std::shared_ptr< SWBValue > >::size_type

        __init__(list_SWBValuesp self, std::list< std::shared_ptr< SWBValue > >::size_type size, std::list< std::shared_ptr< SWBValue > >::value_type const & value) -> list_SWBValuesp

        Parameters
        ----------
        size: std::list< std::shared_ptr< SWBValue > >::size_type
        value: std::list< std::shared_ptr< SWBValue > >::value_type const &

        """
        _core.list_SWBValuesp_swiginit(self, _core.new_list_SWBValuesp(*args))

    def push_back(self, x):
        r"""
        push_back(list_SWBValuesp self, std::list< std::shared_ptr< SWBValue > >::value_type const & x)

        Parameters
        ----------
        x: std::list< std::shared_ptr< SWBValue > >::value_type const &

        """
        return _core.list_SWBValuesp_push_back(self, x)

    def front(self):
        r"""front(list_SWBValuesp self) -> std::list< std::shared_ptr< SWBValue > >::value_type const &"""
        return _core.list_SWBValuesp_front(self)

    def back(self):
        r"""back(list_SWBValuesp self) -> std::list< std::shared_ptr< SWBValue > >::value_type const &"""
        return _core.list_SWBValuesp_back(self)

    def assign(self, n, x):
        r"""
        assign(list_SWBValuesp self, std::list< std::shared_ptr< SWBValue > >::size_type n, std::list< std::shared_ptr< SWBValue > >::value_type const & x)

        Parameters
        ----------
        n: std::list< std::shared_ptr< SWBValue > >::size_type
        x: std::list< std::shared_ptr< SWBValue > >::value_type const &

        """
        return _core.list_SWBValuesp_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(list_SWBValuesp self, std::list< std::shared_ptr< SWBValue > >::size_type new_size)

        Parameters
        ----------
        new_size: std::list< std::shared_ptr< SWBValue > >::size_type

        resize(list_SWBValuesp self, std::list< std::shared_ptr< SWBValue > >::size_type new_size, std::list< std::shared_ptr< SWBValue > >::value_type const & x)

        Parameters
        ----------
        new_size: std::list< std::shared_ptr< SWBValue > >::size_type
        x: std::list< std::shared_ptr< SWBValue > >::value_type const &

        """
        return _core.list_SWBValuesp_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(list_SWBValuesp self, std::list< std::shared_ptr< SWBValue > >::iterator pos, std::list< std::shared_ptr< SWBValue > >::value_type const & x) -> std::list< std::shared_ptr< SWBValue > >::iterator

        Parameters
        ----------
        pos: std::list< std::shared_ptr< SWBValue > >::iterator
        x: std::list< std::shared_ptr< SWBValue > >::value_type const &

        insert(list_SWBValuesp self, std::list< std::shared_ptr< SWBValue > >::iterator pos, std::list< std::shared_ptr< SWBValue > >::size_type n, std::list< std::shared_ptr< SWBValue > >::value_type const & x)

        Parameters
        ----------
        pos: std::list< std::shared_ptr< SWBValue > >::iterator
        n: std::list< std::shared_ptr< SWBValue > >::size_type
        x: std::list< std::shared_ptr< SWBValue > >::value_type const &

        """
        return _core.list_SWBValuesp_insert(self, *args)

    def pop_front(self):
        r"""pop_front(list_SWBValuesp self)"""
        return _core.list_SWBValuesp_pop_front(self)

    def push_front(self, x):
        r"""
        push_front(list_SWBValuesp self, std::list< std::shared_ptr< SWBValue > >::value_type const & x)

        Parameters
        ----------
        x: std::list< std::shared_ptr< SWBValue > >::value_type const &

        """
        return _core.list_SWBValuesp_push_front(self, x)

    def reverse(self):
        r"""reverse(list_SWBValuesp self)"""
        return _core.list_SWBValuesp_reverse(self)
    __swig_destroy__ = _core.delete_list_SWBValuesp

# Register list_SWBValuesp in _core:
_core.list_SWBValuesp_swigregister(list_SWBValuesp)

class list_SWBStepsp(object):
    r"""Proxy of C++ std::list< std::shared_ptr< SWBStep > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(list_SWBStepsp self) -> SwigPyIterator"""
        return _core.list_SWBStepsp_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(list_SWBStepsp self) -> bool"""
        return _core.list_SWBStepsp___nonzero__(self)

    def __bool__(self):
        r"""__bool__(list_SWBStepsp self) -> bool"""
        return _core.list_SWBStepsp___bool__(self)

    def __len__(self):
        r"""__len__(list_SWBStepsp self) -> std::list< std::shared_ptr< SWBStep > >::size_type"""
        return _core.list_SWBStepsp___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(list_SWBStepsp self, std::list< std::shared_ptr< SWBStep > >::difference_type i, std::list< std::shared_ptr< SWBStep > >::difference_type j) -> list_SWBStepsp

        Parameters
        ----------
        i: std::list< std::shared_ptr< SWBStep > >::difference_type
        j: std::list< std::shared_ptr< SWBStep > >::difference_type

        """
        return _core.list_SWBStepsp___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(list_SWBStepsp self, std::list< std::shared_ptr< SWBStep > >::difference_type i, std::list< std::shared_ptr< SWBStep > >::difference_type j)

        Parameters
        ----------
        i: std::list< std::shared_ptr< SWBStep > >::difference_type
        j: std::list< std::shared_ptr< SWBStep > >::difference_type

        __setslice__(list_SWBStepsp self, std::list< std::shared_ptr< SWBStep > >::difference_type i, std::list< std::shared_ptr< SWBStep > >::difference_type j, list_SWBStepsp v)

        Parameters
        ----------
        i: std::list< std::shared_ptr< SWBStep > >::difference_type
        j: std::list< std::shared_ptr< SWBStep > >::difference_type
        v: std::list< std::shared_ptr< SWBStep >,std::allocator< std::shared_ptr< SWBStep > > > const &

        """
        return _core.list_SWBStepsp___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(list_SWBStepsp self, std::list< std::shared_ptr< SWBStep > >::difference_type i, std::list< std::shared_ptr< SWBStep > >::difference_type j)

        Parameters
        ----------
        i: std::list< std::shared_ptr< SWBStep > >::difference_type
        j: std::list< std::shared_ptr< SWBStep > >::difference_type

        """
        return _core.list_SWBStepsp___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(list_SWBStepsp self, std::list< std::shared_ptr< SWBStep > >::difference_type i)

        Parameters
        ----------
        i: std::list< std::shared_ptr< SWBStep > >::difference_type

        __delitem__(list_SWBStepsp self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _core.list_SWBStepsp___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(list_SWBStepsp self, PySliceObject * slice) -> list_SWBStepsp

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(list_SWBStepsp self, std::list< std::shared_ptr< SWBStep > >::difference_type i) -> std::list< std::shared_ptr< SWBStep > >::value_type const &

        Parameters
        ----------
        i: std::list< std::shared_ptr< SWBStep > >::difference_type

        """
        return _core.list_SWBStepsp___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(list_SWBStepsp self, PySliceObject * slice, list_SWBStepsp v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::list< std::shared_ptr< SWBStep >,std::allocator< std::shared_ptr< SWBStep > > > const &

        __setitem__(list_SWBStepsp self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(list_SWBStepsp self, std::list< std::shared_ptr< SWBStep > >::difference_type i, std::list< std::shared_ptr< SWBStep > >::value_type const & x)

        Parameters
        ----------
        i: std::list< std::shared_ptr< SWBStep > >::difference_type
        x: std::list< std::shared_ptr< SWBStep > >::value_type const &

        """
        return _core.list_SWBStepsp___setitem__(self, *args)

    def pop(self):
        r"""pop(list_SWBStepsp self) -> std::list< std::shared_ptr< SWBStep > >::value_type"""
        return _core.list_SWBStepsp_pop(self)

    def append(self, x):
        r"""
        append(list_SWBStepsp self, std::list< std::shared_ptr< SWBStep > >::value_type const & x)

        Parameters
        ----------
        x: std::list< std::shared_ptr< SWBStep > >::value_type const &

        """
        return _core.list_SWBStepsp_append(self, x)

    def empty(self):
        r"""empty(list_SWBStepsp self) -> bool"""
        return _core.list_SWBStepsp_empty(self)

    def size(self):
        r"""size(list_SWBStepsp self) -> std::list< std::shared_ptr< SWBStep > >::size_type"""
        return _core.list_SWBStepsp_size(self)

    def swap(self, v):
        r"""
        swap(list_SWBStepsp self, list_SWBStepsp v)

        Parameters
        ----------
        v: std::list< std::shared_ptr< SWBStep > > &

        """
        return _core.list_SWBStepsp_swap(self, v)

    def begin(self):
        r"""begin(list_SWBStepsp self) -> std::list< std::shared_ptr< SWBStep > >::iterator"""
        return _core.list_SWBStepsp_begin(self)

    def end(self):
        r"""end(list_SWBStepsp self) -> std::list< std::shared_ptr< SWBStep > >::iterator"""
        return _core.list_SWBStepsp_end(self)

    def rbegin(self):
        r"""rbegin(list_SWBStepsp self) -> std::list< std::shared_ptr< SWBStep > >::reverse_iterator"""
        return _core.list_SWBStepsp_rbegin(self)

    def rend(self):
        r"""rend(list_SWBStepsp self) -> std::list< std::shared_ptr< SWBStep > >::reverse_iterator"""
        return _core.list_SWBStepsp_rend(self)

    def clear(self):
        r"""clear(list_SWBStepsp self)"""
        return _core.list_SWBStepsp_clear(self)

    def get_allocator(self):
        r"""get_allocator(list_SWBStepsp self) -> std::list< std::shared_ptr< SWBStep > >::allocator_type"""
        return _core.list_SWBStepsp_get_allocator(self)

    def pop_back(self):
        r"""pop_back(list_SWBStepsp self)"""
        return _core.list_SWBStepsp_pop_back(self)

    def erase(self, *args):
        r"""
        erase(list_SWBStepsp self, std::list< std::shared_ptr< SWBStep > >::iterator pos) -> std::list< std::shared_ptr< SWBStep > >::iterator

        Parameters
        ----------
        pos: std::list< std::shared_ptr< SWBStep > >::iterator

        erase(list_SWBStepsp self, std::list< std::shared_ptr< SWBStep > >::iterator first, std::list< std::shared_ptr< SWBStep > >::iterator last) -> std::list< std::shared_ptr< SWBStep > >::iterator

        Parameters
        ----------
        first: std::list< std::shared_ptr< SWBStep > >::iterator
        last: std::list< std::shared_ptr< SWBStep > >::iterator

        """
        return _core.list_SWBStepsp_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(list_SWBStepsp self) -> list_SWBStepsp
        __init__(list_SWBStepsp self, list_SWBStepsp other) -> list_SWBStepsp

        Parameters
        ----------
        other: std::list< std::shared_ptr< SWBStep > > const &

        __init__(list_SWBStepsp self, std::list< std::shared_ptr< SWBStep > >::size_type size) -> list_SWBStepsp

        Parameters
        ----------
        size: std::list< std::shared_ptr< SWBStep > >::size_type

        __init__(list_SWBStepsp self, std::list< std::shared_ptr< SWBStep > >::size_type size, std::list< std::shared_ptr< SWBStep > >::value_type const & value) -> list_SWBStepsp

        Parameters
        ----------
        size: std::list< std::shared_ptr< SWBStep > >::size_type
        value: std::list< std::shared_ptr< SWBStep > >::value_type const &

        """
        _core.list_SWBStepsp_swiginit(self, _core.new_list_SWBStepsp(*args))

    def push_back(self, x):
        r"""
        push_back(list_SWBStepsp self, std::list< std::shared_ptr< SWBStep > >::value_type const & x)

        Parameters
        ----------
        x: std::list< std::shared_ptr< SWBStep > >::value_type const &

        """
        return _core.list_SWBStepsp_push_back(self, x)

    def front(self):
        r"""front(list_SWBStepsp self) -> std::list< std::shared_ptr< SWBStep > >::value_type const &"""
        return _core.list_SWBStepsp_front(self)

    def back(self):
        r"""back(list_SWBStepsp self) -> std::list< std::shared_ptr< SWBStep > >::value_type const &"""
        return _core.list_SWBStepsp_back(self)

    def assign(self, n, x):
        r"""
        assign(list_SWBStepsp self, std::list< std::shared_ptr< SWBStep > >::size_type n, std::list< std::shared_ptr< SWBStep > >::value_type const & x)

        Parameters
        ----------
        n: std::list< std::shared_ptr< SWBStep > >::size_type
        x: std::list< std::shared_ptr< SWBStep > >::value_type const &

        """
        return _core.list_SWBStepsp_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(list_SWBStepsp self, std::list< std::shared_ptr< SWBStep > >::size_type new_size)

        Parameters
        ----------
        new_size: std::list< std::shared_ptr< SWBStep > >::size_type

        resize(list_SWBStepsp self, std::list< std::shared_ptr< SWBStep > >::size_type new_size, std::list< std::shared_ptr< SWBStep > >::value_type const & x)

        Parameters
        ----------
        new_size: std::list< std::shared_ptr< SWBStep > >::size_type
        x: std::list< std::shared_ptr< SWBStep > >::value_type const &

        """
        return _core.list_SWBStepsp_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(list_SWBStepsp self, std::list< std::shared_ptr< SWBStep > >::iterator pos, std::list< std::shared_ptr< SWBStep > >::value_type const & x) -> std::list< std::shared_ptr< SWBStep > >::iterator

        Parameters
        ----------
        pos: std::list< std::shared_ptr< SWBStep > >::iterator
        x: std::list< std::shared_ptr< SWBStep > >::value_type const &

        insert(list_SWBStepsp self, std::list< std::shared_ptr< SWBStep > >::iterator pos, std::list< std::shared_ptr< SWBStep > >::size_type n, std::list< std::shared_ptr< SWBStep > >::value_type const & x)

        Parameters
        ----------
        pos: std::list< std::shared_ptr< SWBStep > >::iterator
        n: std::list< std::shared_ptr< SWBStep > >::size_type
        x: std::list< std::shared_ptr< SWBStep > >::value_type const &

        """
        return _core.list_SWBStepsp_insert(self, *args)

    def pop_front(self):
        r"""pop_front(list_SWBStepsp self)"""
        return _core.list_SWBStepsp_pop_front(self)

    def push_front(self, x):
        r"""
        push_front(list_SWBStepsp self, std::list< std::shared_ptr< SWBStep > >::value_type const & x)

        Parameters
        ----------
        x: std::list< std::shared_ptr< SWBStep > >::value_type const &

        """
        return _core.list_SWBStepsp_push_front(self, x)

    def reverse(self):
        r"""reverse(list_SWBStepsp self)"""
        return _core.list_SWBStepsp_reverse(self)
    __swig_destroy__ = _core.delete_list_SWBStepsp

# Register list_SWBStepsp in _core:
_core.list_SWBStepsp_swigregister(list_SWBStepsp)

class list_SWBScenariosp(object):
    r"""Proxy of C++ std::list< std::shared_ptr< SWBScenario > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(list_SWBScenariosp self) -> SwigPyIterator"""
        return _core.list_SWBScenariosp_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(list_SWBScenariosp self) -> bool"""
        return _core.list_SWBScenariosp___nonzero__(self)

    def __bool__(self):
        r"""__bool__(list_SWBScenariosp self) -> bool"""
        return _core.list_SWBScenariosp___bool__(self)

    def __len__(self):
        r"""__len__(list_SWBScenariosp self) -> std::list< std::shared_ptr< SWBScenario > >::size_type"""
        return _core.list_SWBScenariosp___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(list_SWBScenariosp self, std::list< std::shared_ptr< SWBScenario > >::difference_type i, std::list< std::shared_ptr< SWBScenario > >::difference_type j) -> list_SWBScenariosp

        Parameters
        ----------
        i: std::list< std::shared_ptr< SWBScenario > >::difference_type
        j: std::list< std::shared_ptr< SWBScenario > >::difference_type

        """
        return _core.list_SWBScenariosp___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(list_SWBScenariosp self, std::list< std::shared_ptr< SWBScenario > >::difference_type i, std::list< std::shared_ptr< SWBScenario > >::difference_type j)

        Parameters
        ----------
        i: std::list< std::shared_ptr< SWBScenario > >::difference_type
        j: std::list< std::shared_ptr< SWBScenario > >::difference_type

        __setslice__(list_SWBScenariosp self, std::list< std::shared_ptr< SWBScenario > >::difference_type i, std::list< std::shared_ptr< SWBScenario > >::difference_type j, list_SWBScenariosp v)

        Parameters
        ----------
        i: std::list< std::shared_ptr< SWBScenario > >::difference_type
        j: std::list< std::shared_ptr< SWBScenario > >::difference_type
        v: std::list< std::shared_ptr< SWBScenario >,std::allocator< std::shared_ptr< SWBScenario > > > const &

        """
        return _core.list_SWBScenariosp___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(list_SWBScenariosp self, std::list< std::shared_ptr< SWBScenario > >::difference_type i, std::list< std::shared_ptr< SWBScenario > >::difference_type j)

        Parameters
        ----------
        i: std::list< std::shared_ptr< SWBScenario > >::difference_type
        j: std::list< std::shared_ptr< SWBScenario > >::difference_type

        """
        return _core.list_SWBScenariosp___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(list_SWBScenariosp self, std::list< std::shared_ptr< SWBScenario > >::difference_type i)

        Parameters
        ----------
        i: std::list< std::shared_ptr< SWBScenario > >::difference_type

        __delitem__(list_SWBScenariosp self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _core.list_SWBScenariosp___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(list_SWBScenariosp self, PySliceObject * slice) -> list_SWBScenariosp

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(list_SWBScenariosp self, std::list< std::shared_ptr< SWBScenario > >::difference_type i) -> std::list< std::shared_ptr< SWBScenario > >::value_type const &

        Parameters
        ----------
        i: std::list< std::shared_ptr< SWBScenario > >::difference_type

        """
        return _core.list_SWBScenariosp___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(list_SWBScenariosp self, PySliceObject * slice, list_SWBScenariosp v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::list< std::shared_ptr< SWBScenario >,std::allocator< std::shared_ptr< SWBScenario > > > const &

        __setitem__(list_SWBScenariosp self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(list_SWBScenariosp self, std::list< std::shared_ptr< SWBScenario > >::difference_type i, std::list< std::shared_ptr< SWBScenario > >::value_type const & x)

        Parameters
        ----------
        i: std::list< std::shared_ptr< SWBScenario > >::difference_type
        x: std::list< std::shared_ptr< SWBScenario > >::value_type const &

        """
        return _core.list_SWBScenariosp___setitem__(self, *args)

    def pop(self):
        r"""pop(list_SWBScenariosp self) -> std::list< std::shared_ptr< SWBScenario > >::value_type"""
        return _core.list_SWBScenariosp_pop(self)

    def append(self, x):
        r"""
        append(list_SWBScenariosp self, std::list< std::shared_ptr< SWBScenario > >::value_type const & x)

        Parameters
        ----------
        x: std::list< std::shared_ptr< SWBScenario > >::value_type const &

        """
        return _core.list_SWBScenariosp_append(self, x)

    def empty(self):
        r"""empty(list_SWBScenariosp self) -> bool"""
        return _core.list_SWBScenariosp_empty(self)

    def size(self):
        r"""size(list_SWBScenariosp self) -> std::list< std::shared_ptr< SWBScenario > >::size_type"""
        return _core.list_SWBScenariosp_size(self)

    def swap(self, v):
        r"""
        swap(list_SWBScenariosp self, list_SWBScenariosp v)

        Parameters
        ----------
        v: std::list< std::shared_ptr< SWBScenario > > &

        """
        return _core.list_SWBScenariosp_swap(self, v)

    def begin(self):
        r"""begin(list_SWBScenariosp self) -> std::list< std::shared_ptr< SWBScenario > >::iterator"""
        return _core.list_SWBScenariosp_begin(self)

    def end(self):
        r"""end(list_SWBScenariosp self) -> std::list< std::shared_ptr< SWBScenario > >::iterator"""
        return _core.list_SWBScenariosp_end(self)

    def rbegin(self):
        r"""rbegin(list_SWBScenariosp self) -> std::list< std::shared_ptr< SWBScenario > >::reverse_iterator"""
        return _core.list_SWBScenariosp_rbegin(self)

    def rend(self):
        r"""rend(list_SWBScenariosp self) -> std::list< std::shared_ptr< SWBScenario > >::reverse_iterator"""
        return _core.list_SWBScenariosp_rend(self)

    def clear(self):
        r"""clear(list_SWBScenariosp self)"""
        return _core.list_SWBScenariosp_clear(self)

    def get_allocator(self):
        r"""get_allocator(list_SWBScenariosp self) -> std::list< std::shared_ptr< SWBScenario > >::allocator_type"""
        return _core.list_SWBScenariosp_get_allocator(self)

    def pop_back(self):
        r"""pop_back(list_SWBScenariosp self)"""
        return _core.list_SWBScenariosp_pop_back(self)

    def erase(self, *args):
        r"""
        erase(list_SWBScenariosp self, std::list< std::shared_ptr< SWBScenario > >::iterator pos) -> std::list< std::shared_ptr< SWBScenario > >::iterator

        Parameters
        ----------
        pos: std::list< std::shared_ptr< SWBScenario > >::iterator

        erase(list_SWBScenariosp self, std::list< std::shared_ptr< SWBScenario > >::iterator first, std::list< std::shared_ptr< SWBScenario > >::iterator last) -> std::list< std::shared_ptr< SWBScenario > >::iterator

        Parameters
        ----------
        first: std::list< std::shared_ptr< SWBScenario > >::iterator
        last: std::list< std::shared_ptr< SWBScenario > >::iterator

        """
        return _core.list_SWBScenariosp_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(list_SWBScenariosp self) -> list_SWBScenariosp
        __init__(list_SWBScenariosp self, list_SWBScenariosp other) -> list_SWBScenariosp

        Parameters
        ----------
        other: std::list< std::shared_ptr< SWBScenario > > const &

        __init__(list_SWBScenariosp self, std::list< std::shared_ptr< SWBScenario > >::size_type size) -> list_SWBScenariosp

        Parameters
        ----------
        size: std::list< std::shared_ptr< SWBScenario > >::size_type

        __init__(list_SWBScenariosp self, std::list< std::shared_ptr< SWBScenario > >::size_type size, std::list< std::shared_ptr< SWBScenario > >::value_type const & value) -> list_SWBScenariosp

        Parameters
        ----------
        size: std::list< std::shared_ptr< SWBScenario > >::size_type
        value: std::list< std::shared_ptr< SWBScenario > >::value_type const &

        """
        _core.list_SWBScenariosp_swiginit(self, _core.new_list_SWBScenariosp(*args))

    def push_back(self, x):
        r"""
        push_back(list_SWBScenariosp self, std::list< std::shared_ptr< SWBScenario > >::value_type const & x)

        Parameters
        ----------
        x: std::list< std::shared_ptr< SWBScenario > >::value_type const &

        """
        return _core.list_SWBScenariosp_push_back(self, x)

    def front(self):
        r"""front(list_SWBScenariosp self) -> std::list< std::shared_ptr< SWBScenario > >::value_type const &"""
        return _core.list_SWBScenariosp_front(self)

    def back(self):
        r"""back(list_SWBScenariosp self) -> std::list< std::shared_ptr< SWBScenario > >::value_type const &"""
        return _core.list_SWBScenariosp_back(self)

    def assign(self, n, x):
        r"""
        assign(list_SWBScenariosp self, std::list< std::shared_ptr< SWBScenario > >::size_type n, std::list< std::shared_ptr< SWBScenario > >::value_type const & x)

        Parameters
        ----------
        n: std::list< std::shared_ptr< SWBScenario > >::size_type
        x: std::list< std::shared_ptr< SWBScenario > >::value_type const &

        """
        return _core.list_SWBScenariosp_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(list_SWBScenariosp self, std::list< std::shared_ptr< SWBScenario > >::size_type new_size)

        Parameters
        ----------
        new_size: std::list< std::shared_ptr< SWBScenario > >::size_type

        resize(list_SWBScenariosp self, std::list< std::shared_ptr< SWBScenario > >::size_type new_size, std::list< std::shared_ptr< SWBScenario > >::value_type const & x)

        Parameters
        ----------
        new_size: std::list< std::shared_ptr< SWBScenario > >::size_type
        x: std::list< std::shared_ptr< SWBScenario > >::value_type const &

        """
        return _core.list_SWBScenariosp_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(list_SWBScenariosp self, std::list< std::shared_ptr< SWBScenario > >::iterator pos, std::list< std::shared_ptr< SWBScenario > >::value_type const & x) -> std::list< std::shared_ptr< SWBScenario > >::iterator

        Parameters
        ----------
        pos: std::list< std::shared_ptr< SWBScenario > >::iterator
        x: std::list< std::shared_ptr< SWBScenario > >::value_type const &

        insert(list_SWBScenariosp self, std::list< std::shared_ptr< SWBScenario > >::iterator pos, std::list< std::shared_ptr< SWBScenario > >::size_type n, std::list< std::shared_ptr< SWBScenario > >::value_type const & x)

        Parameters
        ----------
        pos: std::list< std::shared_ptr< SWBScenario > >::iterator
        n: std::list< std::shared_ptr< SWBScenario > >::size_type
        x: std::list< std::shared_ptr< SWBScenario > >::value_type const &

        """
        return _core.list_SWBScenariosp_insert(self, *args)

    def pop_front(self):
        r"""pop_front(list_SWBScenariosp self)"""
        return _core.list_SWBScenariosp_pop_front(self)

    def push_front(self, x):
        r"""
        push_front(list_SWBScenariosp self, std::list< std::shared_ptr< SWBScenario > >::value_type const & x)

        Parameters
        ----------
        x: std::list< std::shared_ptr< SWBScenario > >::value_type const &

        """
        return _core.list_SWBScenariosp_push_front(self, x)

    def reverse(self):
        r"""reverse(list_SWBScenariosp self)"""
        return _core.list_SWBScenariosp_reverse(self)
    __swig_destroy__ = _core.delete_list_SWBScenariosp

# Register list_SWBScenariosp in _core:
_core.list_SWBScenariosp_swigregister(list_SWBScenariosp)

class list_NKEY(object):
    r"""Proxy of C++ std::list< NKEY > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(list_NKEY self) -> SwigPyIterator"""
        return _core.list_NKEY_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(list_NKEY self) -> bool"""
        return _core.list_NKEY___nonzero__(self)

    def __bool__(self):
        r"""__bool__(list_NKEY self) -> bool"""
        return _core.list_NKEY___bool__(self)

    def __len__(self):
        r"""__len__(list_NKEY self) -> std::list< int >::size_type"""
        return _core.list_NKEY___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(list_NKEY self, std::list< int >::difference_type i, std::list< int >::difference_type j) -> list_NKEY

        Parameters
        ----------
        i: std::list< int >::difference_type
        j: std::list< int >::difference_type

        """
        return _core.list_NKEY___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(list_NKEY self, std::list< int >::difference_type i, std::list< int >::difference_type j)

        Parameters
        ----------
        i: std::list< int >::difference_type
        j: std::list< int >::difference_type

        __setslice__(list_NKEY self, std::list< int >::difference_type i, std::list< int >::difference_type j, list_NKEY v)

        Parameters
        ----------
        i: std::list< int >::difference_type
        j: std::list< int >::difference_type
        v: std::list< int,std::allocator< int > > const &

        """
        return _core.list_NKEY___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(list_NKEY self, std::list< int >::difference_type i, std::list< int >::difference_type j)

        Parameters
        ----------
        i: std::list< int >::difference_type
        j: std::list< int >::difference_type

        """
        return _core.list_NKEY___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(list_NKEY self, std::list< int >::difference_type i)

        Parameters
        ----------
        i: std::list< int >::difference_type

        __delitem__(list_NKEY self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _core.list_NKEY___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(list_NKEY self, PySliceObject * slice) -> list_NKEY

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(list_NKEY self, std::list< int >::difference_type i) -> std::list< int >::value_type const &

        Parameters
        ----------
        i: std::list< int >::difference_type

        """
        return _core.list_NKEY___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(list_NKEY self, PySliceObject * slice, list_NKEY v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::list< int,std::allocator< int > > const &

        __setitem__(list_NKEY self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(list_NKEY self, std::list< int >::difference_type i, std::list< int >::value_type const & x)

        Parameters
        ----------
        i: std::list< int >::difference_type
        x: std::list< int >::value_type const &

        """
        return _core.list_NKEY___setitem__(self, *args)

    def pop(self):
        r"""pop(list_NKEY self) -> std::list< int >::value_type"""
        return _core.list_NKEY_pop(self)

    def append(self, x):
        r"""
        append(list_NKEY self, std::list< int >::value_type const & x)

        Parameters
        ----------
        x: std::list< int >::value_type const &

        """
        return _core.list_NKEY_append(self, x)

    def empty(self):
        r"""empty(list_NKEY self) -> bool"""
        return _core.list_NKEY_empty(self)

    def size(self):
        r"""size(list_NKEY self) -> std::list< int >::size_type"""
        return _core.list_NKEY_size(self)

    def swap(self, v):
        r"""
        swap(list_NKEY self, list_NKEY v)

        Parameters
        ----------
        v: std::list< NKEY > &

        """
        return _core.list_NKEY_swap(self, v)

    def begin(self):
        r"""begin(list_NKEY self) -> std::list< int >::iterator"""
        return _core.list_NKEY_begin(self)

    def end(self):
        r"""end(list_NKEY self) -> std::list< int >::iterator"""
        return _core.list_NKEY_end(self)

    def rbegin(self):
        r"""rbegin(list_NKEY self) -> std::list< int >::reverse_iterator"""
        return _core.list_NKEY_rbegin(self)

    def rend(self):
        r"""rend(list_NKEY self) -> std::list< int >::reverse_iterator"""
        return _core.list_NKEY_rend(self)

    def clear(self):
        r"""clear(list_NKEY self)"""
        return _core.list_NKEY_clear(self)

    def get_allocator(self):
        r"""get_allocator(list_NKEY self) -> std::list< int >::allocator_type"""
        return _core.list_NKEY_get_allocator(self)

    def pop_back(self):
        r"""pop_back(list_NKEY self)"""
        return _core.list_NKEY_pop_back(self)

    def erase(self, *args):
        r"""
        erase(list_NKEY self, std::list< int >::iterator pos) -> std::list< int >::iterator

        Parameters
        ----------
        pos: std::list< int >::iterator

        erase(list_NKEY self, std::list< int >::iterator first, std::list< int >::iterator last) -> std::list< int >::iterator

        Parameters
        ----------
        first: std::list< int >::iterator
        last: std::list< int >::iterator

        """
        return _core.list_NKEY_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(list_NKEY self) -> list_NKEY
        __init__(list_NKEY self, list_NKEY other) -> list_NKEY

        Parameters
        ----------
        other: std::list< NKEY > const &

        __init__(list_NKEY self, std::list< int >::size_type size) -> list_NKEY

        Parameters
        ----------
        size: std::list< int >::size_type

        __init__(list_NKEY self, std::list< int >::size_type size, std::list< int >::value_type const & value) -> list_NKEY

        Parameters
        ----------
        size: std::list< int >::size_type
        value: std::list< int >::value_type const &

        """
        _core.list_NKEY_swiginit(self, _core.new_list_NKEY(*args))

    def push_back(self, x):
        r"""
        push_back(list_NKEY self, std::list< int >::value_type const & x)

        Parameters
        ----------
        x: std::list< int >::value_type const &

        """
        return _core.list_NKEY_push_back(self, x)

    def front(self):
        r"""front(list_NKEY self) -> std::list< int >::value_type const &"""
        return _core.list_NKEY_front(self)

    def back(self):
        r"""back(list_NKEY self) -> std::list< int >::value_type const &"""
        return _core.list_NKEY_back(self)

    def assign(self, n, x):
        r"""
        assign(list_NKEY self, std::list< int >::size_type n, std::list< int >::value_type const & x)

        Parameters
        ----------
        n: std::list< int >::size_type
        x: std::list< int >::value_type const &

        """
        return _core.list_NKEY_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(list_NKEY self, std::list< int >::size_type new_size)

        Parameters
        ----------
        new_size: std::list< int >::size_type

        resize(list_NKEY self, std::list< int >::size_type new_size, std::list< int >::value_type const & x)

        Parameters
        ----------
        new_size: std::list< int >::size_type
        x: std::list< int >::value_type const &

        """
        return _core.list_NKEY_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(list_NKEY self, std::list< int >::iterator pos, std::list< int >::value_type const & x) -> std::list< int >::iterator

        Parameters
        ----------
        pos: std::list< int >::iterator
        x: std::list< int >::value_type const &

        insert(list_NKEY self, std::list< int >::iterator pos, std::list< int >::size_type n, std::list< int >::value_type const & x)

        Parameters
        ----------
        pos: std::list< int >::iterator
        n: std::list< int >::size_type
        x: std::list< int >::value_type const &

        """
        return _core.list_NKEY_insert(self, *args)

    def pop_front(self):
        r"""pop_front(list_NKEY self)"""
        return _core.list_NKEY_pop_front(self)

    def push_front(self, x):
        r"""
        push_front(list_NKEY self, std::list< int >::value_type const & x)

        Parameters
        ----------
        x: std::list< int >::value_type const &

        """
        return _core.list_NKEY_push_front(self, x)

    def reverse(self):
        r"""reverse(list_NKEY self)"""
        return _core.list_NKEY_reverse(self)
    __swig_destroy__ = _core.delete_list_NKEY

# Register list_NKEY in _core:
_core.list_NKEY_swigregister(list_NKEY)

class map_s_s(object):
    r"""Proxy of C++ std::map< std::string,std::string > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(map_s_s self) -> SwigPyIterator"""
        return _core.map_s_s_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(map_s_s self) -> bool"""
        return _core.map_s_s___nonzero__(self)

    def __bool__(self):
        r"""__bool__(map_s_s self) -> bool"""
        return _core.map_s_s___bool__(self)

    def __len__(self):
        r"""__len__(map_s_s self) -> std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::size_type"""
        return _core.map_s_s___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        r"""
        __getitem__(map_s_s self, string key) -> string

        Parameters
        ----------
        key: std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::key_type const &

        """
        return _core.map_s_s___getitem__(self, key)

    def __delitem__(self, key):
        r"""
        __delitem__(map_s_s self, string key)

        Parameters
        ----------
        key: std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::key_type const &

        """
        return _core.map_s_s___delitem__(self, key)

    def has_key(self, key):
        r"""
        has_key(map_s_s self, string key) -> bool

        Parameters
        ----------
        key: std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::key_type const &

        """
        return _core.map_s_s_has_key(self, key)

    def keys(self):
        r"""keys(map_s_s self) -> PyObject *"""
        return _core.map_s_s_keys(self)

    def values(self):
        r"""values(map_s_s self) -> PyObject *"""
        return _core.map_s_s_values(self)

    def items(self):
        r"""items(map_s_s self) -> PyObject *"""
        return _core.map_s_s_items(self)

    def __contains__(self, key):
        r"""
        __contains__(map_s_s self, string key) -> bool

        Parameters
        ----------
        key: std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::key_type const &

        """
        return _core.map_s_s___contains__(self, key)

    def key_iterator(self):
        r"""key_iterator(map_s_s self) -> SwigPyIterator"""
        return _core.map_s_s_key_iterator(self)

    def value_iterator(self):
        r"""value_iterator(map_s_s self) -> SwigPyIterator"""
        return _core.map_s_s_value_iterator(self)

    def __setitem__(self, *args):
        r"""
        __setitem__(map_s_s self, string key)

        Parameters
        ----------
        key: std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::key_type const &

        __setitem__(map_s_s self, string key, string x)

        Parameters
        ----------
        key: std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::key_type const &
        x: std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::mapped_type const &

        """
        return _core.map_s_s___setitem__(self, *args)

    def asdict(self):
        r"""asdict(map_s_s self) -> PyObject *"""
        return _core.map_s_s_asdict(self)

    def __init__(self, *args):
        r"""
        __init__(map_s_s self, std::less< std::basic_string< char,std::char_traits< char >,std::allocator< char > > > const & other) -> map_s_s

        Parameters
        ----------
        other: std::less< std::basic_string< char,std::char_traits< char >,std::allocator< char > > > const &

        __init__(map_s_s self) -> map_s_s
        __init__(map_s_s self, map_s_s other) -> map_s_s

        Parameters
        ----------
        other: std::map< std::string,std::string > const &

        """
        _core.map_s_s_swiginit(self, _core.new_map_s_s(*args))

    def empty(self):
        r"""empty(map_s_s self) -> bool"""
        return _core.map_s_s_empty(self)

    def size(self):
        r"""size(map_s_s self) -> std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::size_type"""
        return _core.map_s_s_size(self)

    def swap(self, v):
        r"""
        swap(map_s_s self, map_s_s v)

        Parameters
        ----------
        v: std::map< std::string,std::string > &

        """
        return _core.map_s_s_swap(self, v)

    def begin(self):
        r"""begin(map_s_s self) -> std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::iterator"""
        return _core.map_s_s_begin(self)

    def end(self):
        r"""end(map_s_s self) -> std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::iterator"""
        return _core.map_s_s_end(self)

    def rbegin(self):
        r"""rbegin(map_s_s self) -> std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::reverse_iterator"""
        return _core.map_s_s_rbegin(self)

    def rend(self):
        r"""rend(map_s_s self) -> std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::reverse_iterator"""
        return _core.map_s_s_rend(self)

    def clear(self):
        r"""clear(map_s_s self)"""
        return _core.map_s_s_clear(self)

    def get_allocator(self):
        r"""get_allocator(map_s_s self) -> std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::allocator_type"""
        return _core.map_s_s_get_allocator(self)

    def count(self, x):
        r"""
        count(map_s_s self, string x) -> std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::size_type

        Parameters
        ----------
        x: std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::key_type const &

        """
        return _core.map_s_s_count(self, x)

    def erase(self, *args):
        r"""
        erase(map_s_s self, string x) -> std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::size_type

        Parameters
        ----------
        x: std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::key_type const &

        erase(map_s_s self, std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::iterator position)

        Parameters
        ----------
        position: std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::iterator

        erase(map_s_s self, std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::iterator first, std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::iterator last)

        Parameters
        ----------
        first: std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::iterator
        last: std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::iterator

        """
        return _core.map_s_s_erase(self, *args)

    def find(self, x):
        r"""
        find(map_s_s self, string x) -> std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::iterator

        Parameters
        ----------
        x: std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::key_type const &

        """
        return _core.map_s_s_find(self, x)

    def lower_bound(self, x):
        r"""
        lower_bound(map_s_s self, string x) -> std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::iterator

        Parameters
        ----------
        x: std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::key_type const &

        """
        return _core.map_s_s_lower_bound(self, x)

    def upper_bound(self, x):
        r"""
        upper_bound(map_s_s self, string x) -> std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::iterator

        Parameters
        ----------
        x: std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::basic_string< char,std::char_traits< char >,std::allocator< char > > >::key_type const &

        """
        return _core.map_s_s_upper_bound(self, x)
    __swig_destroy__ = _core.delete_map_s_s

# Register map_s_s in _core:
_core.map_s_s_swigregister(map_s_s)

class map_s_dp(object):
    r"""Proxy of C++ std::map< std::string,double * > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(map_s_dp self) -> SwigPyIterator"""
        return _core.map_s_dp_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(map_s_dp self) -> bool"""
        return _core.map_s_dp___nonzero__(self)

    def __bool__(self):
        r"""__bool__(map_s_dp self) -> bool"""
        return _core.map_s_dp___bool__(self)

    def __len__(self):
        r"""__len__(map_s_dp self) -> std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,double * >::size_type"""
        return _core.map_s_dp___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        r"""
        __getitem__(map_s_dp self, string key) -> std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,double * >::mapped_type const &

        Parameters
        ----------
        key: std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,double * >::key_type const &

        """
        return _core.map_s_dp___getitem__(self, key)

    def __delitem__(self, key):
        r"""
        __delitem__(map_s_dp self, string key)

        Parameters
        ----------
        key: std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,double * >::key_type const &

        """
        return _core.map_s_dp___delitem__(self, key)

    def has_key(self, key):
        r"""
        has_key(map_s_dp self, string key) -> bool

        Parameters
        ----------
        key: std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,double * >::key_type const &

        """
        return _core.map_s_dp_has_key(self, key)

    def keys(self):
        r"""keys(map_s_dp self) -> PyObject *"""
        return _core.map_s_dp_keys(self)

    def values(self):
        r"""values(map_s_dp self) -> PyObject *"""
        return _core.map_s_dp_values(self)

    def items(self):
        r"""items(map_s_dp self) -> PyObject *"""
        return _core.map_s_dp_items(self)

    def __contains__(self, key):
        r"""
        __contains__(map_s_dp self, string key) -> bool

        Parameters
        ----------
        key: std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,double * >::key_type const &

        """
        return _core.map_s_dp___contains__(self, key)

    def key_iterator(self):
        r"""key_iterator(map_s_dp self) -> SwigPyIterator"""
        return _core.map_s_dp_key_iterator(self)

    def value_iterator(self):
        r"""value_iterator(map_s_dp self) -> SwigPyIterator"""
        return _core.map_s_dp_value_iterator(self)

    def __setitem__(self, *args):
        r"""
        __setitem__(map_s_dp self, string key)

        Parameters
        ----------
        key: std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,double * >::key_type const &

        __setitem__(map_s_dp self, string key, std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,double * >::mapped_type const & x)

        Parameters
        ----------
        key: std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,double * >::key_type const &
        x: std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,double * >::mapped_type const &

        """
        return _core.map_s_dp___setitem__(self, *args)

    def asdict(self):
        r"""asdict(map_s_dp self) -> PyObject *"""
        return _core.map_s_dp_asdict(self)

    def __init__(self, *args):
        r"""
        __init__(map_s_dp self, std::less< std::basic_string< char,std::char_traits< char >,std::allocator< char > > > const & other) -> map_s_dp

        Parameters
        ----------
        other: std::less< std::basic_string< char,std::char_traits< char >,std::allocator< char > > > const &

        __init__(map_s_dp self) -> map_s_dp
        __init__(map_s_dp self, map_s_dp other) -> map_s_dp

        Parameters
        ----------
        other: std::map< std::string,double * > const &

        """
        _core.map_s_dp_swiginit(self, _core.new_map_s_dp(*args))

    def empty(self):
        r"""empty(map_s_dp self) -> bool"""
        return _core.map_s_dp_empty(self)

    def size(self):
        r"""size(map_s_dp self) -> std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,double * >::size_type"""
        return _core.map_s_dp_size(self)

    def swap(self, v):
        r"""
        swap(map_s_dp self, map_s_dp v)

        Parameters
        ----------
        v: std::map< std::string,double * > &

        """
        return _core.map_s_dp_swap(self, v)

    def begin(self):
        r"""begin(map_s_dp self) -> std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,double * >::iterator"""
        return _core.map_s_dp_begin(self)

    def end(self):
        r"""end(map_s_dp self) -> std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,double * >::iterator"""
        return _core.map_s_dp_end(self)

    def rbegin(self):
        r"""rbegin(map_s_dp self) -> std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,double * >::reverse_iterator"""
        return _core.map_s_dp_rbegin(self)

    def rend(self):
        r"""rend(map_s_dp self) -> std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,double * >::reverse_iterator"""
        return _core.map_s_dp_rend(self)

    def clear(self):
        r"""clear(map_s_dp self)"""
        return _core.map_s_dp_clear(self)

    def get_allocator(self):
        r"""get_allocator(map_s_dp self) -> std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,double * >::allocator_type"""
        return _core.map_s_dp_get_allocator(self)

    def count(self, x):
        r"""
        count(map_s_dp self, string x) -> std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,double * >::size_type

        Parameters
        ----------
        x: std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,double * >::key_type const &

        """
        return _core.map_s_dp_count(self, x)

    def erase(self, *args):
        r"""
        erase(map_s_dp self, string x) -> std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,double * >::size_type

        Parameters
        ----------
        x: std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,double * >::key_type const &

        erase(map_s_dp self, std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,double * >::iterator position)

        Parameters
        ----------
        position: std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,double * >::iterator

        erase(map_s_dp self, std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,double * >::iterator first, std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,double * >::iterator last)

        Parameters
        ----------
        first: std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,double * >::iterator
        last: std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,double * >::iterator

        """
        return _core.map_s_dp_erase(self, *args)

    def find(self, x):
        r"""
        find(map_s_dp self, string x) -> std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,double * >::iterator

        Parameters
        ----------
        x: std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,double * >::key_type const &

        """
        return _core.map_s_dp_find(self, x)

    def lower_bound(self, x):
        r"""
        lower_bound(map_s_dp self, string x) -> std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,double * >::iterator

        Parameters
        ----------
        x: std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,double * >::key_type const &

        """
        return _core.map_s_dp_lower_bound(self, x)

    def upper_bound(self, x):
        r"""
        upper_bound(map_s_dp self, string x) -> std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,double * >::iterator

        Parameters
        ----------
        x: std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,double * >::key_type const &

        """
        return _core.map_s_dp_upper_bound(self, x)
    __swig_destroy__ = _core.delete_map_s_dp

# Register map_s_dp in _core:
_core.map_s_dp_swigregister(map_s_dp)

class map_s_d(object):
    r"""Proxy of C++ std::map< std::string,double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(map_s_d self) -> SwigPyIterator"""
        return _core.map_s_d_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(map_s_d self) -> bool"""
        return _core.map_s_d___nonzero__(self)

    def __bool__(self):
        r"""__bool__(map_s_d self) -> bool"""
        return _core.map_s_d___bool__(self)

    def __len__(self):
        r"""__len__(map_s_d self) -> std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,double >::size_type"""
        return _core.map_s_d___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        r"""
        __getitem__(map_s_d self, string key) -> std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,double >::mapped_type const &

        Parameters
        ----------
        key: std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,double >::key_type const &

        """
        return _core.map_s_d___getitem__(self, key)

    def __delitem__(self, key):
        r"""
        __delitem__(map_s_d self, string key)

        Parameters
        ----------
        key: std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,double >::key_type const &

        """
        return _core.map_s_d___delitem__(self, key)

    def has_key(self, key):
        r"""
        has_key(map_s_d self, string key) -> bool

        Parameters
        ----------
        key: std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,double >::key_type const &

        """
        return _core.map_s_d_has_key(self, key)

    def keys(self):
        r"""keys(map_s_d self) -> PyObject *"""
        return _core.map_s_d_keys(self)

    def values(self):
        r"""values(map_s_d self) -> PyObject *"""
        return _core.map_s_d_values(self)

    def items(self):
        r"""items(map_s_d self) -> PyObject *"""
        return _core.map_s_d_items(self)

    def __contains__(self, key):
        r"""
        __contains__(map_s_d self, string key) -> bool

        Parameters
        ----------
        key: std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,double >::key_type const &

        """
        return _core.map_s_d___contains__(self, key)

    def key_iterator(self):
        r"""key_iterator(map_s_d self) -> SwigPyIterator"""
        return _core.map_s_d_key_iterator(self)

    def value_iterator(self):
        r"""value_iterator(map_s_d self) -> SwigPyIterator"""
        return _core.map_s_d_value_iterator(self)

    def __setitem__(self, *args):
        r"""
        __setitem__(map_s_d self, string key)

        Parameters
        ----------
        key: std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,double >::key_type const &

        __setitem__(map_s_d self, string key, std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,double >::mapped_type const & x)

        Parameters
        ----------
        key: std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,double >::key_type const &
        x: std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,double >::mapped_type const &

        """
        return _core.map_s_d___setitem__(self, *args)

    def asdict(self):
        r"""asdict(map_s_d self) -> PyObject *"""
        return _core.map_s_d_asdict(self)

    def __init__(self, *args):
        r"""
        __init__(map_s_d self, std::less< std::basic_string< char,std::char_traits< char >,std::allocator< char > > > const & other) -> map_s_d

        Parameters
        ----------
        other: std::less< std::basic_string< char,std::char_traits< char >,std::allocator< char > > > const &

        __init__(map_s_d self) -> map_s_d
        __init__(map_s_d self, map_s_d other) -> map_s_d

        Parameters
        ----------
        other: std::map< std::string,double > const &

        """
        _core.map_s_d_swiginit(self, _core.new_map_s_d(*args))

    def empty(self):
        r"""empty(map_s_d self) -> bool"""
        return _core.map_s_d_empty(self)

    def size(self):
        r"""size(map_s_d self) -> std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,double >::size_type"""
        return _core.map_s_d_size(self)

    def swap(self, v):
        r"""
        swap(map_s_d self, map_s_d v)

        Parameters
        ----------
        v: std::map< std::string,double > &

        """
        return _core.map_s_d_swap(self, v)

    def begin(self):
        r"""begin(map_s_d self) -> std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,double >::iterator"""
        return _core.map_s_d_begin(self)

    def end(self):
        r"""end(map_s_d self) -> std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,double >::iterator"""
        return _core.map_s_d_end(self)

    def rbegin(self):
        r"""rbegin(map_s_d self) -> std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,double >::reverse_iterator"""
        return _core.map_s_d_rbegin(self)

    def rend(self):
        r"""rend(map_s_d self) -> std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,double >::reverse_iterator"""
        return _core.map_s_d_rend(self)

    def clear(self):
        r"""clear(map_s_d self)"""
        return _core.map_s_d_clear(self)

    def get_allocator(self):
        r"""get_allocator(map_s_d self) -> std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,double >::allocator_type"""
        return _core.map_s_d_get_allocator(self)

    def count(self, x):
        r"""
        count(map_s_d self, string x) -> std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,double >::size_type

        Parameters
        ----------
        x: std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,double >::key_type const &

        """
        return _core.map_s_d_count(self, x)

    def erase(self, *args):
        r"""
        erase(map_s_d self, string x) -> std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,double >::size_type

        Parameters
        ----------
        x: std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,double >::key_type const &

        erase(map_s_d self, std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,double >::iterator position)

        Parameters
        ----------
        position: std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,double >::iterator

        erase(map_s_d self, std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,double >::iterator first, std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,double >::iterator last)

        Parameters
        ----------
        first: std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,double >::iterator
        last: std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,double >::iterator

        """
        return _core.map_s_d_erase(self, *args)

    def find(self, x):
        r"""
        find(map_s_d self, string x) -> std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,double >::iterator

        Parameters
        ----------
        x: std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,double >::key_type const &

        """
        return _core.map_s_d_find(self, x)

    def lower_bound(self, x):
        r"""
        lower_bound(map_s_d self, string x) -> std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,double >::iterator

        Parameters
        ----------
        x: std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,double >::key_type const &

        """
        return _core.map_s_d_lower_bound(self, x)

    def upper_bound(self, x):
        r"""
        upper_bound(map_s_d self, string x) -> std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,double >::iterator

        Parameters
        ----------
        x: std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,double >::key_type const &

        """
        return _core.map_s_d_upper_bound(self, x)
    __swig_destroy__ = _core.delete_map_s_d

# Register map_s_d in _core:
_core.map_s_d_swigregister(map_s_d)

class map_s_i(object):
    r"""Proxy of C++ std::map< std::string,int > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(map_s_i self) -> SwigPyIterator"""
        return _core.map_s_i_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(map_s_i self) -> bool"""
        return _core.map_s_i___nonzero__(self)

    def __bool__(self):
        r"""__bool__(map_s_i self) -> bool"""
        return _core.map_s_i___bool__(self)

    def __len__(self):
        r"""__len__(map_s_i self) -> std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,int >::size_type"""
        return _core.map_s_i___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        r"""
        __getitem__(map_s_i self, string key) -> std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,int >::mapped_type const &

        Parameters
        ----------
        key: std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,int >::key_type const &

        """
        return _core.map_s_i___getitem__(self, key)

    def __delitem__(self, key):
        r"""
        __delitem__(map_s_i self, string key)

        Parameters
        ----------
        key: std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,int >::key_type const &

        """
        return _core.map_s_i___delitem__(self, key)

    def has_key(self, key):
        r"""
        has_key(map_s_i self, string key) -> bool

        Parameters
        ----------
        key: std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,int >::key_type const &

        """
        return _core.map_s_i_has_key(self, key)

    def keys(self):
        r"""keys(map_s_i self) -> PyObject *"""
        return _core.map_s_i_keys(self)

    def values(self):
        r"""values(map_s_i self) -> PyObject *"""
        return _core.map_s_i_values(self)

    def items(self):
        r"""items(map_s_i self) -> PyObject *"""
        return _core.map_s_i_items(self)

    def __contains__(self, key):
        r"""
        __contains__(map_s_i self, string key) -> bool

        Parameters
        ----------
        key: std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,int >::key_type const &

        """
        return _core.map_s_i___contains__(self, key)

    def key_iterator(self):
        r"""key_iterator(map_s_i self) -> SwigPyIterator"""
        return _core.map_s_i_key_iterator(self)

    def value_iterator(self):
        r"""value_iterator(map_s_i self) -> SwigPyIterator"""
        return _core.map_s_i_value_iterator(self)

    def __setitem__(self, *args):
        r"""
        __setitem__(map_s_i self, string key)

        Parameters
        ----------
        key: std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,int >::key_type const &

        __setitem__(map_s_i self, string key, std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,int >::mapped_type const & x)

        Parameters
        ----------
        key: std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,int >::key_type const &
        x: std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,int >::mapped_type const &

        """
        return _core.map_s_i___setitem__(self, *args)

    def asdict(self):
        r"""asdict(map_s_i self) -> PyObject *"""
        return _core.map_s_i_asdict(self)

    def __init__(self, *args):
        r"""
        __init__(map_s_i self, std::less< std::basic_string< char,std::char_traits< char >,std::allocator< char > > > const & other) -> map_s_i

        Parameters
        ----------
        other: std::less< std::basic_string< char,std::char_traits< char >,std::allocator< char > > > const &

        __init__(map_s_i self) -> map_s_i
        __init__(map_s_i self, map_s_i other) -> map_s_i

        Parameters
        ----------
        other: std::map< std::string,int > const &

        """
        _core.map_s_i_swiginit(self, _core.new_map_s_i(*args))

    def empty(self):
        r"""empty(map_s_i self) -> bool"""
        return _core.map_s_i_empty(self)

    def size(self):
        r"""size(map_s_i self) -> std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,int >::size_type"""
        return _core.map_s_i_size(self)

    def swap(self, v):
        r"""
        swap(map_s_i self, map_s_i v)

        Parameters
        ----------
        v: std::map< std::string,int > &

        """
        return _core.map_s_i_swap(self, v)

    def begin(self):
        r"""begin(map_s_i self) -> std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,int >::iterator"""
        return _core.map_s_i_begin(self)

    def end(self):
        r"""end(map_s_i self) -> std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,int >::iterator"""
        return _core.map_s_i_end(self)

    def rbegin(self):
        r"""rbegin(map_s_i self) -> std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,int >::reverse_iterator"""
        return _core.map_s_i_rbegin(self)

    def rend(self):
        r"""rend(map_s_i self) -> std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,int >::reverse_iterator"""
        return _core.map_s_i_rend(self)

    def clear(self):
        r"""clear(map_s_i self)"""
        return _core.map_s_i_clear(self)

    def get_allocator(self):
        r"""get_allocator(map_s_i self) -> std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,int >::allocator_type"""
        return _core.map_s_i_get_allocator(self)

    def count(self, x):
        r"""
        count(map_s_i self, string x) -> std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,int >::size_type

        Parameters
        ----------
        x: std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,int >::key_type const &

        """
        return _core.map_s_i_count(self, x)

    def erase(self, *args):
        r"""
        erase(map_s_i self, string x) -> std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,int >::size_type

        Parameters
        ----------
        x: std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,int >::key_type const &

        erase(map_s_i self, std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,int >::iterator position)

        Parameters
        ----------
        position: std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,int >::iterator

        erase(map_s_i self, std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,int >::iterator first, std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,int >::iterator last)

        Parameters
        ----------
        first: std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,int >::iterator
        last: std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,int >::iterator

        """
        return _core.map_s_i_erase(self, *args)

    def find(self, x):
        r"""
        find(map_s_i self, string x) -> std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,int >::iterator

        Parameters
        ----------
        x: std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,int >::key_type const &

        """
        return _core.map_s_i_find(self, x)

    def lower_bound(self, x):
        r"""
        lower_bound(map_s_i self, string x) -> std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,int >::iterator

        Parameters
        ----------
        x: std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,int >::key_type const &

        """
        return _core.map_s_i_lower_bound(self, x)

    def upper_bound(self, x):
        r"""
        upper_bound(map_s_i self, string x) -> std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,int >::iterator

        Parameters
        ----------
        x: std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,int >::key_type const &

        """
        return _core.map_s_i_upper_bound(self, x)
    __swig_destroy__ = _core.delete_map_s_i

# Register map_s_i in _core:
_core.map_s_i_swigregister(map_s_i)

class map_i_i(object):
    r"""Proxy of C++ std::map< int,int > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(map_i_i self) -> SwigPyIterator"""
        return _core.map_i_i_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(map_i_i self) -> bool"""
        return _core.map_i_i___nonzero__(self)

    def __bool__(self):
        r"""__bool__(map_i_i self) -> bool"""
        return _core.map_i_i___bool__(self)

    def __len__(self):
        r"""__len__(map_i_i self) -> std::map< int,int >::size_type"""
        return _core.map_i_i___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        r"""
        __getitem__(map_i_i self, std::map< int,int >::key_type const & key) -> std::map< int,int >::mapped_type const &

        Parameters
        ----------
        key: std::map< int,int >::key_type const &

        """
        return _core.map_i_i___getitem__(self, key)

    def __delitem__(self, key):
        r"""
        __delitem__(map_i_i self, std::map< int,int >::key_type const & key)

        Parameters
        ----------
        key: std::map< int,int >::key_type const &

        """
        return _core.map_i_i___delitem__(self, key)

    def has_key(self, key):
        r"""
        has_key(map_i_i self, std::map< int,int >::key_type const & key) -> bool

        Parameters
        ----------
        key: std::map< int,int >::key_type const &

        """
        return _core.map_i_i_has_key(self, key)

    def keys(self):
        r"""keys(map_i_i self) -> PyObject *"""
        return _core.map_i_i_keys(self)

    def values(self):
        r"""values(map_i_i self) -> PyObject *"""
        return _core.map_i_i_values(self)

    def items(self):
        r"""items(map_i_i self) -> PyObject *"""
        return _core.map_i_i_items(self)

    def __contains__(self, key):
        r"""
        __contains__(map_i_i self, std::map< int,int >::key_type const & key) -> bool

        Parameters
        ----------
        key: std::map< int,int >::key_type const &

        """
        return _core.map_i_i___contains__(self, key)

    def key_iterator(self):
        r"""key_iterator(map_i_i self) -> SwigPyIterator"""
        return _core.map_i_i_key_iterator(self)

    def value_iterator(self):
        r"""value_iterator(map_i_i self) -> SwigPyIterator"""
        return _core.map_i_i_value_iterator(self)

    def __setitem__(self, *args):
        r"""
        __setitem__(map_i_i self, std::map< int,int >::key_type const & key)

        Parameters
        ----------
        key: std::map< int,int >::key_type const &

        __setitem__(map_i_i self, std::map< int,int >::key_type const & key, std::map< int,int >::mapped_type const & x)

        Parameters
        ----------
        key: std::map< int,int >::key_type const &
        x: std::map< int,int >::mapped_type const &

        """
        return _core.map_i_i___setitem__(self, *args)

    def asdict(self):
        r"""asdict(map_i_i self) -> PyObject *"""
        return _core.map_i_i_asdict(self)

    def __init__(self, *args):
        r"""
        __init__(map_i_i self, std::less< int > const & other) -> map_i_i

        Parameters
        ----------
        other: std::less< int > const &

        __init__(map_i_i self) -> map_i_i
        __init__(map_i_i self, map_i_i other) -> map_i_i

        Parameters
        ----------
        other: std::map< int,int > const &

        """
        _core.map_i_i_swiginit(self, _core.new_map_i_i(*args))

    def empty(self):
        r"""empty(map_i_i self) -> bool"""
        return _core.map_i_i_empty(self)

    def size(self):
        r"""size(map_i_i self) -> std::map< int,int >::size_type"""
        return _core.map_i_i_size(self)

    def swap(self, v):
        r"""
        swap(map_i_i self, map_i_i v)

        Parameters
        ----------
        v: std::map< int,int > &

        """
        return _core.map_i_i_swap(self, v)

    def begin(self):
        r"""begin(map_i_i self) -> std::map< int,int >::iterator"""
        return _core.map_i_i_begin(self)

    def end(self):
        r"""end(map_i_i self) -> std::map< int,int >::iterator"""
        return _core.map_i_i_end(self)

    def rbegin(self):
        r"""rbegin(map_i_i self) -> std::map< int,int >::reverse_iterator"""
        return _core.map_i_i_rbegin(self)

    def rend(self):
        r"""rend(map_i_i self) -> std::map< int,int >::reverse_iterator"""
        return _core.map_i_i_rend(self)

    def clear(self):
        r"""clear(map_i_i self)"""
        return _core.map_i_i_clear(self)

    def get_allocator(self):
        r"""get_allocator(map_i_i self) -> std::map< int,int >::allocator_type"""
        return _core.map_i_i_get_allocator(self)

    def count(self, x):
        r"""
        count(map_i_i self, std::map< int,int >::key_type const & x) -> std::map< int,int >::size_type

        Parameters
        ----------
        x: std::map< int,int >::key_type const &

        """
        return _core.map_i_i_count(self, x)

    def erase(self, *args):
        r"""
        erase(map_i_i self, std::map< int,int >::key_type const & x) -> std::map< int,int >::size_type

        Parameters
        ----------
        x: std::map< int,int >::key_type const &

        erase(map_i_i self, std::map< int,int >::iterator position)

        Parameters
        ----------
        position: std::map< int,int >::iterator

        erase(map_i_i self, std::map< int,int >::iterator first, std::map< int,int >::iterator last)

        Parameters
        ----------
        first: std::map< int,int >::iterator
        last: std::map< int,int >::iterator

        """
        return _core.map_i_i_erase(self, *args)

    def find(self, x):
        r"""
        find(map_i_i self, std::map< int,int >::key_type const & x) -> std::map< int,int >::iterator

        Parameters
        ----------
        x: std::map< int,int >::key_type const &

        """
        return _core.map_i_i_find(self, x)

    def lower_bound(self, x):
        r"""
        lower_bound(map_i_i self, std::map< int,int >::key_type const & x) -> std::map< int,int >::iterator

        Parameters
        ----------
        x: std::map< int,int >::key_type const &

        """
        return _core.map_i_i_lower_bound(self, x)

    def upper_bound(self, x):
        r"""
        upper_bound(map_i_i self, std::map< int,int >::key_type const & x) -> std::map< int,int >::iterator

        Parameters
        ----------
        x: std::map< int,int >::key_type const &

        """
        return _core.map_i_i_upper_bound(self, x)
    __swig_destroy__ = _core.delete_map_i_i

# Register map_i_i in _core:
_core.map_i_i_swigregister(map_i_i)

class map_s_Si(object):
    r"""Proxy of C++ std::map< std::string,std::set< int > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(map_s_Si self) -> SwigPyIterator"""
        return _core.map_s_Si_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(map_s_Si self) -> bool"""
        return _core.map_s_Si___nonzero__(self)

    def __bool__(self):
        r"""__bool__(map_s_Si self) -> bool"""
        return _core.map_s_Si___bool__(self)

    def __len__(self):
        r"""__len__(map_s_Si self) -> std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::set< int > >::size_type"""
        return _core.map_s_Si___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        r"""
        __getitem__(map_s_Si self, string key) -> std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::set< int > >::mapped_type const &

        Parameters
        ----------
        key: std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::set< int > >::key_type const &

        """
        return _core.map_s_Si___getitem__(self, key)

    def __delitem__(self, key):
        r"""
        __delitem__(map_s_Si self, string key)

        Parameters
        ----------
        key: std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::set< int > >::key_type const &

        """
        return _core.map_s_Si___delitem__(self, key)

    def has_key(self, key):
        r"""
        has_key(map_s_Si self, string key) -> bool

        Parameters
        ----------
        key: std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::set< int > >::key_type const &

        """
        return _core.map_s_Si_has_key(self, key)

    def keys(self):
        r"""keys(map_s_Si self) -> PyObject *"""
        return _core.map_s_Si_keys(self)

    def values(self):
        r"""values(map_s_Si self) -> PyObject *"""
        return _core.map_s_Si_values(self)

    def items(self):
        r"""items(map_s_Si self) -> PyObject *"""
        return _core.map_s_Si_items(self)

    def __contains__(self, key):
        r"""
        __contains__(map_s_Si self, string key) -> bool

        Parameters
        ----------
        key: std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::set< int > >::key_type const &

        """
        return _core.map_s_Si___contains__(self, key)

    def key_iterator(self):
        r"""key_iterator(map_s_Si self) -> SwigPyIterator"""
        return _core.map_s_Si_key_iterator(self)

    def value_iterator(self):
        r"""value_iterator(map_s_Si self) -> SwigPyIterator"""
        return _core.map_s_Si_value_iterator(self)

    def __setitem__(self, *args):
        r"""
        __setitem__(map_s_Si self, string key)

        Parameters
        ----------
        key: std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::set< int > >::key_type const &

        __setitem__(map_s_Si self, string key, std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::set< int > >::mapped_type const & x)

        Parameters
        ----------
        key: std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::set< int > >::key_type const &
        x: std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::set< int > >::mapped_type const &

        """
        return _core.map_s_Si___setitem__(self, *args)

    def asdict(self):
        r"""asdict(map_s_Si self) -> PyObject *"""
        return _core.map_s_Si_asdict(self)

    def __init__(self, *args):
        r"""
        __init__(map_s_Si self, std::less< std::basic_string< char,std::char_traits< char >,std::allocator< char > > > const & other) -> map_s_Si

        Parameters
        ----------
        other: std::less< std::basic_string< char,std::char_traits< char >,std::allocator< char > > > const &

        __init__(map_s_Si self) -> map_s_Si
        __init__(map_s_Si self, map_s_Si other) -> map_s_Si

        Parameters
        ----------
        other: std::map< std::string,std::set< int,std::less< int >,std::allocator< int > > > const &

        """
        _core.map_s_Si_swiginit(self, _core.new_map_s_Si(*args))

    def empty(self):
        r"""empty(map_s_Si self) -> bool"""
        return _core.map_s_Si_empty(self)

    def size(self):
        r"""size(map_s_Si self) -> std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::set< int > >::size_type"""
        return _core.map_s_Si_size(self)

    def swap(self, v):
        r"""
        swap(map_s_Si self, map_s_Si v)

        Parameters
        ----------
        v: std::map< std::string,std::set< int,std::less< int >,std::allocator< int > > > &

        """
        return _core.map_s_Si_swap(self, v)

    def begin(self):
        r"""begin(map_s_Si self) -> std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::set< int > >::iterator"""
        return _core.map_s_Si_begin(self)

    def end(self):
        r"""end(map_s_Si self) -> std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::set< int > >::iterator"""
        return _core.map_s_Si_end(self)

    def rbegin(self):
        r"""rbegin(map_s_Si self) -> std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::set< int > >::reverse_iterator"""
        return _core.map_s_Si_rbegin(self)

    def rend(self):
        r"""rend(map_s_Si self) -> std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::set< int > >::reverse_iterator"""
        return _core.map_s_Si_rend(self)

    def clear(self):
        r"""clear(map_s_Si self)"""
        return _core.map_s_Si_clear(self)

    def get_allocator(self):
        r"""get_allocator(map_s_Si self) -> std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::set< int > >::allocator_type"""
        return _core.map_s_Si_get_allocator(self)

    def count(self, x):
        r"""
        count(map_s_Si self, string x) -> std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::set< int > >::size_type

        Parameters
        ----------
        x: std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::set< int > >::key_type const &

        """
        return _core.map_s_Si_count(self, x)

    def erase(self, *args):
        r"""
        erase(map_s_Si self, string x) -> std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::set< int > >::size_type

        Parameters
        ----------
        x: std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::set< int > >::key_type const &

        erase(map_s_Si self, std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::set< int > >::iterator position)

        Parameters
        ----------
        position: std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::set< int > >::iterator

        erase(map_s_Si self, std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::set< int > >::iterator first, std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::set< int > >::iterator last)

        Parameters
        ----------
        first: std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::set< int > >::iterator
        last: std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::set< int > >::iterator

        """
        return _core.map_s_Si_erase(self, *args)

    def find(self, x):
        r"""
        find(map_s_Si self, string x) -> std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::set< int > >::iterator

        Parameters
        ----------
        x: std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::set< int > >::key_type const &

        """
        return _core.map_s_Si_find(self, x)

    def lower_bound(self, x):
        r"""
        lower_bound(map_s_Si self, string x) -> std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::set< int > >::iterator

        Parameters
        ----------
        x: std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::set< int > >::key_type const &

        """
        return _core.map_s_Si_lower_bound(self, x)

    def upper_bound(self, x):
        r"""
        upper_bound(map_s_Si self, string x) -> std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::set< int > >::iterator

        Parameters
        ----------
        x: std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::set< int > >::key_type const &

        """
        return _core.map_s_Si_upper_bound(self, x)
    __swig_destroy__ = _core.delete_map_s_Si

# Register map_s_Si in _core:
_core.map_s_Si_swigregister(map_s_Si)

class map_s_SWBTagsp(object):
    r"""Proxy of C++ std::map< std::string,std::shared_ptr< SWBTag > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(map_s_SWBTagsp self) -> SwigPyIterator"""
        return _core.map_s_SWBTagsp_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(map_s_SWBTagsp self) -> bool"""
        return _core.map_s_SWBTagsp___nonzero__(self)

    def __bool__(self):
        r"""__bool__(map_s_SWBTagsp self) -> bool"""
        return _core.map_s_SWBTagsp___bool__(self)

    def __len__(self):
        r"""__len__(map_s_SWBTagsp self) -> std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::shared_ptr< SWBTag > >::size_type"""
        return _core.map_s_SWBTagsp___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        r"""
        __getitem__(map_s_SWBTagsp self, string key) -> std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::shared_ptr< SWBTag > >::mapped_type const &

        Parameters
        ----------
        key: std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::shared_ptr< SWBTag > >::key_type const &

        """
        return _core.map_s_SWBTagsp___getitem__(self, key)

    def __delitem__(self, key):
        r"""
        __delitem__(map_s_SWBTagsp self, string key)

        Parameters
        ----------
        key: std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::shared_ptr< SWBTag > >::key_type const &

        """
        return _core.map_s_SWBTagsp___delitem__(self, key)

    def has_key(self, key):
        r"""
        has_key(map_s_SWBTagsp self, string key) -> bool

        Parameters
        ----------
        key: std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::shared_ptr< SWBTag > >::key_type const &

        """
        return _core.map_s_SWBTagsp_has_key(self, key)

    def keys(self):
        r"""keys(map_s_SWBTagsp self) -> PyObject *"""
        return _core.map_s_SWBTagsp_keys(self)

    def values(self):
        r"""values(map_s_SWBTagsp self) -> PyObject *"""
        return _core.map_s_SWBTagsp_values(self)

    def items(self):
        r"""items(map_s_SWBTagsp self) -> PyObject *"""
        return _core.map_s_SWBTagsp_items(self)

    def __contains__(self, key):
        r"""
        __contains__(map_s_SWBTagsp self, string key) -> bool

        Parameters
        ----------
        key: std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::shared_ptr< SWBTag > >::key_type const &

        """
        return _core.map_s_SWBTagsp___contains__(self, key)

    def key_iterator(self):
        r"""key_iterator(map_s_SWBTagsp self) -> SwigPyIterator"""
        return _core.map_s_SWBTagsp_key_iterator(self)

    def value_iterator(self):
        r"""value_iterator(map_s_SWBTagsp self) -> SwigPyIterator"""
        return _core.map_s_SWBTagsp_value_iterator(self)

    def __setitem__(self, *args):
        r"""
        __setitem__(map_s_SWBTagsp self, string key)

        Parameters
        ----------
        key: std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::shared_ptr< SWBTag > >::key_type const &

        __setitem__(map_s_SWBTagsp self, string key, std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::shared_ptr< SWBTag > >::mapped_type const & x)

        Parameters
        ----------
        key: std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::shared_ptr< SWBTag > >::key_type const &
        x: std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::shared_ptr< SWBTag > >::mapped_type const &

        """
        return _core.map_s_SWBTagsp___setitem__(self, *args)

    def asdict(self):
        r"""asdict(map_s_SWBTagsp self) -> PyObject *"""
        return _core.map_s_SWBTagsp_asdict(self)

    def __init__(self, *args):
        r"""
        __init__(map_s_SWBTagsp self, std::less< std::basic_string< char,std::char_traits< char >,std::allocator< char > > > const & other) -> map_s_SWBTagsp

        Parameters
        ----------
        other: std::less< std::basic_string< char,std::char_traits< char >,std::allocator< char > > > const &

        __init__(map_s_SWBTagsp self) -> map_s_SWBTagsp
        __init__(map_s_SWBTagsp self, map_s_SWBTagsp other) -> map_s_SWBTagsp

        Parameters
        ----------
        other: std::map< std::string,std::shared_ptr< SWBTag > > const &

        """
        _core.map_s_SWBTagsp_swiginit(self, _core.new_map_s_SWBTagsp(*args))

    def empty(self):
        r"""empty(map_s_SWBTagsp self) -> bool"""
        return _core.map_s_SWBTagsp_empty(self)

    def size(self):
        r"""size(map_s_SWBTagsp self) -> std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::shared_ptr< SWBTag > >::size_type"""
        return _core.map_s_SWBTagsp_size(self)

    def swap(self, v):
        r"""
        swap(map_s_SWBTagsp self, map_s_SWBTagsp v)

        Parameters
        ----------
        v: std::map< std::string,std::shared_ptr< SWBTag > > &

        """
        return _core.map_s_SWBTagsp_swap(self, v)

    def begin(self):
        r"""begin(map_s_SWBTagsp self) -> std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::shared_ptr< SWBTag > >::iterator"""
        return _core.map_s_SWBTagsp_begin(self)

    def end(self):
        r"""end(map_s_SWBTagsp self) -> std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::shared_ptr< SWBTag > >::iterator"""
        return _core.map_s_SWBTagsp_end(self)

    def rbegin(self):
        r"""rbegin(map_s_SWBTagsp self) -> std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::shared_ptr< SWBTag > >::reverse_iterator"""
        return _core.map_s_SWBTagsp_rbegin(self)

    def rend(self):
        r"""rend(map_s_SWBTagsp self) -> std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::shared_ptr< SWBTag > >::reverse_iterator"""
        return _core.map_s_SWBTagsp_rend(self)

    def clear(self):
        r"""clear(map_s_SWBTagsp self)"""
        return _core.map_s_SWBTagsp_clear(self)

    def get_allocator(self):
        r"""get_allocator(map_s_SWBTagsp self) -> std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::shared_ptr< SWBTag > >::allocator_type"""
        return _core.map_s_SWBTagsp_get_allocator(self)

    def count(self, x):
        r"""
        count(map_s_SWBTagsp self, string x) -> std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::shared_ptr< SWBTag > >::size_type

        Parameters
        ----------
        x: std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::shared_ptr< SWBTag > >::key_type const &

        """
        return _core.map_s_SWBTagsp_count(self, x)

    def erase(self, *args):
        r"""
        erase(map_s_SWBTagsp self, string x) -> std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::shared_ptr< SWBTag > >::size_type

        Parameters
        ----------
        x: std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::shared_ptr< SWBTag > >::key_type const &

        erase(map_s_SWBTagsp self, std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::shared_ptr< SWBTag > >::iterator position)

        Parameters
        ----------
        position: std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::shared_ptr< SWBTag > >::iterator

        erase(map_s_SWBTagsp self, std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::shared_ptr< SWBTag > >::iterator first, std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::shared_ptr< SWBTag > >::iterator last)

        Parameters
        ----------
        first: std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::shared_ptr< SWBTag > >::iterator
        last: std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::shared_ptr< SWBTag > >::iterator

        """
        return _core.map_s_SWBTagsp_erase(self, *args)

    def find(self, x):
        r"""
        find(map_s_SWBTagsp self, string x) -> std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::shared_ptr< SWBTag > >::iterator

        Parameters
        ----------
        x: std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::shared_ptr< SWBTag > >::key_type const &

        """
        return _core.map_s_SWBTagsp_find(self, x)

    def lower_bound(self, x):
        r"""
        lower_bound(map_s_SWBTagsp self, string x) -> std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::shared_ptr< SWBTag > >::iterator

        Parameters
        ----------
        x: std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::shared_ptr< SWBTag > >::key_type const &

        """
        return _core.map_s_SWBTagsp_lower_bound(self, x)

    def upper_bound(self, x):
        r"""
        upper_bound(map_s_SWBTagsp self, string x) -> std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::shared_ptr< SWBTag > >::iterator

        Parameters
        ----------
        x: std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::shared_ptr< SWBTag > >::key_type const &

        """
        return _core.map_s_SWBTagsp_upper_bound(self, x)
    __swig_destroy__ = _core.delete_map_s_SWBTagsp

# Register map_s_SWBTagsp in _core:
_core.map_s_SWBTagsp_swigregister(map_s_SWBTagsp)

class map_s_SWBTagGroupMapsp(object):
    r"""Proxy of C++ std::map< std::string,std::shared_ptr< SWBTagGroup > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(map_s_SWBTagGroupMapsp self) -> SwigPyIterator"""
        return _core.map_s_SWBTagGroupMapsp_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(map_s_SWBTagGroupMapsp self) -> bool"""
        return _core.map_s_SWBTagGroupMapsp___nonzero__(self)

    def __bool__(self):
        r"""__bool__(map_s_SWBTagGroupMapsp self) -> bool"""
        return _core.map_s_SWBTagGroupMapsp___bool__(self)

    def __len__(self):
        r"""__len__(map_s_SWBTagGroupMapsp self) -> std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::shared_ptr< SWBTagGroup > >::size_type"""
        return _core.map_s_SWBTagGroupMapsp___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        r"""
        __getitem__(map_s_SWBTagGroupMapsp self, string key) -> std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::shared_ptr< SWBTagGroup > >::mapped_type const &

        Parameters
        ----------
        key: std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::shared_ptr< SWBTagGroup > >::key_type const &

        """
        return _core.map_s_SWBTagGroupMapsp___getitem__(self, key)

    def __delitem__(self, key):
        r"""
        __delitem__(map_s_SWBTagGroupMapsp self, string key)

        Parameters
        ----------
        key: std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::shared_ptr< SWBTagGroup > >::key_type const &

        """
        return _core.map_s_SWBTagGroupMapsp___delitem__(self, key)

    def has_key(self, key):
        r"""
        has_key(map_s_SWBTagGroupMapsp self, string key) -> bool

        Parameters
        ----------
        key: std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::shared_ptr< SWBTagGroup > >::key_type const &

        """
        return _core.map_s_SWBTagGroupMapsp_has_key(self, key)

    def keys(self):
        r"""keys(map_s_SWBTagGroupMapsp self) -> PyObject *"""
        return _core.map_s_SWBTagGroupMapsp_keys(self)

    def values(self):
        r"""values(map_s_SWBTagGroupMapsp self) -> PyObject *"""
        return _core.map_s_SWBTagGroupMapsp_values(self)

    def items(self):
        r"""items(map_s_SWBTagGroupMapsp self) -> PyObject *"""
        return _core.map_s_SWBTagGroupMapsp_items(self)

    def __contains__(self, key):
        r"""
        __contains__(map_s_SWBTagGroupMapsp self, string key) -> bool

        Parameters
        ----------
        key: std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::shared_ptr< SWBTagGroup > >::key_type const &

        """
        return _core.map_s_SWBTagGroupMapsp___contains__(self, key)

    def key_iterator(self):
        r"""key_iterator(map_s_SWBTagGroupMapsp self) -> SwigPyIterator"""
        return _core.map_s_SWBTagGroupMapsp_key_iterator(self)

    def value_iterator(self):
        r"""value_iterator(map_s_SWBTagGroupMapsp self) -> SwigPyIterator"""
        return _core.map_s_SWBTagGroupMapsp_value_iterator(self)

    def __setitem__(self, *args):
        r"""
        __setitem__(map_s_SWBTagGroupMapsp self, string key)

        Parameters
        ----------
        key: std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::shared_ptr< SWBTagGroup > >::key_type const &

        __setitem__(map_s_SWBTagGroupMapsp self, string key, std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::shared_ptr< SWBTagGroup > >::mapped_type const & x)

        Parameters
        ----------
        key: std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::shared_ptr< SWBTagGroup > >::key_type const &
        x: std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::shared_ptr< SWBTagGroup > >::mapped_type const &

        """
        return _core.map_s_SWBTagGroupMapsp___setitem__(self, *args)

    def asdict(self):
        r"""asdict(map_s_SWBTagGroupMapsp self) -> PyObject *"""
        return _core.map_s_SWBTagGroupMapsp_asdict(self)

    def __init__(self, *args):
        r"""
        __init__(map_s_SWBTagGroupMapsp self, std::less< std::basic_string< char,std::char_traits< char >,std::allocator< char > > > const & other) -> map_s_SWBTagGroupMapsp

        Parameters
        ----------
        other: std::less< std::basic_string< char,std::char_traits< char >,std::allocator< char > > > const &

        __init__(map_s_SWBTagGroupMapsp self) -> map_s_SWBTagGroupMapsp
        __init__(map_s_SWBTagGroupMapsp self, map_s_SWBTagGroupMapsp other) -> map_s_SWBTagGroupMapsp

        Parameters
        ----------
        other: std::map< std::string,std::shared_ptr< SWBTagGroup > > const &

        """
        _core.map_s_SWBTagGroupMapsp_swiginit(self, _core.new_map_s_SWBTagGroupMapsp(*args))

    def empty(self):
        r"""empty(map_s_SWBTagGroupMapsp self) -> bool"""
        return _core.map_s_SWBTagGroupMapsp_empty(self)

    def size(self):
        r"""size(map_s_SWBTagGroupMapsp self) -> std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::shared_ptr< SWBTagGroup > >::size_type"""
        return _core.map_s_SWBTagGroupMapsp_size(self)

    def swap(self, v):
        r"""
        swap(map_s_SWBTagGroupMapsp self, map_s_SWBTagGroupMapsp v)

        Parameters
        ----------
        v: std::map< std::string,std::shared_ptr< SWBTagGroup > > &

        """
        return _core.map_s_SWBTagGroupMapsp_swap(self, v)

    def begin(self):
        r"""begin(map_s_SWBTagGroupMapsp self) -> std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::shared_ptr< SWBTagGroup > >::iterator"""
        return _core.map_s_SWBTagGroupMapsp_begin(self)

    def end(self):
        r"""end(map_s_SWBTagGroupMapsp self) -> std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::shared_ptr< SWBTagGroup > >::iterator"""
        return _core.map_s_SWBTagGroupMapsp_end(self)

    def rbegin(self):
        r"""rbegin(map_s_SWBTagGroupMapsp self) -> std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::shared_ptr< SWBTagGroup > >::reverse_iterator"""
        return _core.map_s_SWBTagGroupMapsp_rbegin(self)

    def rend(self):
        r"""rend(map_s_SWBTagGroupMapsp self) -> std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::shared_ptr< SWBTagGroup > >::reverse_iterator"""
        return _core.map_s_SWBTagGroupMapsp_rend(self)

    def clear(self):
        r"""clear(map_s_SWBTagGroupMapsp self)"""
        return _core.map_s_SWBTagGroupMapsp_clear(self)

    def get_allocator(self):
        r"""get_allocator(map_s_SWBTagGroupMapsp self) -> std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::shared_ptr< SWBTagGroup > >::allocator_type"""
        return _core.map_s_SWBTagGroupMapsp_get_allocator(self)

    def count(self, x):
        r"""
        count(map_s_SWBTagGroupMapsp self, string x) -> std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::shared_ptr< SWBTagGroup > >::size_type

        Parameters
        ----------
        x: std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::shared_ptr< SWBTagGroup > >::key_type const &

        """
        return _core.map_s_SWBTagGroupMapsp_count(self, x)

    def erase(self, *args):
        r"""
        erase(map_s_SWBTagGroupMapsp self, string x) -> std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::shared_ptr< SWBTagGroup > >::size_type

        Parameters
        ----------
        x: std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::shared_ptr< SWBTagGroup > >::key_type const &

        erase(map_s_SWBTagGroupMapsp self, std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::shared_ptr< SWBTagGroup > >::iterator position)

        Parameters
        ----------
        position: std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::shared_ptr< SWBTagGroup > >::iterator

        erase(map_s_SWBTagGroupMapsp self, std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::shared_ptr< SWBTagGroup > >::iterator first, std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::shared_ptr< SWBTagGroup > >::iterator last)

        Parameters
        ----------
        first: std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::shared_ptr< SWBTagGroup > >::iterator
        last: std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::shared_ptr< SWBTagGroup > >::iterator

        """
        return _core.map_s_SWBTagGroupMapsp_erase(self, *args)

    def find(self, x):
        r"""
        find(map_s_SWBTagGroupMapsp self, string x) -> std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::shared_ptr< SWBTagGroup > >::iterator

        Parameters
        ----------
        x: std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::shared_ptr< SWBTagGroup > >::key_type const &

        """
        return _core.map_s_SWBTagGroupMapsp_find(self, x)

    def lower_bound(self, x):
        r"""
        lower_bound(map_s_SWBTagGroupMapsp self, string x) -> std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::shared_ptr< SWBTagGroup > >::iterator

        Parameters
        ----------
        x: std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::shared_ptr< SWBTagGroup > >::key_type const &

        """
        return _core.map_s_SWBTagGroupMapsp_lower_bound(self, x)

    def upper_bound(self, x):
        r"""
        upper_bound(map_s_SWBTagGroupMapsp self, string x) -> std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::shared_ptr< SWBTagGroup > >::iterator

        Parameters
        ----------
        x: std::map< std::basic_string< char,std::char_traits< char >,std::allocator< char > >,std::shared_ptr< SWBTagGroup > >::key_type const &

        """
        return _core.map_s_SWBTagGroupMapsp_upper_bound(self, x)
    __swig_destroy__ = _core.delete_map_s_SWBTagGroupMapsp

# Register map_s_SWBTagGroupMapsp in _core:
_core.map_s_SWBTagGroupMapsp_swigregister(map_s_SWBTagGroupMapsp)

class map_i_SWBNodeVariableValue(object):
    r"""Proxy of C++ std::map< int,SWBNodeVariableValue > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(map_i_SWBNodeVariableValue self) -> SwigPyIterator"""
        return _core.map_i_SWBNodeVariableValue_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(map_i_SWBNodeVariableValue self) -> bool"""
        return _core.map_i_SWBNodeVariableValue___nonzero__(self)

    def __bool__(self):
        r"""__bool__(map_i_SWBNodeVariableValue self) -> bool"""
        return _core.map_i_SWBNodeVariableValue___bool__(self)

    def __len__(self):
        r"""__len__(map_i_SWBNodeVariableValue self) -> std::map< int,SWBNodeVariableValue >::size_type"""
        return _core.map_i_SWBNodeVariableValue___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        r"""
        __getitem__(map_i_SWBNodeVariableValue self, std::map< int,SWBNodeVariableValue >::key_type const & key) -> SWBNodeVariableValue

        Parameters
        ----------
        key: std::map< int,SWBNodeVariableValue >::key_type const &

        """
        return _core.map_i_SWBNodeVariableValue___getitem__(self, key)

    def __delitem__(self, key):
        r"""
        __delitem__(map_i_SWBNodeVariableValue self, std::map< int,SWBNodeVariableValue >::key_type const & key)

        Parameters
        ----------
        key: std::map< int,SWBNodeVariableValue >::key_type const &

        """
        return _core.map_i_SWBNodeVariableValue___delitem__(self, key)

    def has_key(self, key):
        r"""
        has_key(map_i_SWBNodeVariableValue self, std::map< int,SWBNodeVariableValue >::key_type const & key) -> bool

        Parameters
        ----------
        key: std::map< int,SWBNodeVariableValue >::key_type const &

        """
        return _core.map_i_SWBNodeVariableValue_has_key(self, key)

    def keys(self):
        r"""keys(map_i_SWBNodeVariableValue self) -> PyObject *"""
        return _core.map_i_SWBNodeVariableValue_keys(self)

    def values(self):
        r"""values(map_i_SWBNodeVariableValue self) -> PyObject *"""
        return _core.map_i_SWBNodeVariableValue_values(self)

    def items(self):
        r"""items(map_i_SWBNodeVariableValue self) -> PyObject *"""
        return _core.map_i_SWBNodeVariableValue_items(self)

    def __contains__(self, key):
        r"""
        __contains__(map_i_SWBNodeVariableValue self, std::map< int,SWBNodeVariableValue >::key_type const & key) -> bool

        Parameters
        ----------
        key: std::map< int,SWBNodeVariableValue >::key_type const &

        """
        return _core.map_i_SWBNodeVariableValue___contains__(self, key)

    def key_iterator(self):
        r"""key_iterator(map_i_SWBNodeVariableValue self) -> SwigPyIterator"""
        return _core.map_i_SWBNodeVariableValue_key_iterator(self)

    def value_iterator(self):
        r"""value_iterator(map_i_SWBNodeVariableValue self) -> SwigPyIterator"""
        return _core.map_i_SWBNodeVariableValue_value_iterator(self)

    def __setitem__(self, *args):
        r"""
        __setitem__(map_i_SWBNodeVariableValue self, std::map< int,SWBNodeVariableValue >::key_type const & key)

        Parameters
        ----------
        key: std::map< int,SWBNodeVariableValue >::key_type const &

        __setitem__(map_i_SWBNodeVariableValue self, std::map< int,SWBNodeVariableValue >::key_type const & key, SWBNodeVariableValue x)

        Parameters
        ----------
        key: std::map< int,SWBNodeVariableValue >::key_type const &
        x: std::map< int,SWBNodeVariableValue >::mapped_type const &

        """
        return _core.map_i_SWBNodeVariableValue___setitem__(self, *args)

    def asdict(self):
        r"""asdict(map_i_SWBNodeVariableValue self) -> PyObject *"""
        return _core.map_i_SWBNodeVariableValue_asdict(self)

    def __init__(self, *args):
        r"""
        __init__(map_i_SWBNodeVariableValue self, std::less< int > const & other) -> map_i_SWBNodeVariableValue

        Parameters
        ----------
        other: std::less< int > const &

        __init__(map_i_SWBNodeVariableValue self) -> map_i_SWBNodeVariableValue
        __init__(map_i_SWBNodeVariableValue self, map_i_SWBNodeVariableValue other) -> map_i_SWBNodeVariableValue

        Parameters
        ----------
        other: std::map< int,SWBNodeVariableValue > const &

        """
        _core.map_i_SWBNodeVariableValue_swiginit(self, _core.new_map_i_SWBNodeVariableValue(*args))

    def empty(self):
        r"""empty(map_i_SWBNodeVariableValue self) -> bool"""
        return _core.map_i_SWBNodeVariableValue_empty(self)

    def size(self):
        r"""size(map_i_SWBNodeVariableValue self) -> std::map< int,SWBNodeVariableValue >::size_type"""
        return _core.map_i_SWBNodeVariableValue_size(self)

    def swap(self, v):
        r"""
        swap(map_i_SWBNodeVariableValue self, map_i_SWBNodeVariableValue v)

        Parameters
        ----------
        v: std::map< int,SWBNodeVariableValue > &

        """
        return _core.map_i_SWBNodeVariableValue_swap(self, v)

    def begin(self):
        r"""begin(map_i_SWBNodeVariableValue self) -> std::map< int,SWBNodeVariableValue >::iterator"""
        return _core.map_i_SWBNodeVariableValue_begin(self)

    def end(self):
        r"""end(map_i_SWBNodeVariableValue self) -> std::map< int,SWBNodeVariableValue >::iterator"""
        return _core.map_i_SWBNodeVariableValue_end(self)

    def rbegin(self):
        r"""rbegin(map_i_SWBNodeVariableValue self) -> std::map< int,SWBNodeVariableValue >::reverse_iterator"""
        return _core.map_i_SWBNodeVariableValue_rbegin(self)

    def rend(self):
        r"""rend(map_i_SWBNodeVariableValue self) -> std::map< int,SWBNodeVariableValue >::reverse_iterator"""
        return _core.map_i_SWBNodeVariableValue_rend(self)

    def clear(self):
        r"""clear(map_i_SWBNodeVariableValue self)"""
        return _core.map_i_SWBNodeVariableValue_clear(self)

    def get_allocator(self):
        r"""get_allocator(map_i_SWBNodeVariableValue self) -> std::map< int,SWBNodeVariableValue >::allocator_type"""
        return _core.map_i_SWBNodeVariableValue_get_allocator(self)

    def count(self, x):
        r"""
        count(map_i_SWBNodeVariableValue self, std::map< int,SWBNodeVariableValue >::key_type const & x) -> std::map< int,SWBNodeVariableValue >::size_type

        Parameters
        ----------
        x: std::map< int,SWBNodeVariableValue >::key_type const &

        """
        return _core.map_i_SWBNodeVariableValue_count(self, x)

    def erase(self, *args):
        r"""
        erase(map_i_SWBNodeVariableValue self, std::map< int,SWBNodeVariableValue >::key_type const & x) -> std::map< int,SWBNodeVariableValue >::size_type

        Parameters
        ----------
        x: std::map< int,SWBNodeVariableValue >::key_type const &

        erase(map_i_SWBNodeVariableValue self, std::map< int,SWBNodeVariableValue >::iterator position)

        Parameters
        ----------
        position: std::map< int,SWBNodeVariableValue >::iterator

        erase(map_i_SWBNodeVariableValue self, std::map< int,SWBNodeVariableValue >::iterator first, std::map< int,SWBNodeVariableValue >::iterator last)

        Parameters
        ----------
        first: std::map< int,SWBNodeVariableValue >::iterator
        last: std::map< int,SWBNodeVariableValue >::iterator

        """
        return _core.map_i_SWBNodeVariableValue_erase(self, *args)

    def find(self, x):
        r"""
        find(map_i_SWBNodeVariableValue self, std::map< int,SWBNodeVariableValue >::key_type const & x) -> std::map< int,SWBNodeVariableValue >::iterator

        Parameters
        ----------
        x: std::map< int,SWBNodeVariableValue >::key_type const &

        """
        return _core.map_i_SWBNodeVariableValue_find(self, x)

    def lower_bound(self, x):
        r"""
        lower_bound(map_i_SWBNodeVariableValue self, std::map< int,SWBNodeVariableValue >::key_type const & x) -> std::map< int,SWBNodeVariableValue >::iterator

        Parameters
        ----------
        x: std::map< int,SWBNodeVariableValue >::key_type const &

        """
        return _core.map_i_SWBNodeVariableValue_lower_bound(self, x)

    def upper_bound(self, x):
        r"""
        upper_bound(map_i_SWBNodeVariableValue self, std::map< int,SWBNodeVariableValue >::key_type const & x) -> std::map< int,SWBNodeVariableValue >::iterator

        Parameters
        ----------
        x: std::map< int,SWBNodeVariableValue >::key_type const &

        """
        return _core.map_i_SWBNodeVariableValue_upper_bound(self, x)
    __swig_destroy__ = _core.delete_map_i_SWBNodeVariableValue

# Register map_i_SWBNodeVariableValue in _core:
_core.map_i_SWBNodeVariableValue_swigregister(map_i_SWBNodeVariableValue)

class map_SWBScenariosp_NODE_TYPE(object):
    r"""Proxy of C++ std::map< std::shared_ptr< SWBScenario >,NODE_TYPE > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(map_SWBScenariosp_NODE_TYPE self) -> SwigPyIterator"""
        return _core.map_SWBScenariosp_NODE_TYPE_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(map_SWBScenariosp_NODE_TYPE self) -> bool"""
        return _core.map_SWBScenariosp_NODE_TYPE___nonzero__(self)

    def __bool__(self):
        r"""__bool__(map_SWBScenariosp_NODE_TYPE self) -> bool"""
        return _core.map_SWBScenariosp_NODE_TYPE___bool__(self)

    def __len__(self):
        r"""__len__(map_SWBScenariosp_NODE_TYPE self) -> std::map< std::shared_ptr< SWBScenario >,enum NODE_TYPE >::size_type"""
        return _core.map_SWBScenariosp_NODE_TYPE___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        r"""
        __getitem__(map_SWBScenariosp_NODE_TYPE self, std::map< std::shared_ptr< SWBScenario >,enum NODE_TYPE >::key_type const & key) -> std::map< std::shared_ptr< SWBScenario >,enum NODE_TYPE >::mapped_type const &

        Parameters
        ----------
        key: std::map< std::shared_ptr< SWBScenario >,enum NODE_TYPE >::key_type const &

        """
        return _core.map_SWBScenariosp_NODE_TYPE___getitem__(self, key)

    def __delitem__(self, key):
        r"""
        __delitem__(map_SWBScenariosp_NODE_TYPE self, std::map< std::shared_ptr< SWBScenario >,enum NODE_TYPE >::key_type const & key)

        Parameters
        ----------
        key: std::map< std::shared_ptr< SWBScenario >,enum NODE_TYPE >::key_type const &

        """
        return _core.map_SWBScenariosp_NODE_TYPE___delitem__(self, key)

    def has_key(self, key):
        r"""
        has_key(map_SWBScenariosp_NODE_TYPE self, std::map< std::shared_ptr< SWBScenario >,enum NODE_TYPE >::key_type const & key) -> bool

        Parameters
        ----------
        key: std::map< std::shared_ptr< SWBScenario >,enum NODE_TYPE >::key_type const &

        """
        return _core.map_SWBScenariosp_NODE_TYPE_has_key(self, key)

    def keys(self):
        r"""keys(map_SWBScenariosp_NODE_TYPE self) -> PyObject *"""
        return _core.map_SWBScenariosp_NODE_TYPE_keys(self)

    def values(self):
        r"""values(map_SWBScenariosp_NODE_TYPE self) -> PyObject *"""
        return _core.map_SWBScenariosp_NODE_TYPE_values(self)

    def items(self):
        r"""items(map_SWBScenariosp_NODE_TYPE self) -> PyObject *"""
        return _core.map_SWBScenariosp_NODE_TYPE_items(self)

    def __contains__(self, key):
        r"""
        __contains__(map_SWBScenariosp_NODE_TYPE self, std::map< std::shared_ptr< SWBScenario >,enum NODE_TYPE >::key_type const & key) -> bool

        Parameters
        ----------
        key: std::map< std::shared_ptr< SWBScenario >,enum NODE_TYPE >::key_type const &

        """
        return _core.map_SWBScenariosp_NODE_TYPE___contains__(self, key)

    def key_iterator(self):
        r"""key_iterator(map_SWBScenariosp_NODE_TYPE self) -> SwigPyIterator"""
        return _core.map_SWBScenariosp_NODE_TYPE_key_iterator(self)

    def value_iterator(self):
        r"""value_iterator(map_SWBScenariosp_NODE_TYPE self) -> SwigPyIterator"""
        return _core.map_SWBScenariosp_NODE_TYPE_value_iterator(self)

    def __setitem__(self, *args):
        r"""
        __setitem__(map_SWBScenariosp_NODE_TYPE self, std::map< std::shared_ptr< SWBScenario >,enum NODE_TYPE >::key_type const & key)

        Parameters
        ----------
        key: std::map< std::shared_ptr< SWBScenario >,enum NODE_TYPE >::key_type const &

        __setitem__(map_SWBScenariosp_NODE_TYPE self, std::map< std::shared_ptr< SWBScenario >,enum NODE_TYPE >::key_type const & key, std::map< std::shared_ptr< SWBScenario >,enum NODE_TYPE >::mapped_type const & x)

        Parameters
        ----------
        key: std::map< std::shared_ptr< SWBScenario >,enum NODE_TYPE >::key_type const &
        x: std::map< std::shared_ptr< SWBScenario >,enum NODE_TYPE >::mapped_type const &

        """
        return _core.map_SWBScenariosp_NODE_TYPE___setitem__(self, *args)

    def asdict(self):
        r"""asdict(map_SWBScenariosp_NODE_TYPE self) -> PyObject *"""
        return _core.map_SWBScenariosp_NODE_TYPE_asdict(self)

    def __init__(self, *args):
        r"""
        __init__(map_SWBScenariosp_NODE_TYPE self, std::less< std::shared_ptr< SWBScenario > > const & other) -> map_SWBScenariosp_NODE_TYPE

        Parameters
        ----------
        other: std::less< std::shared_ptr< SWBScenario > > const &

        __init__(map_SWBScenariosp_NODE_TYPE self) -> map_SWBScenariosp_NODE_TYPE
        __init__(map_SWBScenariosp_NODE_TYPE self, map_SWBScenariosp_NODE_TYPE other) -> map_SWBScenariosp_NODE_TYPE

        Parameters
        ----------
        other: std::map< std::shared_ptr< SWBScenario >,NODE_TYPE > const &

        """
        _core.map_SWBScenariosp_NODE_TYPE_swiginit(self, _core.new_map_SWBScenariosp_NODE_TYPE(*args))

    def empty(self):
        r"""empty(map_SWBScenariosp_NODE_TYPE self) -> bool"""
        return _core.map_SWBScenariosp_NODE_TYPE_empty(self)

    def size(self):
        r"""size(map_SWBScenariosp_NODE_TYPE self) -> std::map< std::shared_ptr< SWBScenario >,enum NODE_TYPE >::size_type"""
        return _core.map_SWBScenariosp_NODE_TYPE_size(self)

    def swap(self, v):
        r"""
        swap(map_SWBScenariosp_NODE_TYPE self, map_SWBScenariosp_NODE_TYPE v)

        Parameters
        ----------
        v: std::map< std::shared_ptr< SWBScenario >,NODE_TYPE > &

        """
        return _core.map_SWBScenariosp_NODE_TYPE_swap(self, v)

    def begin(self):
        r"""begin(map_SWBScenariosp_NODE_TYPE self) -> std::map< std::shared_ptr< SWBScenario >,enum NODE_TYPE >::iterator"""
        return _core.map_SWBScenariosp_NODE_TYPE_begin(self)

    def end(self):
        r"""end(map_SWBScenariosp_NODE_TYPE self) -> std::map< std::shared_ptr< SWBScenario >,enum NODE_TYPE >::iterator"""
        return _core.map_SWBScenariosp_NODE_TYPE_end(self)

    def rbegin(self):
        r"""rbegin(map_SWBScenariosp_NODE_TYPE self) -> std::map< std::shared_ptr< SWBScenario >,enum NODE_TYPE >::reverse_iterator"""
        return _core.map_SWBScenariosp_NODE_TYPE_rbegin(self)

    def rend(self):
        r"""rend(map_SWBScenariosp_NODE_TYPE self) -> std::map< std::shared_ptr< SWBScenario >,enum NODE_TYPE >::reverse_iterator"""
        return _core.map_SWBScenariosp_NODE_TYPE_rend(self)

    def clear(self):
        r"""clear(map_SWBScenariosp_NODE_TYPE self)"""
        return _core.map_SWBScenariosp_NODE_TYPE_clear(self)

    def get_allocator(self):
        r"""get_allocator(map_SWBScenariosp_NODE_TYPE self) -> std::map< std::shared_ptr< SWBScenario >,enum NODE_TYPE >::allocator_type"""
        return _core.map_SWBScenariosp_NODE_TYPE_get_allocator(self)

    def count(self, x):
        r"""
        count(map_SWBScenariosp_NODE_TYPE self, std::map< std::shared_ptr< SWBScenario >,enum NODE_TYPE >::key_type const & x) -> std::map< std::shared_ptr< SWBScenario >,enum NODE_TYPE >::size_type

        Parameters
        ----------
        x: std::map< std::shared_ptr< SWBScenario >,enum NODE_TYPE >::key_type const &

        """
        return _core.map_SWBScenariosp_NODE_TYPE_count(self, x)

    def erase(self, *args):
        r"""
        erase(map_SWBScenariosp_NODE_TYPE self, std::map< std::shared_ptr< SWBScenario >,enum NODE_TYPE >::key_type const & x) -> std::map< std::shared_ptr< SWBScenario >,enum NODE_TYPE >::size_type

        Parameters
        ----------
        x: std::map< std::shared_ptr< SWBScenario >,enum NODE_TYPE >::key_type const &

        erase(map_SWBScenariosp_NODE_TYPE self, std::map< std::shared_ptr< SWBScenario >,enum NODE_TYPE >::iterator position)

        Parameters
        ----------
        position: std::map< std::shared_ptr< SWBScenario >,enum NODE_TYPE >::iterator

        erase(map_SWBScenariosp_NODE_TYPE self, std::map< std::shared_ptr< SWBScenario >,enum NODE_TYPE >::iterator first, std::map< std::shared_ptr< SWBScenario >,enum NODE_TYPE >::iterator last)

        Parameters
        ----------
        first: std::map< std::shared_ptr< SWBScenario >,enum NODE_TYPE >::iterator
        last: std::map< std::shared_ptr< SWBScenario >,enum NODE_TYPE >::iterator

        """
        return _core.map_SWBScenariosp_NODE_TYPE_erase(self, *args)

    def find(self, x):
        r"""
        find(map_SWBScenariosp_NODE_TYPE self, std::map< std::shared_ptr< SWBScenario >,enum NODE_TYPE >::key_type const & x) -> std::map< std::shared_ptr< SWBScenario >,enum NODE_TYPE >::iterator

        Parameters
        ----------
        x: std::map< std::shared_ptr< SWBScenario >,enum NODE_TYPE >::key_type const &

        """
        return _core.map_SWBScenariosp_NODE_TYPE_find(self, x)

    def lower_bound(self, x):
        r"""
        lower_bound(map_SWBScenariosp_NODE_TYPE self, std::map< std::shared_ptr< SWBScenario >,enum NODE_TYPE >::key_type const & x) -> std::map< std::shared_ptr< SWBScenario >,enum NODE_TYPE >::iterator

        Parameters
        ----------
        x: std::map< std::shared_ptr< SWBScenario >,enum NODE_TYPE >::key_type const &

        """
        return _core.map_SWBScenariosp_NODE_TYPE_lower_bound(self, x)

    def upper_bound(self, x):
        r"""
        upper_bound(map_SWBScenariosp_NODE_TYPE self, std::map< std::shared_ptr< SWBScenario >,enum NODE_TYPE >::key_type const & x) -> std::map< std::shared_ptr< SWBScenario >,enum NODE_TYPE >::iterator

        Parameters
        ----------
        x: std::map< std::shared_ptr< SWBScenario >,enum NODE_TYPE >::key_type const &

        """
        return _core.map_SWBScenariosp_NODE_TYPE_upper_bound(self, x)
    __swig_destroy__ = _core.delete_map_SWBScenariosp_NODE_TYPE

# Register map_SWBScenariosp_NODE_TYPE in _core:
_core.map_SWBScenariosp_NODE_TYPE_swigregister(map_SWBScenariosp_NODE_TYPE)

class map_NKEY_SWBNode(object):
    r"""Proxy of C++ std::map< NKEY,std::shared_ptr< SWBNode > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(map_NKEY_SWBNode self) -> SwigPyIterator"""
        return _core.map_NKEY_SWBNode_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(map_NKEY_SWBNode self) -> bool"""
        return _core.map_NKEY_SWBNode___nonzero__(self)

    def __bool__(self):
        r"""__bool__(map_NKEY_SWBNode self) -> bool"""
        return _core.map_NKEY_SWBNode___bool__(self)

    def __len__(self):
        r"""__len__(map_NKEY_SWBNode self) -> std::map< int,std::shared_ptr< SWBNode > >::size_type"""
        return _core.map_NKEY_SWBNode___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        r"""
        __getitem__(map_NKEY_SWBNode self, std::map< int,std::shared_ptr< SWBNode > >::key_type const & key) -> std::map< int,std::shared_ptr< SWBNode > >::mapped_type const &

        Parameters
        ----------
        key: std::map< int,std::shared_ptr< SWBNode > >::key_type const &

        """
        return _core.map_NKEY_SWBNode___getitem__(self, key)

    def __delitem__(self, key):
        r"""
        __delitem__(map_NKEY_SWBNode self, std::map< int,std::shared_ptr< SWBNode > >::key_type const & key)

        Parameters
        ----------
        key: std::map< int,std::shared_ptr< SWBNode > >::key_type const &

        """
        return _core.map_NKEY_SWBNode___delitem__(self, key)

    def has_key(self, key):
        r"""
        has_key(map_NKEY_SWBNode self, std::map< int,std::shared_ptr< SWBNode > >::key_type const & key) -> bool

        Parameters
        ----------
        key: std::map< int,std::shared_ptr< SWBNode > >::key_type const &

        """
        return _core.map_NKEY_SWBNode_has_key(self, key)

    def keys(self):
        r"""keys(map_NKEY_SWBNode self) -> PyObject *"""
        return _core.map_NKEY_SWBNode_keys(self)

    def values(self):
        r"""values(map_NKEY_SWBNode self) -> PyObject *"""
        return _core.map_NKEY_SWBNode_values(self)

    def items(self):
        r"""items(map_NKEY_SWBNode self) -> PyObject *"""
        return _core.map_NKEY_SWBNode_items(self)

    def __contains__(self, key):
        r"""
        __contains__(map_NKEY_SWBNode self, std::map< int,std::shared_ptr< SWBNode > >::key_type const & key) -> bool

        Parameters
        ----------
        key: std::map< int,std::shared_ptr< SWBNode > >::key_type const &

        """
        return _core.map_NKEY_SWBNode___contains__(self, key)

    def key_iterator(self):
        r"""key_iterator(map_NKEY_SWBNode self) -> SwigPyIterator"""
        return _core.map_NKEY_SWBNode_key_iterator(self)

    def value_iterator(self):
        r"""value_iterator(map_NKEY_SWBNode self) -> SwigPyIterator"""
        return _core.map_NKEY_SWBNode_value_iterator(self)

    def __setitem__(self, *args):
        r"""
        __setitem__(map_NKEY_SWBNode self, std::map< int,std::shared_ptr< SWBNode > >::key_type const & key)

        Parameters
        ----------
        key: std::map< int,std::shared_ptr< SWBNode > >::key_type const &

        __setitem__(map_NKEY_SWBNode self, std::map< int,std::shared_ptr< SWBNode > >::key_type const & key, std::map< int,std::shared_ptr< SWBNode > >::mapped_type const & x)

        Parameters
        ----------
        key: std::map< int,std::shared_ptr< SWBNode > >::key_type const &
        x: std::map< int,std::shared_ptr< SWBNode > >::mapped_type const &

        """
        return _core.map_NKEY_SWBNode___setitem__(self, *args)

    def asdict(self):
        r"""asdict(map_NKEY_SWBNode self) -> PyObject *"""
        return _core.map_NKEY_SWBNode_asdict(self)

    def __init__(self, *args):
        r"""
        __init__(map_NKEY_SWBNode self, std::less< int > const & other) -> map_NKEY_SWBNode

        Parameters
        ----------
        other: std::less< int > const &

        __init__(map_NKEY_SWBNode self) -> map_NKEY_SWBNode
        __init__(map_NKEY_SWBNode self, map_NKEY_SWBNode other) -> map_NKEY_SWBNode

        Parameters
        ----------
        other: std::map< NKEY,std::shared_ptr< SWBNode > > const &

        """
        _core.map_NKEY_SWBNode_swiginit(self, _core.new_map_NKEY_SWBNode(*args))

    def empty(self):
        r"""empty(map_NKEY_SWBNode self) -> bool"""
        return _core.map_NKEY_SWBNode_empty(self)

    def size(self):
        r"""size(map_NKEY_SWBNode self) -> std::map< int,std::shared_ptr< SWBNode > >::size_type"""
        return _core.map_NKEY_SWBNode_size(self)

    def swap(self, v):
        r"""
        swap(map_NKEY_SWBNode self, map_NKEY_SWBNode v)

        Parameters
        ----------
        v: std::map< NKEY,std::shared_ptr< SWBNode > > &

        """
        return _core.map_NKEY_SWBNode_swap(self, v)

    def begin(self):
        r"""begin(map_NKEY_SWBNode self) -> std::map< int,std::shared_ptr< SWBNode > >::iterator"""
        return _core.map_NKEY_SWBNode_begin(self)

    def end(self):
        r"""end(map_NKEY_SWBNode self) -> std::map< int,std::shared_ptr< SWBNode > >::iterator"""
        return _core.map_NKEY_SWBNode_end(self)

    def rbegin(self):
        r"""rbegin(map_NKEY_SWBNode self) -> std::map< int,std::shared_ptr< SWBNode > >::reverse_iterator"""
        return _core.map_NKEY_SWBNode_rbegin(self)

    def rend(self):
        r"""rend(map_NKEY_SWBNode self) -> std::map< int,std::shared_ptr< SWBNode > >::reverse_iterator"""
        return _core.map_NKEY_SWBNode_rend(self)

    def clear(self):
        r"""clear(map_NKEY_SWBNode self)"""
        return _core.map_NKEY_SWBNode_clear(self)

    def get_allocator(self):
        r"""get_allocator(map_NKEY_SWBNode self) -> std::map< int,std::shared_ptr< SWBNode > >::allocator_type"""
        return _core.map_NKEY_SWBNode_get_allocator(self)

    def count(self, x):
        r"""
        count(map_NKEY_SWBNode self, std::map< int,std::shared_ptr< SWBNode > >::key_type const & x) -> std::map< int,std::shared_ptr< SWBNode > >::size_type

        Parameters
        ----------
        x: std::map< int,std::shared_ptr< SWBNode > >::key_type const &

        """
        return _core.map_NKEY_SWBNode_count(self, x)

    def erase(self, *args):
        r"""
        erase(map_NKEY_SWBNode self, std::map< int,std::shared_ptr< SWBNode > >::key_type const & x) -> std::map< int,std::shared_ptr< SWBNode > >::size_type

        Parameters
        ----------
        x: std::map< int,std::shared_ptr< SWBNode > >::key_type const &

        erase(map_NKEY_SWBNode self, std::map< int,std::shared_ptr< SWBNode > >::iterator position)

        Parameters
        ----------
        position: std::map< int,std::shared_ptr< SWBNode > >::iterator

        erase(map_NKEY_SWBNode self, std::map< int,std::shared_ptr< SWBNode > >::iterator first, std::map< int,std::shared_ptr< SWBNode > >::iterator last)

        Parameters
        ----------
        first: std::map< int,std::shared_ptr< SWBNode > >::iterator
        last: std::map< int,std::shared_ptr< SWBNode > >::iterator

        """
        return _core.map_NKEY_SWBNode_erase(self, *args)

    def find(self, x):
        r"""
        find(map_NKEY_SWBNode self, std::map< int,std::shared_ptr< SWBNode > >::key_type const & x) -> std::map< int,std::shared_ptr< SWBNode > >::iterator

        Parameters
        ----------
        x: std::map< int,std::shared_ptr< SWBNode > >::key_type const &

        """
        return _core.map_NKEY_SWBNode_find(self, x)

    def lower_bound(self, x):
        r"""
        lower_bound(map_NKEY_SWBNode self, std::map< int,std::shared_ptr< SWBNode > >::key_type const & x) -> std::map< int,std::shared_ptr< SWBNode > >::iterator

        Parameters
        ----------
        x: std::map< int,std::shared_ptr< SWBNode > >::key_type const &

        """
        return _core.map_NKEY_SWBNode_lower_bound(self, x)

    def upper_bound(self, x):
        r"""
        upper_bound(map_NKEY_SWBNode self, std::map< int,std::shared_ptr< SWBNode > >::key_type const & x) -> std::map< int,std::shared_ptr< SWBNode > >::iterator

        Parameters
        ----------
        x: std::map< int,std::shared_ptr< SWBNode > >::key_type const &

        """
        return _core.map_NKEY_SWBNode_upper_bound(self, x)
    __swig_destroy__ = _core.delete_map_NKEY_SWBNode

# Register map_NKEY_SWBNode in _core:
_core.map_NKEY_SWBNode_swigregister(map_NKEY_SWBNode)

class SWBTagScalar(SWBTag):
    r"""
    Proxy of C++ SWBTagScalar< std::string > class.
    Proxy of C++ SWBTagScalar< std::string > class.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def StructureType(self):
        r"""StructureType(SWBTagScalar self) -> SWBTag::SWBStructureType"""
        return _core.SWBTagScalar_StructureType(self)

    def Value(self):
        r"""Value(SWBTagScalar self) -> string"""
        return _core.SWBTagScalar_Value(self)

    def ValueType(self):
        r"""ValueType(SWBTagScalar self) -> SWBTag::SWBValueType"""
        return _core.SWBTagScalar_ValueType(self)

    def __init__(self, key, value):
        r"""
        __init__(SWBTagScalar self, string key, string value) -> SWBTagScalar

        Parameters
        ----------
        key: str
        value: std::basic_string< char,std::char_traits< char >,std::allocator< char > >

        """
        if self.__class__ == SWBTagScalar:
            _self = None
        else:
            _self = self
        _core.SWBTagScalar_swiginit(self, _core.new_SWBTagScalar(_self, key, value))

    def SetValue(self, v):
        r"""
        SetValue(SWBTagScalar self, string v)

        Parameters
        ----------
        v: std::basic_string< char,std::char_traits< char >,std::allocator< char > > const &

        """
        return _core.SWBTagScalar_SetValue(self, v)

    def CopyTag(self):
        r"""CopyTag(SWBTagScalar self) -> std::shared_ptr< SWBTag >"""
        return _core.SWBTagScalar_CopyTag(self)
    __swig_destroy__ = _core.delete_SWBTagScalar
    def __disown__(self):
        self.this.disown()
        _core.disown_SWBTagScalar(self)
        return weakref.proxy(self)

# Register SWBTagScalar in _core:
_core.SWBTagScalar_swigregister(SWBTagScalar)


def extractUniquePtr(*args):
    r"""
    extractUniquePtr(std::unique_ptr< SWBTreePool > & pInstance) -> SWBTreePool

    Parameters
    ----------
    pInstance: std::unique_ptr< SWBTreePool > &

    extractUniquePtr(std::unique_ptr< SWBExecGraphHandler > & pInstance) -> SWBExecGraphHandler

    Parameters
    ----------
    pInstance: std::unique_ptr< SWBExecGraphHandler > &

    """
    return _core.extractUniquePtr(*args)

def extractSharedPtr(*args):
    r"""
    extractSharedPtr(std::shared_ptr< SWBTreePool > const & pInstance) -> SWBTreePool

    Parameters
    ----------
    pInstance: std::shared_ptr< SWBTreePool > const &

    extractSharedPtr(std::shared_ptr< SWBTree > const & pInstance) -> SWBTree

    Parameters
    ----------
    pInstance: std::shared_ptr< SWBTree > const &

    extractSharedPtr(std::shared_ptr< SWBNode > const & pInstance) -> SWBNode

    Parameters
    ----------
    pInstance: std::shared_ptr< SWBNode > const &

    """
    return _core.extractSharedPtr(*args)

def extractDerivedPtr(pInstance):
    r"""
    extractDerivedPtr(std::shared_ptr< SWBStep > const & pInstance) -> SWBSplitStep

    Parameters
    ----------
    pInstance: std::shared_ptr< SWBStep > const &

    """
    return _core.extractDerivedPtr(pInstance)

def ConvertStringToEnum(enumValue):
    r"""
    ConvertStringToEnum(string enumValue) -> VarType

    Parameters
    ----------
    enumValue: str

    """
    return _core.ConvertStringToEnum(enumValue)

def ConvertEnumToString(enumValue):
    r"""
    ConvertEnumToString(STATE enumValue) -> string

    Parameters
    ----------
    enumValue: enum STATE

    """
    return _core.ConvertEnumToString(enumValue)


