# ==================================================================
# SYNOPSYS CONFIDENTIAL - This is an unpublished, proprietary work  
# of Synopsys, Inc., and is fully protected under copyright and     
# trade secret laws. You may not view, use, disclose, copy, or      
# distribute this file or any information contained herein except   
# pursuant to a valid written license from Synopsys.                
# ==================================================================

"""
.. currentmodule:: swbpy2.core.TreePool
"""

import os.path

from swbpy2.core.core import SWBTreePool
from swbpy2.core.core import extractSharedPtr

from swbpy2.core.Singleton import *

@singleton
class TreePool(SWBTreePool):
    """   
    Client class for TreePool entity.
    """
    
    def __init__(self):
        """
        Constructor of TreePool object.
        """
        super().__init__()

    def New(self, project):
        """
        Method to create a new Tree.
        
        :param str project: SWB project path.
        """
        return super().New(self, project, None)    

    def Delete(self, project, freedumps = 0):
        """
        Method to delete a Tree.
        
        :param str project: SWB project path.
        :param int freedumps: Switch to delete the dump copies.
        """
        return super().DeleteTree(self, project, freedumps)    

    def Lookup(self, project):
        """
        Method to retrieve Tree via project argument.
        
        :param str project: SWB project path.
        :param int project: SWB project identifier.
        :return: Instance of the :class:`swbpy2.core.core.SWBTree` object linked with the project.
        :rtype: `swbpy2.core.core.SWBTree`
        """
        return extractSharedPtr(super().Lookup(self, project))
    
    def SetCurrentTree(self, project):
        """
        Method to set the current working Tree.
        
        :param str project: SWB project path.
        """
        return super().SetCurrentTree(project)
    
    def CurrentTree(self):    
        """
        Method to retrieve the current working Tree.
        
        :return: Current instance in the pool of the :class:`swbpy2.core.core.SWBTree` object.
        :rtype: `swbpy2.core.core.SWBTree`
        """
        return super().CurrentTree()
    
    def Size(self, project):
        """
        Method to retrieve the number of allocated Trees.
        
        :param str project: SWB project path.
        :return: Number of allocated Trees in the pool.
        :rtype: int
        """
        return super().Size()

    def SetUndoStackLimit(self, limit):
        """
        Method to setup the limit of undo operation.
        
        :param int limit: Limit of the undo operations allowed.
        """
        return super().SetUndoStackLimit(limit)

    def GetUndoStackLimit(self):
        """
        Method to retrieve the limit of undo operations.
        
        :return: Limit of undo operations.
        :rtype: int
        """
        return super().GetUndoStackLimit()

    def MaxId(self):
        """
        Method to retrieve maximum identifier number.
        
        :return: Maximum integer Tree identifier in the pool.
        :rtype: int
        """
        return super().MaxId()

    def Dump(self):
        """
        Method to dump a copy of the current Tree if any.
        """
        return super().Dump(None)

    def UpdateDump(self):
        """
        Method to remove oldest element from allocated Trees.
        """
        return super().UpdateDump()
    
    def Undo(self):
        """
        Method to undo changes in current Tree restoring latest dump.
        """
        return super().Undo()

    def FreeDumps(self):
        """
        Method to remove all dumps created for the current Tree.
        """
        return super().FreeDumps()
    
