# ==================================================================
# SYNOPSYS CONFIDENTIAL - This is an unpublished, proprietary work  
# of Synopsys, Inc., and is fully protected under copyright and     
# trade secret laws. You may not view, use, disclose, copy, or      
# distribute this file or any information contained herein except   
# pursuant to a valid written license from Synopsys.                
# ==================================================================

"""
.. currentmodule:: swbutils.common.SWBContext

Utility class to model environment settings
"""

import os
import re
import getpass
import pathlib
import tempfile
import pwd

from swbutils.common.Utils import is_traditional, parse_pref
from swbutils.model.Singleton import singleton

@singleton
class SWBContext(object):

    # initialize object with environment settings
    def __init__(self):
        
        # internal context variables
        self._stdb_ = None
        self._stroot_ = None
        self._strelease_ = None
        self._swb_site_settings_dir_ =  None
        self._preffile_ = None
        
        # initialize context variables
        if os.environ.get('STDB') is None:
            self._stdb_ = os.path.join(tempfile.gettempdir(), pwd.getpwuid(os.getuid()).pw_name, "stdb")
            os.environ["STDB"] = self._stdb_
        else:
            self._stdb_ = os.environ['STDB']
            
        if os.environ.get('STROOT') is None:
            raise ValueError('Environment variable STROOT is not set')
        
        if os.environ.get('STRELEASE') is None:
            raise ValueError('Environment variable STRELEASE is not set')
        self._stroot_ = os.environ['STROOT']
        
        self._strelease_ = os.environ['STRELEASE']
        if self._strelease_ == 'current':
            self._strelease_ =  os.readlink(os.path.join(self._stroot_, 'tcad', self._strelease_))

        m = re.search(
            r"(?:([A-Z])-)?(\d{4}\.\d{2}(?:-SP[12])?)",
            os.environ.get("STRELEASE_SWBPY", self._strelease_),
        )
        
        if m is None:
            raise ValueError("WARNING: Couldn't understand STRELEASE as a version, set STRELEASE_SWBPY to a version in the form F-YYYY.MM or F-YYYY.MM-SP1/2 to override")
        
        if m.group(1) is None:
            foundations = {
                "2016.12": "M",
                "2017.09": "N",
                "2018.06": "O",
                "2019.03": "P",
                "2019.12": "Q",
                "2020.09": "R",
                "2021.06": "S",
                "2021.12": "S",
                "2022.03": "T",
                "2022.12": "U",
                "2023.03": "U",
                "2023.09": "V",
                "2023.12": "V",
                "2024.03": "V",
                "2024.09": "W",
            }
            foundation = foundations[m.group(2)]
        else:
            foundation = m.group(1)
            
        self._strelease_ = f"{foundation}-{m.group(2)}"
        
        if os.environ.get('SWB_SITE_SETTINGS_DIR') is not None:
            self._swb_site_settings_dir_ = os.environ['SWB_SITE_SETTINGS_DIR']
        # get output path which may differ from STDB
        self._stdbout_ = self.get_split_storage()
        if self._stdbout_ == '@STDB@' or self._stdbout_ is None:
            self._stdbout_ = self._stdb_
        # normalize paths
        self._stdb_ = os.path.realpath(self._stdb_)
        self._stdbout_ = os.path.realpath(self._stdbout_)
        if not self._preffile_ is None:
            self._preffile_ = os.path.realpath(self._preffile_)
            
    # gets the path of output hierarchy in case of split project
    # TODO: change with the call to the SWB preferences library
    def get_split_storage(self):
        releases = [
            'M-2016.12', 'M-2016.12-SP1', 'M-2016.12-SP2',
            'N-2017.09', 'N-2017.09-SP1', 'N-2017.09-SP2',
            'O-2018.06', 'O-2018.06-SP1', 'O-2018.06-SP2',
            'P-2019.03', 'P-2019.03-SP1', 'P-2019.03-SP2',
            'Q-2019.12', 'Q-2019.12-SP1', 'Q-2019.12-SP2',
            'R-2020.09', 'R-2020.09-SP1', 'R-2020.09-SP2',
            'S-2021.06', 'S-2021.06-SP1', 'S-2021.06-SP2',
            'S-2021.12',
            'T-2022.03', 'T-2022.03-SP1', 'T-2022.03-SP2',
            'U-2022.12', 'U-2022.12-SP1', 'U-2022.12-SP2',
            'U-2023.03',
            'V-2023.09', 
            'V-2023.12',
            'V-2024.03',
            'W-2024.09', 'W-2024.09-SP1', 'W-2024.09-SP2',
        ]

        relIndex = releases.index(self._strelease_)
        levelkey = None
    
        # global preferences
        for ind in reversed(range(0,relIndex+1)):
            relName = releases[ind]
            xmlFile = f"gpref2.{relName}.xml"
            prefGlobal=os.path.join(self._stroot_, "tcad", self._strelease_, "lib", "glib2", "gpref2", xmlFile )
            if os.path.isfile(prefGlobal):
                self._preffile_ = prefGlobal
                key = parse_pref(prefGlobal)
                if key[1] == 'false':
                    return key[0]
                else:
                    levelkey = key[0]
                break
            
        # site preferences
        if self._swb_site_settings_dir_ is not None:
            for ind in reversed(range(0,relIndex+1)):
                relName = releases[ind]
                xmlFile = f"gpref2.{relName}.xml"
                prefSite=os.path.join(self._swb_site_settings_dir_, xmlFile )
                if os.path.isfile(prefSite):
                    self._preffile_ = prefSite
                    key = parse_pref(prefSite)
                    if key[1] == 'false':
                        return key[0]
                    else:
                        levelkey = key[0]
                    break
        
        # user preferences
        usrname = getpass.getuser()
        for ind in reversed(range(0,relIndex+1)):
            relName = releases[ind]
            xmlFileUser = f"gpref2_{usrname}.{relName}.xml"
            prefUser = os.path.join(self._stdb_, xmlFileUser )
            if os.path.isfile(prefUser):
                self._preffile_ = prefUser
                key = parse_pref(prefUser)
                levelkey = key[0]
                break
         
        # default value    
        return levelkey

    # returns the directory where the "results" folder should be stored
    def project_output_path(self, projectpath):
        if is_traditional(projectpath):
            return projectpath
                
        if self._stdb_ == self._stdbout_:
            return os.path.realpath(projectpath)
            
        stdbObj = pathlib.Path(self._stdb_)
        stdboutObj = pathlib.Path(self._stdbout_)
        pathObj = pathlib.Path(projectpath)
            
        try:
            relpathObj = pathObj.relative_to(stdbObj)
        except ValueError:
            relpathObj = pathObj
            
        if os.path.isabs(relpathObj):
            str = self._stdbout_ + os.path.sep + projectpath
            return os.path.realpath(str)
        else:
            return os.path.realpath(os.path.join(self._stdbout_, relpathObj))    

    def get_stdb(self):
        return self._stdb_

    def get_stdbout(self):
        return self._stdbout_

    def get_strelease(self):
        return self._strelease_
    
    def get_sitesettingsdir(self):
        return self._swb_site_settings_dir_
    
    def get_preffile(self):
        return self._preffile_
    

