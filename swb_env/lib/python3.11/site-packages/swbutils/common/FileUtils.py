# ==================================================================
# SYNOPSYS CONFIDENTIAL - This is an unpublished, proprietary work  
# of Synopsys, Inc., and is fully protected under copyright and     
# trade secret laws. You may not view, use, disclose, copy, or      
# distribute this file or any information contained herein except   
# pursuant to a valid written license from Synopsys.                
# ==================================================================

"""
.. currentmodule:: swbutils.common.FileUtils

Utility class for handling files.
"""

import fcntl
import time
import logging
import functools


# Decorator to serialise calls using a file lock
class atomic_file_lock:
    def __init__(self, f):
        self.f = f
        self.fname = f.__name__

    def __call__(self, *args, **kwargs):
        # Use a file lock to serialise calls
        # Standard lock
        with open(f"{self.fname}.lock", "w") as gtree_lock:
            fcntl.flock(gtree_lock, fcntl.LOCK_EX)
            locktime = time.strftime('%H:%M:%S', time.localtime(time.time()))
            print(f"Acquired lock for {self.fname} at: {locktime}")

            self.f(*args, **kwargs)

            fcntl.flock(gtree_lock, fcntl.LOCK_UN)

        """
        # NFS safe lock
        from flufl.lock import Lock
        gtree_lock = Lock("gtree.lock")
        with gtree_lock:
            # Set parent deck variables to optimal
            locktime = time.strftime('%H:%M:%S', time.localtime(time.time()))
            print(f"Acquired lock at: {locktime}")
            self.f(*args, **kwargs)
        """

        locktime = time.strftime('%H:%M:%S', time.localtime(time.time()))
        print(f"Released lock for {self.fname} at: {locktime}")

    def __get__(self, instance, instancetype):
        """
        Implement the descriptor protocol to make decorating instance
        method possible.
        """

        # Return a partial function with the first argument is the instance
        #   of the class decorated.
        return functools.partial(self.__call__, instance)

