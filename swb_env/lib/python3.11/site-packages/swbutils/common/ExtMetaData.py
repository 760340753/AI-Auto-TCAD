# ==================================================================
# SYNOPSYS CONFIDENTIAL - This is an unpublished, proprietary work  
# of Synopsys, Inc., and is fully protected under copyright and     
# trade secret laws. You may not view, use, disclose, copy, or      
# distribute this file or any information contained herein except   
# pursuant to a valid written license from Synopsys.                
# ==================================================================

import os
import json

class _JsonDict(object):
    def __init__(self, project, metadataref):
        self.metadataref = metadataref
        self.fpath = project + "/extdata.json"
        if len(self.metadataref[0]) == 0:
            _JsonDict.ReLoad(self)
   
    def Save(self):
        #Saves the meta data. Overwrites the meta data file store within memory content.
        try:
            ofile = open(self.fpath, "w")
            json.dump(self.metadataref[0], ofile, indent = 3)
            ofile.close()
        except Exception as e:
            pass

    def Load(self, fpath):
        if os.path.exists(fpath):
            infile = open(fpath)
            self.metadataref[0] = json.load(infile)
            infile.close()

    def ReLoad(self):
        _JsonDict.Load(self, self.fpath)

    def Add(self, key, dd):
        #Adds a dictionary stored by the given key, the dictionary may be nested
        self.metadataref[0][key] = dd
    
    def AddEntry(self, key, e1, e2):
        #Adds or updates an entry in the dictionary for the given key
        dd = _JsonDict.Get(self, key)
        dd[e1] = e2
        _JsonDict.Add(self, key, dd)

    def Get(self, key):
        #returns a dictionary associated by the key
        try:
            val = self.metadataref[0][key]
        except Exception as e:
            val = dict()
        return val
    
    def Remove(self, key):
        #Removes the associated entry by key. In memory removal only, file store not changed until save occurs. 
        self.metadataref[0].pop(key, None)
    
    def RemoveEntry(self, key, e1):
        #Removes an entry in the dictionary for the given key
        dd = _JsonDict.Get(self, key)
        dd.pop(e1, None)
        if bool(dd):
            _JsonDict.Add(self,key, dd)
        else:
            _JsonDict.Remove(self, key)

    def Clear(self):
        #Clears out all meta data from memory.
        self.metadataref[0]= {}

    def Print(self):
        for key in self.metadataref[0]:
            value = self.metadataref[0][key]
            print(f"Key = {key}, value = {value}" )

class ExtData(_JsonDict):
    def __init__(self, project, metadataref, prefix = ""):
        self.prefix = prefix
        super().__init__(project, metadataref)

    def Add(self, *args):
        """
        Add or update an item to storage
        
        :param args: 
            key, dict - sets dictionary associated to key
        or
            key, itemkey, itemvalue  - add/updates individual entry in dictionary 
        """
        key = self.prefix + args[0]
        if len(args) == 2:
            if(not isinstance(args[1], dict)):
                raise ValueError(f"ExtData.Add incorrect use, args[1] must be a dictionary ")
            super().Add(key, args[1])
        elif len(args) == 3:
            if(not isinstance(args[1], str)):
                raise ValueError(f"ExtData.Add incorrect use, args[1] must be a string")

            super().AddEntry(key, args[1], args[2])
        else:
            raise ValueError(f"ExtData.Add wrong number of args ")

    def Get(self, key):
        """
        :param key:
            the key of the dictionary to be returned
        """
        thekey = self.prefix + key
        return super().Get(thekey)
    
    def Remove(self,  *args):
        """
        Remove an item to storage
        
        :param args: 
            key - removes dictionary associated to key
        or
            key, itemkey - removes individual item from dictionary
        """
        key = self.prefix + args[0]
        if len(args) == 1:
            super().Remove(key)
        elif len(args) == 2:
            if(not isinstance(args[1], str)):
                raise ValueError(f"ExtData.Remove incorrect use, args[1] must be a string")
            super().RemoveEntry(key, args[1])
        else:
            raise ValueError(f"ExtData.Remove wrong number of args ")


class ParamExtData(ExtData):
    def __init__(self, project, metadataref):
        super().__init__(project, metadataref, "Param_")

class VarExtData(ExtData):
    def __init__(self, project, metadataref):
        super().__init__(project, metadataref, "Var_")

