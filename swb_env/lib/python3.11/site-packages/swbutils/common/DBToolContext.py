# ==================================================================
# SYNOPSYS CONFIDENTIAL - This is an unpublished, proprietary work  
# of Synopsys, Inc., and is fully protected under copyright and     
# trade secret laws. You may not view, use, disclose, copy, or      
# distribute this file or any information contained herein except   
# pursuant to a valid written license from Synopsys.                
# ==================================================================

"""
.. currentmodule:: swbutils.common.DBToolContext

Utility class to model tool database.
"""

import json
import os
import weakref

from swbutils.common.swbutils_common import TclObject
from swbutils.model.DataSource import DataSource

class DBToolContext(DataSource):
    
    # initialize object with environment settings    
    def __init__(self, project, source_db=''):        
        """
        Constructor of DBToolContext object.
        """
        
        # DB tool dictionary
        self._tooldatabase = dict()
        self._project = project
        self._source_db = source_db
        
        # initialize source
        self.initialize_source()

        weakref.finalize(self, self.finalize)
        
    def finalize(self):
        
        # close source
        self.close_source()
        
        # remove dictionary instance
        if self._tooldatabase is not None:
            del(self._tooldatabase)
            self._tooldatabase = None
    
    def initialize_source(self, **kwargs):
        
        # Tcl interpreter
        self._tcl = TclObject.Instance()
    
        # retrieve all tool database information global/site/user
        # otherwise retrieve script specific tool database information
        if not self._source_db:
            self.query('Application_Init SWB "" $ISE_RELEASE')
            self.query('Application_LoadToolDB 0')
            self.query('Application_SetPref "WB_Project WB_Scheduler WB_binaries WB_Miscellaneous WB_table WB_NodeExplorer WB_Visualization WB_Utilities WB_AutoExit" "SWB"')    
            self.query('gproject::New %s "" 1' % self._project)
        elif os.path.exists(self._source_db):
            try:
                self.query('source %s' % self._source_db)
            except:
                pass    
        
        # conversion from tcl tool database arrays to JSON string
        _json = self.query('json_utils::array2json WB_tool')
        
        # import from JSON string to python dictionary
        self._tooldatabase = json.loads(_json)

    def close_source(self, **kwargs):
        
        # delete tcl source
        if self._tcl is not None:
            del(self._tcl)
            self._tcl = None
    
    def query(self, query_command):
        
        # implementation to evaluate script
        return self._tcl.Evaluate(query_command)
    
    def error(self, query_command):
        
        # implementation to retrieve error
        return super.error(query_command)

    def update(self, update_db=''):
        
        # update script specific tool database information
        self.query('source %s' % update_db)
        
        # conversion from tcl tool database arrays to JSON string
        _json = self.query('json_utils::array2json WB_tool')
        
        # update from JSON string to python dictionary
        self._tooldatabase.update(json.loads(_json))
    
    # retrieve generic entry of tool database
    def get(self, key):
        return self._tooldatabase[key]
    
    # retrieve generic entry of tool database
    def check(self, key):
        return key in self._tooldatabase.keys()
    
