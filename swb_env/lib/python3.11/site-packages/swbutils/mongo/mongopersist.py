import re
import traceback
import glob
import sqlite3
import json
import ast
import os

from swbutils.mongo.mongologger import MongoLogger

class GcommentsFileHandler:
    def __init__(self, path):
        self.gtreeFilename = f"{path}/gcomments.dat"
        try:
            gtreeFile = open(self.gtreeFilename,'r')
            self.lines = gtreeFile.readlines()    
            self.fileExists = True
        except:
            self.fileExists = False

    def extractCommentForTool(self,tool):
        comment = ""
        inComment = False
        if self.fileExists:
            for line in self.lines:
                if f"<{tool}>" in line:
                    inComment = True
                    continue
                if f"</{tool}>" in line:
                    inComment = False
                    break
                if inComment: 
                    if len(comment) > 0:
                        comment = comment + "\n"
                    comment = comment + line
        return comment

class GscensFileHandler:
    def __init__(self, path):
        self.gscensFilename = f"{path}/gscens.dat"
        try:
            gscensFile = open(self.gscensFilename,'r')
            self.lines = gscensFile.readlines()
            self.fileExists = True
        except:
            self.fileExists = False

    def extractScenarios(self,scenarios):
        if self.fileExists:
            for line in self.lines:
                if "scenarios properties" not in line:
                    lineItems = line.split()
                    currentScenario = {}
                    if len(lineItems) <= 3:
                        continue
                    currentScenario["name"] = lineItems[1]
                    currentScenario["type"] = lineItems[2]
                    currentScenario["exprType"] = lineItems[3]
                    currentScenario["exprOrFilter"] = line.split("\"")[1]
                    scenarios[lineItems[1]] = currentScenario
        return scenarios.values()

class GvarsFileHandler:
    def __init__(self, path):
        self.gvarsFilename = f"{path}/gvars.dat"
        try:
            gvarsFile = open(self.gvarsFilename,'r')
            self.lines = gvarsFile.readlines()
            self.fileExists = True
        except:
            self.fileExists = False    

    def extractNodeVars(self):
        nodeVars = []
        if self.fileExists:
            for line in self.lines:
                lineItems = line.split()
                if len(lineItems) == 4:
                    currentNodeVar = {}
                    mytype = lineItems[0]
                    currentNodeVar["hidden"] = "false"
                    if mytype == "define":
                        currentNodeVar["type"] = "defined"
                    elif mytype == "\"\"":
                        currentNodeVar["type"] = "set"
                    elif mytype == "hidden" or mytype == "\"hidden\"":
                        currentNodeVar["type"] = "set"
                        currentNodeVar["hidden"] = "true"
                    else:
                        currentNodeVar["type"] = "extracted"
                        currentNodeVar["timestamp"] = mytype
                    currentNodeVar["node"] = lineItems[1]
                    currentNodeVar["name"] = lineItems[2]
                    currentNodeVar["value"] = lineItems[3]
                    nodeVars.append(currentNodeVar)
        return nodeVars

        
class GexecFileHandler:
    def __init__(self, path):
        self.gexecFilename = f"{path}/gexec.cmd"
        try:
            gexecFile = open(self.gexecFilename,'r')
            self.lines = gexecFile.readlines()
            self.fileExists = True
        except:
            self.fileExists = False    

    def __getArguementsFromLine(self, line):
        possibleArgs = ["-d", "-binary", "-cmd", "-cmdargs", "-post", "-pre", "-w", "-o", "-dbtool", "-linenumber"]
        arguements = {}
        lineItems = line.split()
        itemNo = 2
        while itemNo < len(lineItems):
            arg = ""
            if lineItems[itemNo] in possibleArgs:
                argName = lineItems[itemNo]
                itemNo += 1
                while itemNo < len(lineItems) and lineItems[itemNo] not in possibleArgs:
                    arg = arg + lineItems[itemNo] + " "                 
                    itemNo += 1
                arguements[argName] = arg.strip()
            else:
                itemNo += 1
        return arguements

    def extractExecNodes(self):
        execNodes = []
        currentExecNode = {}
        if self.fileExists:
            for line in self.lines:
                currentExecNode = {}
                lineItems = line.split()
                if line.startswith("name "): 
                    currentExecNode["name"] = lineItems[1]
                elif line.startswith("job "):
                    currentExecNode["job"] = lineItems[1]
                    lineArgs = line[0:line.rfind('"', 0, len(line)-2)]
                    arguements = self.__getArguementsFromLine(lineArgs)
                    for arg in arguements:
                        currentExecNode[arg] = arguements[arg]
                    if "-cmd" not in currentExecNode:
                        currentExecNode["-cmd"] = line[line.rfind('"', 0, len(line)-2):].strip()
                elif line.startswith("check "):
                    currentExecNode["check"] = lineItems[1]
                    currentExecNode["timestamp"] = lineItems[2]
                elif line.startswith("file "):
                    currentExecNode["file"] = lineItems[1]
                    currentExecNode["dependency"] = lineItems[2]
                    currentExecNode["incfile"] = lineItems[3]
                    
                if currentExecNode:
                    execNodes.append(currentExecNode)
                              
        return execNodes
            
class GtreeFileHandler:
    def __init__(self, path):
        self.path = path
        self.gtreeFilename = f"{path}/gtree.dat"
        self.extractStepsDone = False
        try:
            gtreeFile = open(self.gtreeFilename,'r')
            self.lines = gtreeFile.readlines()    
            self.fileExists = True
        except:
            self.fileExists = False    
 
    def extractToolsAndParameters(self):
        viewData = ViewData(self.path)
        toolLines = False
        tools = []
        parameters = []
        toolsAndParameters = {}
        toolNames = []
        currentTool = {}
        currentParams = []
        stepNumber = 0
        acceptableTypes = ["V", "R", "U", "V+", "R+"]
        if self.fileExists:
            for line in self.lines:
                if "simulation flow" in line:
                    toolLines = True
                    continue
                if "variables" in line:
                    toolLines = False
                    break
                if toolLines:
                    lineItems = line.split()
                    if len(lineItems) <= 1:
                        continue
                    tool = lineItems[0]
                    if tool in toolNames:
                        # already seen the first row of this tool
                        currentTool["steps"].append(stepNumber)
                        self.maxStep = stepNumber
                        stepNumber += 1 
                        paramValuesDict = {}
                        paramValuesDict["name"] = lineItems[1]
                        paramValuesDict["default"] = lineItems[2][1:-1]
                        paramValuesDict["values"] = line.split('{')[1].split('}')[0].split()
                        currentParams.append(paramValuesDict)
                        currentTool["parameters"] = currentParams
                        parameter = {}
                        parameter["name"] = lineItems[1]
                        parameter["value"] = lineItems[2][1:-1]
                        parameter["viewData"] = viewData.getParamViewData(lineItems[1])
                        parameters.append(parameter)
                        # detect if parameter has a process name
                        if len(line.split('[')) > 1:
                            paramValuesDict["processName"] = line.split('[')[1].split(']')[0]
                            stepType = line.split(']')[-1].strip()
                        else:
                            stepType = line.split('}')[-1].strip()
                        if ( stepType in  acceptableTypes):
                            currentTool["stepsTypes"].append(stepType)
                        else:
                            currentTool["stepsTypes"].append("U")
                    else:
                        # first row of tool
                        if bool(currentTool):
                            tools.append(currentTool)
                        toolNames.append(tool)    
                        currentTool = {}
                        currentTool["steps"] = []
                        currentTool["steps"].append(stepNumber)
                        currentTool["stepsTypes"] = []
                        currentTool["stepsTypes"].append("R")
                        self.maxStep = stepNumber
                        stepNumber += 1
                        currentParams = []
                        currentTool["tool"] = tool
                        currentTool["toolType"] = lineItems[1]
                        currentTool["cmdLine"] = re.findall("\"(.*?)\"",line)[0]
                        currentTool["viewData"] = viewData.getToolViewData(tool)
                self.extractStepsDone = True
            if bool(currentTool):
                tools.append(currentTool)
            self.tools = tools
        toolsAndParameters["tools"] = tools
        toolsAndParameters["params"] = parameters
        return toolsAndParameters

    def getToolForStep(self,step):
        for tool in self.tools:
            if int(step) in tool["steps"]:
                return tool["toolType"]
                 
    def extractVariables(self):
        varLines = False
        myvars = []
        currentVar = {}
        if self.fileExists:
            for line in self.lines:
                if "variables" in line:
                    varLines = True
                    continue
                if "scenarios and parameter specs" in line:
                    varLines = False
                    break
                if varLines:                    
                    currentVar = {}
                    lineItems = line.split()
                    if len(lineItems) <= 2:
                        continue               
                    currentVar["name"] = lineItems[1]
                    currentVar["value"] = lineItems[2][1:-1]
                    myvars.append(currentVar)
        return myvars
        
    def extractScenariosExperimentsAndNodes(self):
        scenarioLines = False
        nodeLines = False
        scenarios = {}
        nodes = {}
        experiments = []
        currentScenario = {}
        experimentNo = 0
        if self.fileExists:
            viewData = ViewData(self.path)
            if not self.extractStepsDone:
                self.extractSteps()
            for line in self.lines:
                if "scenarios and parameter specs" in line:
                    scenarioLines = True
                    continue
                if "simulation tree" in line:
                    scenarioLines = False
                    break
                if scenarioLines:
                    currentScenario = {}
                    lineItems = line.split()
                    if len(lineItems) <= 1:
                        continue
                    currentScenario["name"] = lineItems[1]
                    currentScenario["experiments"] = []
                    scenarios[currentScenario["name"]] = currentScenario
            for line in self.lines:
                if "simulation tree" in line:
                    nodeLines = True
                    continue
                if nodeLines:
                    currentNode = {}
                    lineItems = line.split()
                    if len(lineItems) <= 2:
                        continue
                    currentNode["step"] = lineItems[0]
                    currentNode["node"] = lineItems[1]
                    if int(currentNode["step"]) == self.maxStep:
                        experiment = {}
                        experiment["leafNode"] = currentNode["node"]
                        experiment["viewData"] = viewData.getExperimentViewData(experimentNo)
                        experiments.append(experiment)
                        experimentNo += 1
                    currentNode["parent"] = lineItems[2]
                    lineLists = re.findall(r"\{(.*?)\}",line)
                    currentNode["parameterValue"] = lineLists[0]
                    currentNode["scenarios"] = lineLists[1].split()
                    currentNode["prunedScenarios"] =  []
                    allScenarios = []
                    for scenario in currentNode["scenarios"]:
                        if scenario.startswith('*'):
                            scenario = scenario[1:]
                            currentNode["prunedScenarios"].append(scenario)
                        allScenarios.append(scenario)
                    currentNode["scenarios"] = allScenarios
                    lockedStr = line.split('}')[2]
                    if lockedStr.startswith(' 0'):
                        currentNode["locked"] = False
                    else:
                        currentNode["locked"] = True                    
                    if len(lineLists) == 3:
                        currentNode["foldedScenarios"] = lineLists[2].split()
                    nodes[currentNode["node"]] = currentNode
                    if currentNode["step"] == str(self.maxStep):
                        for scenario in currentNode["scenarios"]:
                            if scenario not in scenarios.keys():
                                scenarioDict = {}
                                scenarioDict["name"] = scenario
                                scenarioDict["experiments"] = []
                                scenarios[scenario] = scenarioDict
                            scenarios[scenario]["experiments"].append(currentNode["node"])
        scenariosAndNodes = {}
        scenariosAndNodes["scenarios"] = scenarios
        scenariosAndNodes["experiments"] = experiments
        scenariosAndNodes["nodes"] = nodes
        return scenariosAndNodes
        
class ViewData:
    def __init__(self, path):
        self.db_read = False
        try:
            conn = sqlite3.connect(f"{path}/.database")
            cursor = conn.cursor()
            self.mainView = []
            for row in cursor.execute('SELECT * FROM MainView'):
                self.mainView.append(row)
            self.viewElements = []
            for row in cursor.execute('SELECT * FROM ViewElements'):
                self.viewElements.append(row)
            self.viewDimensions = []
            for row in cursor.execute('SELECT * FROM ViewDimensions'):
                self.viewDimensions.append(row)
            self.hiddenElements = []
            for row in cursor.execute('SELECT * FROM HiddenElements'):
                self.hiddenElements.append(row)
            self.db_read = True
        except:
            # SQLite DB is empty or does not exist do nothing 
            pass

    def getToolViewData(self, tool):
        toolViewData = {}
        toolViewData["dimensions"] = []
        toolViewData["hidden"] = []
        if self.db_read:
            criteria = f"First*Step*{tool}"
            for hiddenElement in self.hiddenElements:
                hiddenStatus = {}
                if tool in hiddenElement and "Tool_View" in hiddenElement:
                    if hiddenElement[2] == 0:
                        hiddenStatus["wholeTool"] = 'Full'
                    else:
                        hiddenStatus["wholeTool"] = 'Compact'
                if criteria in hiddenElement:
                    if hiddenElement[2] == 0:
                        hiddenStatus["defaultStep"] = 'Full'
                    else:
                        hiddenStatus["defaultStep"] = 'Compact'
                if bool(hiddenStatus):
                    toolViewData["hidden"].append(hiddenStatus)    
            for viewDimension in self.viewDimensions:
                if criteria in viewDimension:
                    dimensions = {}
                    if viewDimension[1] == 0:
                        dimensions["Orientation"] = "Vertical"
                    else:
                        dimensions["Orientation"] = "Horizontal"
                    if viewDimension[2] == 0:
                        dimensions["ViewMode"] = "Full"
                    else:    
                        dimensions["ViewMode"] = "Compact"
                    dimensions["size"] = viewDimension[3]
                    toolViewData["dimensions"].append(dimensions)
        return toolViewData     

    def getParamViewData(self, param):
        paramViewData = {}
        paramViewData["dimensions"] = []
        paramViewData["hidden"] = []
        if self.db_read:
            for hiddenElement in self.hiddenElements:
                hiddenStatus = {}
                if param in hiddenElement and "Param_view" in hiddenElement:
                    if hiddenElement[2] == 0:
                        hiddenStatus["paramView"] = 'Full'
                    else:
                        hiddenStatus["paramView"] = 'Compact'
                if bool(hiddenStatus):
                    paramViewData["hidden"].append(hiddenStatus)    
            for viewDimension in self.viewDimensions:
                if param in viewDimension:
                    dimensions = {}
                    if viewDimension[1] == 0:
                        dimensions["Orientation"] = "Vertical"
                    else:
                        dimensions["Orientation"] = "Horizontal"
                    if viewDimension[2] == 0:
                        dimensions["ViewMode"] = "Full"
                    else:    
                        dimensions["ViewMode"] = "Compact"
                    dimensions["size"] = viewDimension[3]
                    paramViewData["dimensions"].append(dimensions)
        return paramViewData

    def getExperimentViewData(self, experimentNumber):
        experimentViewData = []
        if self.db_read:
            for viewDimension in self.viewDimensions:
                dimensionData = {}
                if "ExperSizes" in viewDimension:
                    experimentSizes = viewDimension[3].split(" ")

                    if len(experimentSizes) > experimentNumber:
                        dimensionData["size"] = experimentSizes[experimentNumber] 
                        if viewDimension[1] == 0:
                            dimensionData["Orientation"] = "Vertical"
                        else:
                            dimensionData["Orientation"] = "Horizontal"
                        if viewDimension[2] == 0:
                            dimensionData["ViewMode"] = "Full"
                        else:    
                            dimensionData["ViewMode"] = "Compact"
                        experimentViewData.append(dimensionData)
        return experimentViewData

    def getProjectViewData(self):
        projectViewData = {}
        projectViewData["mainView"] = self.mainView
        projectViewData["viewElements"] = []
        projectViewData["viewDimensions"] = []
        if self.db_read:
            dimensionsToFilter = ['ParameterColumnWidth','ToolColumnDimension','Tool_Comments_Size','Tool_Names_Size']
            for element in self.viewElements:
                translatedElement = {}
                translatedElement["name"] = element[0]
                if element[1] == 0:
                    translatedElement["ViewMode"] = "Full"
                else:
                    translatedElement["ViewMode"] = "Compact"
                if element[2] == 0:
                    translatedElement["Displayed"] = "Not Shown"
                else:
                    translatedElement["Displayed"] = "Displayed"
                projectViewData["viewElements"].append(translatedElement)
            for dimension in self.viewDimensions:
                if dimension[0] in dimensionsToFilter:
                    translatedDimension = {}
                    translatedDimension["name"] = dimension[0]
                    if dimension[1] == 0:
                        translatedDimension["Orientation"] = "Vertical"
                    else:
                        translatedDimension["Orientation"] = "Horizontal"
                    if dimension[2] == 0:
                        translatedDimension["ViewMode"] = "Full"
                    else:  
                        translatedDimension["ViewMode"] = "Compact"
                    projectViewData["viewDimensions"].append(translatedDimension)
        return projectViewData
    

def ReadProjectStatusDataFromFile(projectPath):
    filename = projectPath + "/.status"
    status = {}
    try:
        file = open(filename, "r")
        content = file.read()
        attributes = content.split("|")
    
        status["timestamp"] = attributes[0]
        status["host"] = attributes[1]
        status["user"] = attributes[2]
        status["status"] = attributes[3]
        status["pid"] = attributes[4]
    except:
        pass
    return status
  
def ReadProjectFile(projectPath):
    try:
        filename = projectPath + "/.project"
        file = open(filename, "r")
        content = file.read()
        if len(content) == 0 or content == "1":
            RunTimeEditingMode = "Editable"
        else:
            RunTimeEditingMode = "Locked"
    except:
        RunTimeEditingMode = "Editable"
    return RunTimeEditingMode
    
def ReadNodeStatusDataFromFile(node, projectPath):
    nodeStatus = {}
    path = projectPath + "/results/nodes/" + str(node)
    if ( not os.path.exists(path) ):
        path = projectPath 
    try:        
        filename_path = path + "/n" + str(node) + "_*.sta"
        dirList = glob.glob(filename_path)
        filename = dirList[0]
        tool_ext = filename.split('/')[-1].split('_')[1][0:3]
        file = open(glob.glob(filename_path)[0], "r")
        contentLines = file.readlines()
        attributes = []
        for line in contentLines:
            attributes.extend( line[:-1].split("|") )
        nodeStatus["_id"] = node
        nodeStatus["node"] = node
        nodeStatus["timestamp"] = attributes[1]
        nodeStatus["status"] = attributes[2]
        nodeStatus["host"] = attributes[3]
        nodeStatus["exectime"] = attributes[4]
        nodeStatus["pid"] = attributes[5]
        nodeStatus["toolExt"] = tool_ext
        return nodeStatus
    except Exception as e:
        return {}

class MongoPersist():
    
    lg = None
    def __init__(self):
        self.lg = MongoLogger()
        self.DB_NAME = "SynopsysSWB"
    
    def Import(self, project, db):
        try:            
            projectPath = project
            gtreeFileh = GtreeFileHandler(projectPath)
            toolsAndParams = gtreeFileh.extractToolsAndParameters()
            tools = toolsAndParams["tools"]
            params = toolsAndParams["params"]
            myvars = gtreeFileh.extractVariables()
            scenariosExperimentsAndNodes = gtreeFileh.extractScenariosExperimentsAndNodes()
            gscensFile = GscensFileHandler(projectPath)
            scenarios = gscensFile.extractScenarios(scenariosExperimentsAndNodes["scenarios"])
            gvarsFile = GvarsFileHandler(projectPath)
            nodeVars = gvarsFile.extractNodeVars()
            gexecFile = GexecFileHandler(projectPath)
            execNodes = gexecFile.extractExecNodes()
            gcommentFileh = GcommentsFileHandler(projectPath)
            for tool in tools:
                comment = gcommentFileh.extractCommentForTool(tool["tool"])
                tool["comment"] = comment
            nodeStatuses = []
            nodes = scenariosExperimentsAndNodes["nodes"].values()
            for node in nodes:
                tool = gtreeFileh.getToolForStep(node["step"])
                nodeStatusDict = ReadNodeStatusDataFromFile(node["node"], projectPath)
                if bool(nodeStatusDict):
                    nodeStatuses.append( nodeStatusDict )
            projectData = ReadProjectStatusDataFromFile(projectPath)
            projectData["runTimeEditingMode"] = ReadProjectFile(projectPath)
            viewData = ViewData(projectPath)
            projectData["viewData"] = viewData.getProjectViewData()
                       
                     
            #create collections
            self.CreateCollections(db)
            if bool(tools):
                db.Create(self.DB_NAME, "Tool", tools, True)
            if bool(params):
                db.Create(self.DB_NAME, "Parameter", params, True)
            if bool(myvars):
                db.Create(self.DB_NAME, "Variable", myvars, True)
            if bool(nodeVars):
                db.Create(self.DB_NAME, "NodeVar", nodeVars, True)
            if bool(execNodes):
                db.Create(self.DB_NAME, "ExecNode", execNodes, True)
            if bool(scenarios):
                db.Create(self.DB_NAME, "Scenario", scenarios, True)
            nodes = scenariosExperimentsAndNodes["nodes"].values()
            if bool(nodes):
                db.Create(self.DB_NAME, "Node", nodes, True)   
            experiments = scenariosExperimentsAndNodes["experiments"] 
            if bool(experiments):
                db.Create(self.DB_NAME, "Experiment", experiments, True)
            if bool(nodeStatuses):
                db.Create(self.DB_NAME, "NodeRuntime", nodeStatuses, True)
            if bool(projectData):
                db.Create(self.DB_NAME, "Project", projectData, False)
            
            return True                            
        except Exception as ex:
            self.lg.Print("Exception in Migration ", str(ex))
            traceback.print_exc()    
        return False
    
    def CreateCollections(self, db):
        db.Create(self.DB_NAME, "Tool")
        db.Create(self.DB_NAME, "Node")
        db.Create(self.DB_NAME, "NodeRuntime")
        db.Create(self.DB_NAME, "Experiment")
        db.Create(self.DB_NAME, "Parameter")
        db.Create(self.DB_NAME, "Parameters")
        db.Create(self.DB_NAME, "Variable")
        db.Create(self.DB_NAME, "NodeVar")
        db.Create(self.DB_NAME, "Scenario")
        db.Create(self.DB_NAME, "ExecNode")
        db.Create(self.DB_NAME, "Project")

        db.CreateIndex(self.DB_NAME, "NodeVar", [("node",1)] )
        db.CreateIndex(self.DB_NAME, "Node", [("node",1)] )
        db.CreateIndex(self.DB_NAME, "NodeVar", [("name", 1),("node", 1),("type", 1)] )
        db.CreateIndex(self.DB_NAME, "NodeRuntime", [("node",1)])
        db.CreateIndex(self.DB_NAME, "ExecNode", [("job",1)])
