# ==================================================================
# SYNOPSYS CONFIDENTIAL - This is an unpublished, proprietary work  
# of Synopsys, Inc., and is fully protected under copyright and     
# trade secret laws. You may not view, use, disclose, copy, or      
# distribute this file or any information contained herein except   
# pursuant to a valid written license from Synopsys.                
# ==================================================================
from swbutils.model.Singleton import singleton
from swbutils.mongo.mongologger import MongoLogger
import json

@singleton
class PropertyBag():
    pass

    lg = None

    def __init__(self):
        self.lg = MongoLogger()
        self.lg.Print('Initiating singleton PropertyBag')
        self.data = None
        self.dd = {}  
            
    def Set(self, data):
        self.data = data
        
    def SetToDict(self, data):
        self.Set(data)
        self.dd = {}
        try:
            ss = self.data.split();
            i = 0;
            while( i < len(ss)):
                name = ss[i]
                val = ss[i + 1]
                i = i + 2
                self.dd[name.strip()] = val.strip()
                
        except Exception as ex:
            self.lg.Print("Could not create dict: ", ex)
    
    def Clear(self):
        self.data = None
        self.dd.clear()

    # return original string
    def Get(self):
        return self.data
        
    # return data as a dictionary
    def Dict(self):
        return self.dd;
            
    # or a key value from dictionary or None
    def KeyValue(self, key):
        try:
            if not self.dd is None:
                val = self.dd[key]
                return val
            else:
                return None
        except Exception as ex:
            self.lg.Print("propertybag.py -> Exception: Did not find value for key: ", ex)         
        return None
    
    # set a key value in the dictionary    
    def SetKey(self, key, val):
        self.dd[key] = val

    # return internal data as JSON
    def JSON(self):
        try:
            if not self.dd is None:
                val = json.dumps(self.dd)
                return val
            else:
                return None
        except Exception as ex:
            self.lg.Print("propertybag.py -> Exception: Could not convert to JSON: ", ex)         
        return None
    
        # return data as JSON
    def ToJSON(self, pydata):
        try:
            val = json.dumps(pydata)
            return val
        except Exception as ex:
            self.lg.Print("propertybag.py -> Exception: Could not convert to JSON: ", ex)         
        return None   

    def TestBool(self, data):
        try:
            if data == '1':
                return True
            else:
                return False
        except Exception as ex:
            self.lg.Print("propertybag.py -> Exception: ", ex)         
        return None 
    
    def TestInt(self):      
        return 12345      
    
    def TestString(self):
        return 'Hello, this is a test string.'

    def TestComplexDict(self):
        test = {
            'A': 1,
            'B': 2,
            'C': 3,
            'Nest':{
                'x': 10,
                'y': 20,
                'z': 30,
                }        
        }
        return dict(test)
        
            




