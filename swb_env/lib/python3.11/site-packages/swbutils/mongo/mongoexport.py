import os
import datetime
from swbutils.mongo.mongomon import MongoMon
from sys import path
from pathlib import Path

class ExportGTree:
    def __init__(self, source_path, dest_path):
        self.source_path = source_path
        self.dest_path = dest_path
        self.gtree_data = MongoMon().GetSwbOperations(self.source_path).CollectMetaData("graph")
        self.file = open(f"{self.dest_path}/gtree.dat", "w")

    def _export_preamble(self):
        now = datetime.datetime.now()
        year = now.year
        self.file.write(f"# Copyright (C) 1994-{year} Synopsys Inc.\n")
        version = os.environ['STRELEASE']
        self.file.write(f"# swbtree {version}\n\n")
        
    def _export_simluation_flow(self):
        self.file.write("# --- simulation flow\n")
        for tool in self.gtree_data["Tools"]:
            self.file.write(f"{tool['tool']} {tool['toolType']} \"\" {{}}\n")
            if "parameters" in tool:
                parameters = tool["parameters"]
                # start index is 1 as the index 0 is the tool step - in gtree.dat we do not record the tool step type 
                index = 1
                for param in parameters:
                    if index < len(tool["stepsTypes"]):
                        type = tool["stepsTypes"][index]
                    else:
                        type = ""
                    processName = ""
                    if "processName" in param:
                        processName = param["processName"]
                    if len(processName) > 0:
                        processName = "[" + processName + "]"
                    if "default" in param:
                        self.file.write(f"{tool['tool']} {param['name']} \"{param['default']}\" {{{' '.join(param['values'])}}} {processName} {type}\n")
                    else:
                        self.file.write(f"{tool['tool']} {param['name']} \"\" {{{' '.join(param['values'])}}} {processName} {type}\n")  
                    index += 1
        
    def _export_variables(self):
        self.file.write("# --- variables\n")
        for projectVariable in self.gtree_data["Variables"]:
            if "value" in projectVariable:
                self.file.write(f"variable {projectVariable['name']} \"{projectVariable['value']}\"\n")
            else:
                self.file.write(f"variable {projectVariable['name']} \"\"\n")
        
    def _export_scarios_and_parameter_specs(self):
        self.file.write("# --- scenarios and parameter specs\n")
        for scenario in self.gtree_data["Scenarios"]:
            for param in self.gtree_data["Parameters"]:
                self.file.write(f"scenario {scenario['name']} {param['name']} \"\"\n")
        
    def _scenario_in_pruned_scenarios(self, scenario, pruned_scenarios):
        for pruned_scenario in pruned_scenarios:
            if scenario == pruned_scenario:
                return True
            else:
                return False

    def _export_simulation_tree(self):
        self.file.write("# --- simulation tree\n")    
        for node in self.gtree_data["Nodes"]:
            scenarioNames = " ".join(node['scenarios'])
            scenarioNames = f"{{{scenarioNames}}}"
            foldedScenarios = ""
            if "foldedScenarios" in node:
                foldedScenarios = " ".join(node['foldedScenarios'])
                if len(foldedScenarios) > 0:
                    foldedScenarios = f"{{{foldedScenarios}}}"
            if node['locked']:
                locked = 1
            else:
                locked = 0
            if "parameterValue" in node:
                self.file.write(f"{node['step']} {node['node']} {node['parent']} {{{node['parameterValue']}}} {scenarioNames} {locked} {foldedScenarios}\n")
            else:
                self.file.write(f"{node['step']} {node['node']} {node['parent']} {{}} {scenarioNames} {locked} {foldedScenarios}\n")                
    def _postamble(self):  
        self.file.close()   
        
    def export_file(self):
        self._export_preamble()
        self._export_simluation_flow()
        self._export_variables()
        self._export_scarios_and_parameter_specs()
        self._export_simulation_tree()
        self._postamble()
        
        
class ExportGScens:
    def __init__(self, source_path, dest_path):
        self.source_path = source_path
        self.dest_path = dest_path
        self.gscens_data = MongoMon().GetSwbOperations(self.source_path).CollectMetaData("graph")
        self.file = open(f"{self.dest_path}/gscens.dat", "w")        
        
    def export_file(self):
        self.file.write("# --- scenarios properties\n")
        for scenario in self.gscens_data["Scenarios"]:
            if "exprOrFilter" in scenario:
                self.file.write(f"scenario {scenario['name']} {scenario['type']} {scenario['exprType']} \"{scenario['exprOrFilter']}\"\n")
            else:    
                self.file.write(f"scenario {scenario['name']} static expression \"\"\n")    
        self.file.close()
        
        
class ExportGVars:
    def __init__(self, source_path, dest_path):
        self.source_path = source_path
        self.dest_path = dest_path
        self.gvars_data = MongoMon().GetSwbOperations(self.source_path).CollectMetaData("gvars")
        self.file = open(f"{self.dest_path}/gvars.dat", "w")        
        
    def export_file(self):
        for nodeVar in self.gvars_data:
            if nodeVar["type"] == "define":
                self.file.write("define ")
            elif nodeVar["type"] == "extracted":
                self.file.write(f"{nodeVar['timestamp']} ")
            else:
                self.file.write("\"\" " )
            self.file.write(f"{nodeVar['node']} {nodeVar['name']} {nodeVar['value']}\n")    
        self.file.close()
        
        
class ExportOrganization:
    def __init__(self, source_path, dest_path):
        self.source_path = source_path
        self.dest_path = dest_path
        self.project_data = MongoMon().GetSwbOperations(self.source_path).CollectMetaData("project")
        self.file = open(f"{self.dest_path}/.organization", "w")        
                
    def export_file(self):
        self.file.write("hierarchical 0")


class ExportProject:
    def __init__(self, source_path, dest_path):
        self.source_path = source_path
        self.dest_path = dest_path
        self.project_data = MongoMon().GetSwbOperations(self.source_path).CollectMetaData("project")
        self.file = open(f"{self.dest_path}/.project", "w")        
        
    def export_file(self):
        if 'runTimeEditingMode' in self.project_data and self.project_data["runTimeEditingMode"] == "Locked":
            # only lock the project is explictly locked
            self.file.write("0")
        else:
            self.file.write("1")
        self.file.close()
        
        
class ExportStatus:
    def __init__(self, source_path, dest_path):
        self.source_path = source_path
        self.dest_path = dest_path
        self.project_data = MongoMon().GetSwbOperations(self.source_path).CollectMetaData("project")
        self.file = open(f"{self.dest_path}/.status", "w")        
        
    def export_file(self):
        if "timestamp" in self.project_data:
            self.file.write(f"{self.project_data['timestamp']}|")
        else:
            self.file.write(" |")
        if "host" in self.project_data:
            self.file.write(f"{self.project_data['host']}|")
        else:
            self.file.write(" |")        
        if "user" in self.project_data:
            self.file.write(f"{self.project_data['user']}|")
        else:
            self.file.write(" |")
        if "status" in self.project_data:
            project_status = self.project_data['status']
            if project_status == "running":
                project_status = "none"
            self.file.write(f"{project_status}|")
        else:
            self.file.write(" |")
        if "arg" in self.project_data:
            self.file.write(f"{self.project_data['arg']}|")
        else:
            self.file.write("|")
        self.file.close()
        
                
class ExportGExec:
    def __init__(self, source_path, dest_path):        
        self.source_path = source_path
        self.dest_path = dest_path
        self.exec_data = MongoMon().GetSwbOperations(self.source_path).CollectMetaData("gexec")
        self.file = open(f"{self.dest_path}/gexec.cmd", "w") 
        
    def export_file(self):
        self.file.write("# project name\n")
        project_name = self.source_path.split(os.path.sep)[-1]
        self.file.write(f"name {project_name}\n")
        self.file.write("# execution graph\n")
        for exec_details in self.exec_data:
            if "job" in exec_details:
                self.file.write(f"job {exec_details['job']}")
            if "-d" in exec_details:    
                self.file.write(f" -d {exec_details['-d']}")
            if "-post" in exec_details:
                self.file.write(f" -post {exec_details['-post']}")
            if "-o" in exec_details:   
                self.file.write(f" -o {exec_details['-o']}")
            if "-cmd" in exec_details:    
                self.file.write(f" {exec_details['-cmd']}")
            if "job" in exec_details:    
                self.file.write("\n")
        for exec_details in self.exec_data:
            if "check" in exec_details:
                self.file.write(f"check {exec_details['check']} {exec_details['timestamp']}\n")
        self.file.close()
            
            
class ExportNodeStatus:
    def __init__(self, source_path, dest_path):
        self.source_path = source_path
        self.dest_path = dest_path
        self.project_data = MongoMon().GetSwbOperations(self.source_path).CollectMetaData("project")
        self.gtree_data = MongoMon().GetSwbOperations(self.source_path).CollectMetaData("graph")                
             
    def export_files(self): 
        for node in self.gtree_data["Nodes"]:
            node_runtime = MongoMon().GetSwbOperations(self.source_path).CollectNodeStatusMetaData(node["node"])
            # should not encounter any nodes in an active state, but have included in the list just in case.
            if bool(node_runtime) and node_runtime['status'] not in ['virtual', 'running', 'ready', 'pending', 'queued'] :
                
                filename = "n" + node_runtime['node'] + "_" + node_runtime['toolExt'] + ".sta"
                node_path = self.dest_path + "/results/nodes/" + node_runtime['node']
                Path(node_path).mkdir(parents=True, exist_ok=True)
                self.file = open(f"{node_path}/{filename}", "w")
                self.file.write(f"     |{node_runtime['timestamp']}|{node_runtime['status']}|{node_runtime['host']}|{node_runtime['exectime']}\n")
                if isinstance(node_runtime['pid'], dict):
                    host = list(node_runtime['pid'].keys())[0]
                    pid = node_runtime['pid'][host]
                    self.file.write(f"{host}{pid}")
                else:
                    self.file.write(f"{node_runtime['pid']}")
                self.file.close()
                
                
class ExportGComments:
    def __init__(self, source_path, dest_path):
        self.source_path = source_path
        self.dest_path = dest_path
        self.gtree_data = MongoMon().GetSwbOperations(self.source_path).CollectMetaData("graph")                
        self.file = open(f"{self.dest_path}/gcomments.dat", "w") 

    def export_file(self):
        for tool in self.gtree_data["Tools"]:
            if "comment" in tool and len(tool["comment"]) > 0:
                self.file.write(f"<toolname>\n")
                self.file.write(f"{tool['tool']}\n")
                self.file.write(f"<toolname>\n")
                self.file.write(f"<comment>\n")
                self.file.write(f"{tool['comment']}\n")
                self.file.write(f"<comment>\n\n")
        self.file.close()
                
                                            
class MongoExport:
    def export_to_files(self, source_path, dest_path):
        if not os.path.isdir(dest_path):
            os.mkdir(dest_path)
        
        ExportGTree(source_path, dest_path).export_file()
        ExportGComments(source_path, dest_path).export_file()
        ExportGScens(source_path, dest_path).export_file()
        ExportGVars(source_path, dest_path).export_file()
        ExportOrganization(source_path, dest_path).export_file()
        ExportProject(source_path, dest_path).export_file()
        ExportStatus(source_path, dest_path).export_file()
        ExportGExec(source_path, dest_path).export_file()
        ExportNodeStatus(source_path, dest_path).export_files()           
        return True    
            