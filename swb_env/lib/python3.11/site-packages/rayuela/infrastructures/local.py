"""Provide an :class:`Infrastructure` to run tasks on local host."""


from inspect import (
    Parameter as _Parameter,
    signature as _signature,
)

from typing import (
    Mapping as _Mapping,
    Optional as _Optional,
    Union as _Union,
)

from warnings import (
    catch_warnings as _catch_warnings,
    simplefilter as _simplefilter,
)


from distributed import LocalCluster as _LocalCluster  # type: ignore
from distributed import Worker as _Worker  # type: ignore


from .infrastructure import Infrastructure as _Infrastructure

from .utils import (
    parameter as _parameter,
    process_start_dashboard as _process_start_dashboard,
    set_directory as _set_directory,
    start_dashboard_param as _start_dashboard_param,
    to_hashable as _to_hashable,
    with_parameters as _with_parameters,
)


# fmt: off

_identity_parameters = [
    _parameter(_LocalCluster, "processes", bool, default=False, kind=_Parameter.KEYWORD_ONLY),  # noqa
]

_incidental_parameters = [
    _parameter(_LocalCluster, "dashboard_address", _Optional[str], default=None, kind=_Parameter.KEYWORD_ONLY),  # noqa
    _parameter(_LocalCluster, "silence_logs", _Union[str, int], default="CRITICAL", kind=_Parameter.KEYWORD_ONLY),  # noqa
    _parameter(_Worker, "local_directory", kind=_Parameter.KEYWORD_ONLY),  # noqa
    _Parameter("scheduler_options", _Parameter.KEYWORD_ONLY, default=None, annotation=_Optional[_Mapping]),  # noqa
    _start_dashboard_param,
]

# fmt: on


class LocalInfrastructure(_Infrastructure):
    """:class:`Infrastructure` that can run tasks on the local host."""

    @staticmethod
    def _transform_scheduler_options(args):
        args["scheduler_kwargs"] = args["scheduler_options"]
        del args["scheduler_options"]

    @staticmethod
    def _transform_start_dashboard(args):
        args["dashboard_address"] = args["scheduler_kwargs"]["dashboard_address"]
        del args["scheduler_kwargs"]["dashboard_address"]

    @_with_parameters(
        _Parameter("self", _Parameter.POSITIONAL_ONLY),
        *_identity_parameters,
        *_incidental_parameters,
    )
    def __init__(self, **kwargs):
        """Configure a :class:`distributed.LocalCluster`."""
        self._bound_args = _signature(self.__init__).bind(**kwargs)
        bound_args = _signature(self.__init__).bind(**kwargs)
        bound_args.apply_defaults()

        _process_start_dashboard(bound_args.arguments)
        _set_directory("local_directory", self, bound_args.arguments)
        self._transform_scheduler_options(bound_args.arguments)
        self._transform_start_dashboard(bound_args.arguments)

        with _catch_warnings():
            _simplefilter("ignore")

            self._cluster = _LocalCluster(*bound_args.args, **bound_args.kwargs)

        super().__init__()

    @classmethod
    @_with_parameters(
        _Parameter("cls", _Parameter.POSITIONAL_ONLY),
        *_identity_parameters,
        _Parameter("kwargs", _Parameter.VAR_KEYWORD),
    )
    def compute_fingerprint(cls, processes=False, **kwargs):
        """Return the hash of this class and the processes parameter.

        .. todo::
            *   Unify duplicated code with :class:`SGEInfrastructure`.
        """
        signature = _signature(cls.compute_fingerprint)

        bound_args = signature.bind(**kwargs)
        bound_args.apply_defaults()
        del bound_args.arguments["kwargs"]

        def hashable(name):
            return _to_hashable(
                signature.parameters[name].annotation, bound_args.arguments[name]
            )

        arg_tuple = (cls, *map(hashable, bound_args.arguments))
        return hash(arg_tuple)

    def __hash__(self):
        """Return the fingerprint of this instance."""
        return self.compute_fingerprint(
            *self._bound_args.args, **self._bound_args.kwargs
        )

    def get_cluster(self):
        """Return an instance of :class:`distributed.LocalCluster`."""
        return self._cluster


# ****************************************
# AppDigest signature for component RAYUELA. Do not delete!
# ****************************************
# @(&)Synopsys_Unique_Signature Libname="local.py" Name="RAYUELA" Version="4.0.0" Type="REUSE" Injector="V-2023.09-DEV (8729328)"(&)@
