from gc import collect


import pytest


from .. import (
    statuses_until_stop,
    submit_command,
)

from ..infrastructures.local import LocalInfrastructure
from ..infrastructures.lsf import LSFInfrastructure

from ..infrastructures.sge import (
    SGEInfrastructure,
    SnpsSGEInfrastructure,
)


@pytest.mark.parametrize(
    "Infra",
    [
        LocalInfrastructure,
        LSFInfrastructure,
        SGEInfrastructure,
        SnpsSGEInfrastructure,
    ],
)
class TestInfrastructureInvariants:
    """Test invariants over all infrastructure classes."""

    def test_get_unique_produces_unique_infras(self, Infra):
        """get_unique should always return same infras for same params."""
        assert Infra.get_unique() is Infra.get_unique()

    def test_infrastructures_with_same_parameters_are_equivalent(self, Infra):
        """Infras with same parameters should give equivalent infras."""
        assert Infra() == Infra()

    def test_infrastructures_with_same_parameters_are_not_the_same(self, Infra):
        """Infras with same parameters are not the same infra."""
        assert Infra() is not Infra()

    def test_cache_length_is_0_after_removing_infra(self, Infra):
        """The cache length is zero after removing all infras."""
        infra = Infra.get_unique()
        del infra
        collect()
        assert Infra._get_cache_length() == 0


def test_cancellation_does_not_affect_metadata():
    """Metadata should not change after cancelling a task."""
    task = submit_command("ls")

    for _ in statuses_until_stop(task):
        pass

    meta1 = task.metadata
    task.cancel()
    meta2 = task.metadata

    assert meta1 == meta2
