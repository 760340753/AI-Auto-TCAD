from pathlib import Path
from tempfile import TemporaryDirectory


import pytest  # type: ignore

# from distributed import Client  # type: ignore

from rayuela import (
    submit_command,
    submit,
)


pytestmark = pytest.mark.integration


@pytest.mark.parametrize(
    "infra_name,infra_args",
    [
        ("local", {}),
        # (
        #     "dummy",
        #     {
        #         "client": Client(
        #             dashboard_address=None, local_directory=TemporaryDirectory().name
        #         )
        #     },
        # ),
        ("sge", {"project": "bnormal"}),
        ("snps", {}),
    ],
)
class TestIntegrationOfSimpleInfrastructures:
    """Test the integration of simple infrastructure instances."""

    def test_infra_integration(self, infra_name, infra_args):
        """Smoke integration test for all infras."""
        task = submit(lambda: "success!", infra_name=infra_name, infra_args=infra_args)
        assert task.get_result() == "success!"

    def test_submit_command_can_write_output_to_a_file(self, infra_name, infra_args):
        """submit_command() can dump its output to files."""
        with TemporaryDirectory(dir=Path.cwd()) as tmp_dir:
            stdout = Path(tmp_dir) / "stdout.bin"
            stderr = Path(tmp_dir) / "stderr.bin"

            task = submit_command(
                'echo success; >&2 echo "error"',
                stdout=stdout,
                stderr=stderr,
                infra_name=infra_name,
                infra_args=infra_args,
                shell=True,
            )

            task.get_result()

            with stdout.open() as stdout_file, stderr.open() as stderr_file:
                assert (stdout_file.read(), stderr_file.read()) == (
                    "success\n",
                    "error\n",
                )


def test_submit_command_can_be_used_with_multiple_infrastructures():
    """submit_command() can be used with multiple infrastructures."""
    from rayuela import submit_command
    from distributed import Client  # type: ignore
    from tempfile import TemporaryDirectory

    client_args = {
        "dashboard_address": None,
        "local_directory": TemporaryDirectory().name,
    }

    with Client(**client_args) as client:
        task = submit_command(
            "echo success",
            infra_name="dummy",
            infra_args={"client": client},
        )

        assert task.get_result().stdout == b"success\n"
