"""Provide an implementation of ``distributed.Adaptive`` for TCAD use case."""


from distributed import Adaptive  # type: ignore


class TCADAdaptive(Adaptive):
    """:class:`~distributed.deploy.adaptive.Adaptive` class for TCAD."""

    async def scale_up(self, n):
        """Scale the cluster up to ``n`` workers, notify exceptions.

        .. todo::

            This avoids
            :meth:`distributed.deploy.adaptive_core.AdaptiveCore.adapt`
            catching all :class:`OSError` exceptions. Maybe
            :class:`distributed.deploy.adaptive_core.AdaptiveCore`
            needs to re-raise the exception after stoping itself. This
            would be an upstream change.
        """
        try:
            await self.cluster.scale(n)

        except Exception as exception:
            self.stop()

            msg = "An exception was raised when scaling the cluster."
            raise RuntimeError(msg) from exception


# ****************************************
# AppDigest signature for component RAYUELA. Do not delete!
# ****************************************
# @(&)Synopsys_Unique_Signature Libname="adaptive.py" Name="RAYUELA" Version="4.0.0" Type="REUSE" Injector="V-2023.09-DEV (8729328)"(&)@
